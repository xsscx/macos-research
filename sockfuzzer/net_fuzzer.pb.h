// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_fuzzer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_5ffuzzer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_5ffuzzer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_5ffuzzer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_5ffuzzer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[62]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_5ffuzzer_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_net_5ffuzzer_2eproto_metadata_getter(int index);
class Accept;
struct AcceptDefaultTypeInternal;
extern AcceptDefaultTypeInternal _Accept_default_instance_;
class AcceptNocancel;
struct AcceptNocancelDefaultTypeInternal;
extern AcceptNocancelDefaultTypeInternal _AcceptNocancel_default_instance_;
class Bind;
struct BindDefaultTypeInternal;
extern BindDefaultTypeInternal _Bind_default_instance_;
class ClearAll;
struct ClearAllDefaultTypeInternal;
extern ClearAllDefaultTypeInternal _ClearAll_default_instance_;
class Close;
struct CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Connect;
struct ConnectDefaultTypeInternal;
extern ConnectDefaultTypeInternal _Connect_default_instance_;
class ConnectNocancel;
struct ConnectNocancelDefaultTypeInternal;
extern ConnectNocancelDefaultTypeInternal _ConnectNocancel_default_instance_;
class ConnectX;
struct ConnectXDefaultTypeInternal;
extern ConnectXDefaultTypeInternal _ConnectX_default_instance_;
class DisconnectX;
struct DisconnectXDefaultTypeInternal;
extern DisconnectXDefaultTypeInternal _DisconnectX_default_instance_;
class Endpoints;
struct EndpointsDefaultTypeInternal;
extern EndpointsDefaultTypeInternal _Endpoints_default_instance_;
class GetSocketOpt;
struct GetSocketOptDefaultTypeInternal;
extern GetSocketOptDefaultTypeInternal _GetSocketOpt_default_instance_;
class Getpeername;
struct GetpeernameDefaultTypeInternal;
extern GetpeernameDefaultTypeInternal _Getpeername_default_instance_;
class Getsockname;
struct GetsocknameDefaultTypeInternal;
extern GetsocknameDefaultTypeInternal _Getsockname_default_instance_;
class IOV;
struct IOVDefaultTypeInternal;
extern IOVDefaultTypeInternal _IOV_default_instance_;
class Icmp6Hdr;
struct Icmp6HdrDefaultTypeInternal;
extern Icmp6HdrDefaultTypeInternal _Icmp6Hdr_default_instance_;
class IfReqFlags;
struct IfReqFlagsDefaultTypeInternal;
extern IfReqFlagsDefaultTypeInternal _IfReqFlags_default_instance_;
class In6AddrLifetime_64;
struct In6AddrLifetime_64DefaultTypeInternal;
extern In6AddrLifetime_64DefaultTypeInternal _In6AddrLifetime_64_default_instance_;
class In6_AliasReq_64;
struct In6_AliasReq_64DefaultTypeInternal;
extern In6_AliasReq_64DefaultTypeInternal _In6_AliasReq_64_default_instance_;
class Ioctl;
struct IoctlDefaultTypeInternal;
extern IoctlDefaultTypeInternal _Ioctl_default_instance_;
class IoctlReal;
struct IoctlRealDefaultTypeInternal;
extern IoctlRealDefaultTypeInternal _IoctlReal_default_instance_;
class Ip4Packet;
struct Ip4PacketDefaultTypeInternal;
extern Ip4PacketDefaultTypeInternal _Ip4Packet_default_instance_;
class Ip6Ext;
struct Ip6ExtDefaultTypeInternal;
extern Ip6ExtDefaultTypeInternal _Ip6Ext_default_instance_;
class Ip6FragHdr;
struct Ip6FragHdrDefaultTypeInternal;
extern Ip6FragHdrDefaultTypeInternal _Ip6FragHdr_default_instance_;
class Ip6Hdr;
struct Ip6HdrDefaultTypeInternal;
extern Ip6HdrDefaultTypeInternal _Ip6Hdr_default_instance_;
class Ip6Hdrctl;
struct Ip6HdrctlDefaultTypeInternal;
extern Ip6HdrctlDefaultTypeInternal _Ip6Hdrctl_default_instance_;
class Ip6Packet;
struct Ip6PacketDefaultTypeInternal;
extern Ip6PacketDefaultTypeInternal _Ip6Packet_default_instance_;
class Ip6Rt0Hdr;
struct Ip6Rt0HdrDefaultTypeInternal;
extern Ip6Rt0HdrDefaultTypeInternal _Ip6Rt0Hdr_default_instance_;
class Ip6RtHdr;
struct Ip6RtHdrDefaultTypeInternal;
extern Ip6RtHdrDefaultTypeInternal _Ip6RtHdr_default_instance_;
class IpHdr;
struct IpHdrDefaultTypeInternal;
extern IpHdrDefaultTypeInternal _IpHdr_default_instance_;
class Key;
struct KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Listen;
struct ListenDefaultTypeInternal;
extern ListenDefaultTypeInternal _Listen_default_instance_;
class NecpClientAction;
struct NecpClientActionDefaultTypeInternal;
extern NecpClientActionDefaultTypeInternal _NecpClientAction_default_instance_;
class NecpClientActionAdd;
struct NecpClientActionAddDefaultTypeInternal;
extern NecpClientActionAddDefaultTypeInternal _NecpClientActionAdd_default_instance_;
class NecpClientActionAgent;
struct NecpClientActionAgentDefaultTypeInternal;
extern NecpClientActionAgentDefaultTypeInternal _NecpClientActionAgent_default_instance_;
class NecpClientActionCopyParameters;
struct NecpClientActionCopyParametersDefaultTypeInternal;
extern NecpClientActionCopyParametersDefaultTypeInternal _NecpClientActionCopyParameters_default_instance_;
class NecpClientActionRemove;
struct NecpClientActionRemoveDefaultTypeInternal;
extern NecpClientActionRemoveDefaultTypeInternal _NecpClientActionRemove_default_instance_;
class NecpMatchPolicy;
struct NecpMatchPolicyDefaultTypeInternal;
extern NecpMatchPolicyDefaultTypeInternal _NecpMatchPolicy_default_instance_;
class NecpOpen;
struct NecpOpenDefaultTypeInternal;
extern NecpOpenDefaultTypeInternal _NecpOpen_default_instance_;
class NecpSessionAction;
struct NecpSessionActionDefaultTypeInternal;
extern NecpSessionActionDefaultTypeInternal _NecpSessionAction_default_instance_;
class NecpSessionOpen;
struct NecpSessionOpenDefaultTypeInternal;
extern NecpSessionOpenDefaultTypeInternal _NecpSessionOpen_default_instance_;
class NecpTlv;
struct NecpTlvDefaultTypeInternal;
extern NecpTlvDefaultTypeInternal _NecpTlv_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Peeloff;
struct PeeloffDefaultTypeInternal;
extern PeeloffDefaultTypeInternal _Peeloff_default_instance_;
class Pipe;
struct PipeDefaultTypeInternal;
extern PipeDefaultTypeInternal _Pipe_default_instance_;
class Recvfrom;
struct RecvfromDefaultTypeInternal;
extern RecvfromDefaultTypeInternal _Recvfrom_default_instance_;
class RecvfromNocancel;
struct RecvfromNocancelDefaultTypeInternal;
extern RecvfromNocancelDefaultTypeInternal _RecvfromNocancel_default_instance_;
class Recvmsg;
struct RecvmsgDefaultTypeInternal;
extern RecvmsgDefaultTypeInternal _Recvmsg_default_instance_;
class Sendmsg;
struct SendmsgDefaultTypeInternal;
extern SendmsgDefaultTypeInternal _Sendmsg_default_instance_;
class Sendto;
struct SendtoDefaultTypeInternal;
extern SendtoDefaultTypeInternal _Sendto_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SetSocketOpt;
struct SetSocketOptDefaultTypeInternal;
extern SetSocketOptDefaultTypeInternal _SetSocketOpt_default_instance_;
class Shutdown;
struct ShutdownDefaultTypeInternal;
extern ShutdownDefaultTypeInternal _Shutdown_default_instance_;
class SockAddr;
struct SockAddrDefaultTypeInternal;
extern SockAddrDefaultTypeInternal _SockAddr_default_instance_;
class SockAddr4;
struct SockAddr4DefaultTypeInternal;
extern SockAddr4DefaultTypeInternal _SockAddr4_default_instance_;
class SockAddr6;
struct SockAddr6DefaultTypeInternal;
extern SockAddr6DefaultTypeInternal _SockAddr6_default_instance_;
class SockAddrGeneric;
struct SockAddrGenericDefaultTypeInternal;
extern SockAddrGenericDefaultTypeInternal _SockAddrGeneric_default_instance_;
class Socket;
struct SocketDefaultTypeInternal;
extern SocketDefaultTypeInternal _Socket_default_instance_;
class Socketpair;
struct SocketpairDefaultTypeInternal;
extern SocketpairDefaultTypeInternal _Socketpair_default_instance_;
class Tcp6Packet;
struct Tcp6PacketDefaultTypeInternal;
extern Tcp6PacketDefaultTypeInternal _Tcp6Packet_default_instance_;
class TcpHdr;
struct TcpHdrDefaultTypeInternal;
extern TcpHdrDefaultTypeInternal _TcpHdr_default_instance_;
class TcpPacket;
struct TcpPacketDefaultTypeInternal;
extern TcpPacketDefaultTypeInternal _TcpPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Accept* Arena::CreateMaybeMessage<::Accept>(Arena*);
template<> ::AcceptNocancel* Arena::CreateMaybeMessage<::AcceptNocancel>(Arena*);
template<> ::Bind* Arena::CreateMaybeMessage<::Bind>(Arena*);
template<> ::ClearAll* Arena::CreateMaybeMessage<::ClearAll>(Arena*);
template<> ::Close* Arena::CreateMaybeMessage<::Close>(Arena*);
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
template<> ::Connect* Arena::CreateMaybeMessage<::Connect>(Arena*);
template<> ::ConnectNocancel* Arena::CreateMaybeMessage<::ConnectNocancel>(Arena*);
template<> ::ConnectX* Arena::CreateMaybeMessage<::ConnectX>(Arena*);
template<> ::DisconnectX* Arena::CreateMaybeMessage<::DisconnectX>(Arena*);
template<> ::Endpoints* Arena::CreateMaybeMessage<::Endpoints>(Arena*);
template<> ::GetSocketOpt* Arena::CreateMaybeMessage<::GetSocketOpt>(Arena*);
template<> ::Getpeername* Arena::CreateMaybeMessage<::Getpeername>(Arena*);
template<> ::Getsockname* Arena::CreateMaybeMessage<::Getsockname>(Arena*);
template<> ::IOV* Arena::CreateMaybeMessage<::IOV>(Arena*);
template<> ::Icmp6Hdr* Arena::CreateMaybeMessage<::Icmp6Hdr>(Arena*);
template<> ::IfReqFlags* Arena::CreateMaybeMessage<::IfReqFlags>(Arena*);
template<> ::In6AddrLifetime_64* Arena::CreateMaybeMessage<::In6AddrLifetime_64>(Arena*);
template<> ::In6_AliasReq_64* Arena::CreateMaybeMessage<::In6_AliasReq_64>(Arena*);
template<> ::Ioctl* Arena::CreateMaybeMessage<::Ioctl>(Arena*);
template<> ::IoctlReal* Arena::CreateMaybeMessage<::IoctlReal>(Arena*);
template<> ::Ip4Packet* Arena::CreateMaybeMessage<::Ip4Packet>(Arena*);
template<> ::Ip6Ext* Arena::CreateMaybeMessage<::Ip6Ext>(Arena*);
template<> ::Ip6FragHdr* Arena::CreateMaybeMessage<::Ip6FragHdr>(Arena*);
template<> ::Ip6Hdr* Arena::CreateMaybeMessage<::Ip6Hdr>(Arena*);
template<> ::Ip6Hdrctl* Arena::CreateMaybeMessage<::Ip6Hdrctl>(Arena*);
template<> ::Ip6Packet* Arena::CreateMaybeMessage<::Ip6Packet>(Arena*);
template<> ::Ip6Rt0Hdr* Arena::CreateMaybeMessage<::Ip6Rt0Hdr>(Arena*);
template<> ::Ip6RtHdr* Arena::CreateMaybeMessage<::Ip6RtHdr>(Arena*);
template<> ::IpHdr* Arena::CreateMaybeMessage<::IpHdr>(Arena*);
template<> ::Key* Arena::CreateMaybeMessage<::Key>(Arena*);
template<> ::Listen* Arena::CreateMaybeMessage<::Listen>(Arena*);
template<> ::NecpClientAction* Arena::CreateMaybeMessage<::NecpClientAction>(Arena*);
template<> ::NecpClientActionAdd* Arena::CreateMaybeMessage<::NecpClientActionAdd>(Arena*);
template<> ::NecpClientActionAgent* Arena::CreateMaybeMessage<::NecpClientActionAgent>(Arena*);
template<> ::NecpClientActionCopyParameters* Arena::CreateMaybeMessage<::NecpClientActionCopyParameters>(Arena*);
template<> ::NecpClientActionRemove* Arena::CreateMaybeMessage<::NecpClientActionRemove>(Arena*);
template<> ::NecpMatchPolicy* Arena::CreateMaybeMessage<::NecpMatchPolicy>(Arena*);
template<> ::NecpOpen* Arena::CreateMaybeMessage<::NecpOpen>(Arena*);
template<> ::NecpSessionAction* Arena::CreateMaybeMessage<::NecpSessionAction>(Arena*);
template<> ::NecpSessionOpen* Arena::CreateMaybeMessage<::NecpSessionOpen>(Arena*);
template<> ::NecpTlv* Arena::CreateMaybeMessage<::NecpTlv>(Arena*);
template<> ::Packet* Arena::CreateMaybeMessage<::Packet>(Arena*);
template<> ::Peeloff* Arena::CreateMaybeMessage<::Peeloff>(Arena*);
template<> ::Pipe* Arena::CreateMaybeMessage<::Pipe>(Arena*);
template<> ::Recvfrom* Arena::CreateMaybeMessage<::Recvfrom>(Arena*);
template<> ::RecvfromNocancel* Arena::CreateMaybeMessage<::RecvfromNocancel>(Arena*);
template<> ::Recvmsg* Arena::CreateMaybeMessage<::Recvmsg>(Arena*);
template<> ::Sendmsg* Arena::CreateMaybeMessage<::Sendmsg>(Arena*);
template<> ::Sendto* Arena::CreateMaybeMessage<::Sendto>(Arena*);
template<> ::Session* Arena::CreateMaybeMessage<::Session>(Arena*);
template<> ::SetSocketOpt* Arena::CreateMaybeMessage<::SetSocketOpt>(Arena*);
template<> ::Shutdown* Arena::CreateMaybeMessage<::Shutdown>(Arena*);
template<> ::SockAddr* Arena::CreateMaybeMessage<::SockAddr>(Arena*);
template<> ::SockAddr4* Arena::CreateMaybeMessage<::SockAddr4>(Arena*);
template<> ::SockAddr6* Arena::CreateMaybeMessage<::SockAddr6>(Arena*);
template<> ::SockAddrGeneric* Arena::CreateMaybeMessage<::SockAddrGeneric>(Arena*);
template<> ::Socket* Arena::CreateMaybeMessage<::Socket>(Arena*);
template<> ::Socketpair* Arena::CreateMaybeMessage<::Socketpair>(Arena*);
template<> ::Tcp6Packet* Arena::CreateMaybeMessage<::Tcp6Packet>(Arena*);
template<> ::TcpHdr* Arena::CreateMaybeMessage<::TcpHdr>(Arena*);
template<> ::TcpPacket* Arena::CreateMaybeMessage<::TcpPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SaeAssocID : int {
  ASSOCID_CASE_0 = 0,
  ASSOCID_CASE_1 = 1,
  ASSOCID_CASE_2 = 2,
  ASSOCID_CASE_3 = 3,
  ASSOCID_CASE_END = -1
};
bool SaeAssocID_IsValid(int value);
constexpr SaeAssocID SaeAssocID_MIN = ASSOCID_CASE_END;
constexpr SaeAssocID SaeAssocID_MAX = ASSOCID_CASE_3;
constexpr int SaeAssocID_ARRAYSIZE = SaeAssocID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaeAssocID_descriptor();
template<typename T>
inline const std::string& SaeAssocID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SaeAssocID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SaeAssocID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SaeAssocID_descriptor(), enum_t_value);
}
inline bool SaeAssocID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SaeAssocID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SaeAssocID>(
    SaeAssocID_descriptor(), name, value);
}
enum In6Addr : int {
  IN6_ADDR_ANY = 0,
  IN6_ADDR_LOOPBACK = 1,
  IN6_ADDR_REAL = 2,
  IN6_ADDR_SELF = 3,
  IN6_ADDR_LINK_LOCAL = 4,
  IN6_ADDR_UNSPECIFIED = 5,
  IN6_ADDR_V4COMPAT = 7,
  IN6_ADDR_V4MAPPED = 8,
  IN6_ADDR_6TO4 = 9,
  IN6_ADDR_LINKLOCAL = 10,
  IN6_ADDR_SITELOCAL = 11,
  IN6_ADDR_MULTICAST = 12,
  IN6_ADDR_UNIQUE_LOCAL = 13,
  IN6_ADDR_MC_NODELOCAL = 14,
  IN6_ADDR_MC_INTFACELOCAL = 15,
  IN6_ADDR_MC_LINKLOCAL = 16,
  IN6_ADDR_MC_SITELOCAL = 17,
  IN6_ADDR_MC_ORGLOCAL = 18,
  IN6_ADDR_MC_GLOBAL = 19,
  IN6_ADDR_LOCAL_ADDRESS = 20,
  MAYBE_LOCALHOST = 16777216
};
bool In6Addr_IsValid(int value);
constexpr In6Addr In6Addr_MIN = IN6_ADDR_ANY;
constexpr In6Addr In6Addr_MAX = MAYBE_LOCALHOST;
constexpr int In6Addr_ARRAYSIZE = In6Addr_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* In6Addr_descriptor();
template<typename T>
inline const std::string& In6Addr_Name(T enum_t_value) {
  static_assert(::std::is_same<T, In6Addr>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function In6Addr_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    In6Addr_descriptor(), enum_t_value);
}
inline bool In6Addr_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, In6Addr* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<In6Addr>(
    In6Addr_descriptor(), name, value);
}
enum InAddr : int {
  IN4_ADDR_0 = 0,
  IN4_ADDR_1 = 1,
  IN4_ADDR_2 = 2,
  IN4_ADDR_4 = 411187920,
  IN4_ADDR_5 = 2130706433,
  IN4_ADDR_6 = -1062709672,
  IN4_ADDR_BROADCAST = -1
};
bool InAddr_IsValid(int value);
constexpr InAddr InAddr_MIN = IN4_ADDR_6;
constexpr InAddr InAddr_MAX = IN4_ADDR_5;
constexpr int InAddr_ARRAYSIZE = InAddr_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InAddr_descriptor();
template<typename T>
inline const std::string& InAddr_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InAddr>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InAddr_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InAddr_descriptor(), enum_t_value);
}
inline bool InAddr_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InAddr* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InAddr>(
    InAddr_descriptor(), name, value);
}
enum FlowInfo : int {
  FLOW_INFO_0 = 0,
  FLOW_INFO_1 = 1,
  FLOW_INFO_2 = 2,
  FLOW_INFO_3 = 3
};
bool FlowInfo_IsValid(int value);
constexpr FlowInfo FlowInfo_MIN = FLOW_INFO_0;
constexpr FlowInfo FlowInfo_MAX = FLOW_INFO_3;
constexpr int FlowInfo_ARRAYSIZE = FlowInfo_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowInfo_descriptor();
template<typename T>
inline const std::string& FlowInfo_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowInfo>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowInfo_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowInfo_descriptor(), enum_t_value);
}
inline bool FlowInfo_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowInfo* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowInfo>(
    FlowInfo_descriptor(), name, value);
}
enum ScopeId : int {
  SCOPE_ID_0 = 0,
  SCOPE_ID_1 = 1,
  SCOPE_ID_2 = 2,
  SCOPE_ID_3 = 3,
  SCOPE_ID_50 = 50
};
bool ScopeId_IsValid(int value);
constexpr ScopeId ScopeId_MIN = SCOPE_ID_0;
constexpr ScopeId ScopeId_MAX = SCOPE_ID_50;
constexpr int ScopeId_ARRAYSIZE = ScopeId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScopeId_descriptor();
template<typename T>
inline const std::string& ScopeId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScopeId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScopeId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScopeId_descriptor(), enum_t_value);
}
inline bool ScopeId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScopeId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScopeId>(
    ScopeId_descriptor(), name, value);
}
enum Port : int {
  PORT_0 = 0,
  PORT_1 = 1,
  PORT_2 = 2,
  PORT_5555 = 5555,
  PORT_65000 = 65000
};
bool Port_IsValid(int value);
constexpr Port Port_MIN = PORT_0;
constexpr Port Port_MAX = PORT_65000;
constexpr int Port_ARRAYSIZE = Port_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Port_descriptor();
template<typename T>
inline const std::string& Port_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Port>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Port_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Port_descriptor(), enum_t_value);
}
inline bool Port_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Port* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Port>(
    Port_descriptor(), name, value);
}
enum IfIdx : int {
  IFIDX_CASE_0 = 0,
  IFIDX_CASE_1 = 1,
  IFIDX_CASE_2 = 2,
  IFIDX_CASE_3 = 3
};
bool IfIdx_IsValid(int value);
constexpr IfIdx IfIdx_MIN = IFIDX_CASE_0;
constexpr IfIdx IfIdx_MAX = IFIDX_CASE_3;
constexpr int IfIdx_ARRAYSIZE = IfIdx_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IfIdx_descriptor();
template<typename T>
inline const std::string& IfIdx_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IfIdx>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IfIdx_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IfIdx_descriptor(), enum_t_value);
}
inline bool IfIdx_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IfIdx* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IfIdx>(
    IfIdx_descriptor(), name, value);
}
enum ConnectXFlag : int {
  CONNECT_RESUME_ON_READ_WRITE = 1,
  CONNECT_DATA_IDEMPOTENT = 2,
  CONNECT_DATA_AUTHENTICATED = 4
};
bool ConnectXFlag_IsValid(int value);
constexpr ConnectXFlag ConnectXFlag_MIN = CONNECT_RESUME_ON_READ_WRITE;
constexpr ConnectXFlag ConnectXFlag_MAX = CONNECT_DATA_AUTHENTICATED;
constexpr int ConnectXFlag_ARRAYSIZE = ConnectXFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectXFlag_descriptor();
template<typename T>
inline const std::string& ConnectXFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectXFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectXFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectXFlag_descriptor(), enum_t_value);
}
inline bool ConnectXFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectXFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectXFlag>(
    ConnectXFlag_descriptor(), name, value);
}
enum ShutdownHow : int {
  SHUT_RD = 0,
  SHUT_WR = 1,
  SHUT_RDWR = 2
};
bool ShutdownHow_IsValid(int value);
constexpr ShutdownHow ShutdownHow_MIN = SHUT_RD;
constexpr ShutdownHow ShutdownHow_MAX = SHUT_RDWR;
constexpr int ShutdownHow_ARRAYSIZE = ShutdownHow_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShutdownHow_descriptor();
template<typename T>
inline const std::string& ShutdownHow_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShutdownHow>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShutdownHow_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShutdownHow_descriptor(), enum_t_value);
}
inline bool ShutdownHow_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShutdownHow* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShutdownHow>(
    ShutdownHow_descriptor(), name, value);
}
enum NecpOpenFlag : int {
  NECP_OPEN_FLAG_OBSERVER = 1,
  NECP_OPEN_FLAG_BACKGROUND = 2,
  NECP_OPEN_FLAG_PUSH_OBSERVER = 4
};
bool NecpOpenFlag_IsValid(int value);
constexpr NecpOpenFlag NecpOpenFlag_MIN = NECP_OPEN_FLAG_OBSERVER;
constexpr NecpOpenFlag NecpOpenFlag_MAX = NECP_OPEN_FLAG_PUSH_OBSERVER;
constexpr int NecpOpenFlag_ARRAYSIZE = NecpOpenFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NecpOpenFlag_descriptor();
template<typename T>
inline const std::string& NecpOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NecpOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NecpOpenFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NecpOpenFlag_descriptor(), enum_t_value);
}
inline bool NecpOpenFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NecpOpenFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NecpOpenFlag>(
    NecpOpenFlag_descriptor(), name, value);
}
enum NecpClientId : int {
  CLIENT_0 = 0,
  CLIENT_1 = 1,
  CLIENT_2 = 2
};
bool NecpClientId_IsValid(int value);
constexpr NecpClientId NecpClientId_MIN = CLIENT_0;
constexpr NecpClientId NecpClientId_MAX = CLIENT_2;
constexpr int NecpClientId_ARRAYSIZE = NecpClientId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NecpClientId_descriptor();
template<typename T>
inline const std::string& NecpClientId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NecpClientId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NecpClientId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NecpClientId_descriptor(), enum_t_value);
}
inline bool NecpClientId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NecpClientId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NecpClientId>(
    NecpClientId_descriptor(), name, value);
}
enum NecpClientActionNumber : int {
  NECP_CLIENT_ACTION_ADD = 1,
  NECP_CLIENT_ACTION_REMOVE = 2,
  NECP_CLIENT_ACTION_COPY_PARAMETERS = 3,
  NECP_CLIENT_ACTION_COPY_RESULT = 4,
  NECP_CLIENT_ACTION_COPY_LIST = 5,
  NECP_CLIENT_ACTION_REQUEST_NEXUS_INSTANCE = 6,
  NECP_CLIENT_ACTION_AGENT = 7,
  NECP_CLIENT_ACTION_COPY_AGENT = 8,
  NECP_CLIENT_ACTION_COPY_INTERFACE = 9,
  NECP_CLIENT_ACTION_SET_STATISTICS = 10,
  NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS = 11,
  NECP_CLIENT_ACTION_AGENT_USE = 12,
  NECP_CLIENT_ACTION_MAP_SYSCTLS = 13,
  NECP_CLIENT_ACTION_UPDATE_CACHE = 14,
  NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE = 15,
  NECP_CLIENT_ACTION_COPY_UPDATED_RESULT = 16,
  NECP_CLIENT_ACTION_ADD_FLOW = 17,
  NECP_CLIENT_ACTION_REMOVE_FLOW = 18
};
bool NecpClientActionNumber_IsValid(int value);
constexpr NecpClientActionNumber NecpClientActionNumber_MIN = NECP_CLIENT_ACTION_ADD;
constexpr NecpClientActionNumber NecpClientActionNumber_MAX = NECP_CLIENT_ACTION_REMOVE_FLOW;
constexpr int NecpClientActionNumber_ARRAYSIZE = NecpClientActionNumber_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NecpClientActionNumber_descriptor();
template<typename T>
inline const std::string& NecpClientActionNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NecpClientActionNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NecpClientActionNumber_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NecpClientActionNumber_descriptor(), enum_t_value);
}
inline bool NecpClientActionNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NecpClientActionNumber* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NecpClientActionNumber>(
    NecpClientActionNumber_descriptor(), name, value);
}
enum NecpSessionActionNumber : int {
  NECP_SESSION_ACTION_POLICY_ADD = 1,
  NECP_SESSION_ACTION_POLICY_GET = 2,
  NECP_SESSION_ACTION_POLICY_DELETE = 3,
  NECP_SESSION_ACTION_POLICY_APPLY_ALL = 4,
  NECP_SESSION_ACTION_POLICY_LIST_ALL = 5,
  NECP_SESSION_ACTION_POLICY_DELETE_ALL = 6,
  NECP_SESSION_ACTION_SET_SESSION_PRIORITY = 7,
  NECP_SESSION_ACTION_LOCK_SESSION_TO_PROC = 8,
  NECP_SESSION_ACTION_REGISTER_SERVICE = 9,
  NECP_SESSION_ACTION_UNREGISTER_SERVICE = 10,
  NECP_SESSION_ACTION_POLICY_DUMP_ALL = 11
};
bool NecpSessionActionNumber_IsValid(int value);
constexpr NecpSessionActionNumber NecpSessionActionNumber_MIN = NECP_SESSION_ACTION_POLICY_ADD;
constexpr NecpSessionActionNumber NecpSessionActionNumber_MAX = NECP_SESSION_ACTION_POLICY_DUMP_ALL;
constexpr int NecpSessionActionNumber_ARRAYSIZE = NecpSessionActionNumber_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NecpSessionActionNumber_descriptor();
template<typename T>
inline const std::string& NecpSessionActionNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NecpSessionActionNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NecpSessionActionNumber_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NecpSessionActionNumber_descriptor(), enum_t_value);
}
inline bool NecpSessionActionNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NecpSessionActionNumber* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NecpSessionActionNumber>(
    NecpSessionActionNumber_descriptor(), name, value);
}
enum IfrName : int {
  LO0 = 0,
  STF0 = 1
};
bool IfrName_IsValid(int value);
constexpr IfrName IfrName_MIN = LO0;
constexpr IfrName IfrName_MAX = STF0;
constexpr int IfrName_ARRAYSIZE = IfrName_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IfrName_descriptor();
template<typename T>
inline const std::string& IfrName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IfrName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IfrName_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IfrName_descriptor(), enum_t_value);
}
inline bool IfrName_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IfrName* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IfrName>(
    IfrName_descriptor(), name, value);
}
enum IfruFlag : int {
  IFF_UP = 1,
  IFF_BROADCAST = 2,
  IFF_DEBUG = 4,
  IFF_LOOPBACK = 8,
  IFF_POINTOPOINT = 16,
  IFF_NOTRAILERS = 32,
  IFF_RUNNING = 64,
  IFF_NOARP = 128,
  IFF_PROMISC = 256,
  IFF_ALLMULTI = 512,
  IFF_OACTIVE = 1024,
  IFF_SIMPLEX = 2048,
  IFF_LINK0 = 4096,
  IFF_LINK1 = 8192,
  IFF_LINK2 = 16384,
  IFF_MULTICAST = 32768
};
bool IfruFlag_IsValid(int value);
constexpr IfruFlag IfruFlag_MIN = IFF_UP;
constexpr IfruFlag IfruFlag_MAX = IFF_MULTICAST;
constexpr int IfruFlag_ARRAYSIZE = IfruFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IfruFlag_descriptor();
template<typename T>
inline const std::string& IfruFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IfruFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IfruFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IfruFlag_descriptor(), enum_t_value);
}
inline bool IfruFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IfruFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IfruFlag>(
    IfruFlag_descriptor(), name, value);
}
enum IfraFlag : int {
  IN6_IFF_ANYCAST = 1,
  IN6_IFF_TENTATIVE = 2,
  IN6_IFF_DUPLICATED = 4,
  IN6_IFF_DETACHED = 8,
  IN6_IFF_DEPRECATED = 16,
  IN6_IFF_NODAD = 32,
  IN6_IFF_AUTOCONF = 64,
  IN6_IFF_TEMPORARY = 128,
  IN6_IFF_DYNAMIC = 256,
  IN6_IFF_OPTIMISTIC = 512,
  IN6_IFF_SECURED = 1024,
  IN6_IFF_SWIFTDAD = 2048,
  IN6_IFF_CLAT46 = 4096,
  IN6_IFF_NOPFX = 32768
};
bool IfraFlag_IsValid(int value);
constexpr IfraFlag IfraFlag_MIN = IN6_IFF_ANYCAST;
constexpr IfraFlag IfraFlag_MAX = IN6_IFF_NOPFX;
constexpr int IfraFlag_ARRAYSIZE = IfraFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IfraFlag_descriptor();
template<typename T>
inline const std::string& IfraFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IfraFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IfraFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IfraFlag_descriptor(), enum_t_value);
}
inline bool IfraFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IfraFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IfraFlag>(
    IfraFlag_descriptor(), name, value);
}
enum Ip6RtType : int {
  IPV6_RTHDR_TYPE_0 = 0
};
bool Ip6RtType_IsValid(int value);
constexpr Ip6RtType Ip6RtType_MIN = IPV6_RTHDR_TYPE_0;
constexpr Ip6RtType Ip6RtType_MAX = IPV6_RTHDR_TYPE_0;
constexpr int Ip6RtType_ARRAYSIZE = Ip6RtType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ip6RtType_descriptor();
template<typename T>
inline const std::string& Ip6RtType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ip6RtType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ip6RtType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ip6RtType_descriptor(), enum_t_value);
}
inline bool Ip6RtType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ip6RtType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ip6RtType>(
    Ip6RtType_descriptor(), name, value);
}
enum Icmp6Type : int {
  ICMP6_DST_UNREACH = 1,
  ICMP6_PACKET_TOO_BIG = 2,
  ICMP6_TIME_EXCEEDED = 3,
  ICMP6_PARAM_PROB = 4,
  ICMP6_ECHO_REQUEST = 128,
  ICMP6_ECHO_REPLY = 129,
  MLD_LISTENER_QUERY = 130,
  MLD_LISTENER_REPORT = 131,
  MLD_LISTENER_DONE = 132,
  ND_ROUTER_SOLICIT = 133,
  ND_ROUTER_ADVERT = 134,
  ND_NEIGHBOR_SOLICIT = 135,
  ND_NEIGHBOR_ADVERT = 136,
  ND_REDIRECT = 137,
  ICMP6_ROUTER_RENUMBERING = 138,
  ICMP6_WRUREQUEST = 139,
  ICMP6_WRUREPLY = 140,
  MLDV2_LISTENER_REPORT = 143,
  MLD_MTRACE_RESP = 200,
  MLD_MTRACE = 201
};
bool Icmp6Type_IsValid(int value);
constexpr Icmp6Type Icmp6Type_MIN = ICMP6_DST_UNREACH;
constexpr Icmp6Type Icmp6Type_MAX = MLD_MTRACE;
constexpr int Icmp6Type_ARRAYSIZE = Icmp6Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Icmp6Type_descriptor();
template<typename T>
inline const std::string& Icmp6Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Icmp6Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Icmp6Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Icmp6Type_descriptor(), enum_t_value);
}
inline bool Icmp6Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Icmp6Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Icmp6Type>(
    Icmp6Type_descriptor(), name, value);
}
enum Icmp6Code : int {
  ICMP6_DST_UNREACH_NOROUTE = 0,
  ICMP6_DST_UNREACH_ADMIN = 1,
  ICMP6_DST_UNREACH_NOTNEIGHBOR = 2,
  ICMP6_DST_UNREACH_ADDR = 3,
  ICMP6_DST_UNREACH_NOPORT = 4,
  ICMP6_INFOMSG_MASK = 128,
  ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET = 255
};
bool Icmp6Code_IsValid(int value);
constexpr Icmp6Code Icmp6Code_MIN = ICMP6_DST_UNREACH_NOROUTE;
constexpr Icmp6Code Icmp6Code_MAX = ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET;
constexpr int Icmp6Code_ARRAYSIZE = Icmp6Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Icmp6Code_descriptor();
template<typename T>
inline const std::string& Icmp6Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Icmp6Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Icmp6Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Icmp6Code_descriptor(), enum_t_value);
}
inline bool Icmp6Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Icmp6Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Icmp6Code>(
    Icmp6Code_descriptor(), name, value);
}
enum TcpSeq : int {
  SEQ_1 = 1,
  SEQ_2 = 2,
  SEQ_3 = 3,
  SEQ_4 = 4,
  SEQ_5 = 5,
  SEQ_6 = 6,
  SEQ_7 = 7,
  SEQ_8 = 8
};
bool TcpSeq_IsValid(int value);
constexpr TcpSeq TcpSeq_MIN = SEQ_1;
constexpr TcpSeq TcpSeq_MAX = SEQ_8;
constexpr int TcpSeq_ARRAYSIZE = TcpSeq_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TcpSeq_descriptor();
template<typename T>
inline const std::string& TcpSeq_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TcpSeq>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TcpSeq_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TcpSeq_descriptor(), enum_t_value);
}
inline bool TcpSeq_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TcpSeq* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TcpSeq>(
    TcpSeq_descriptor(), name, value);
}
enum TcpFlag : int {
  TH_FIN = 1,
  TH_SYN = 2,
  TH_RST = 4,
  TH_PUSH = 8,
  TH_ACK = 16,
  TH_URG = 32,
  TH_ECE = 64,
  TH_CWR = 128
};
bool TcpFlag_IsValid(int value);
constexpr TcpFlag TcpFlag_MIN = TH_FIN;
constexpr TcpFlag TcpFlag_MAX = TH_CWR;
constexpr int TcpFlag_ARRAYSIZE = TcpFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TcpFlag_descriptor();
template<typename T>
inline const std::string& TcpFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TcpFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TcpFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TcpFlag_descriptor(), enum_t_value);
}
inline bool TcpFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TcpFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TcpFlag>(
    TcpFlag_descriptor(), name, value);
}
enum IpVersion : int {
  IPV4 = 4,
  IPV6 = 6
};
bool IpVersion_IsValid(int value);
constexpr IpVersion IpVersion_MIN = IPV4;
constexpr IpVersion IpVersion_MAX = IPV6;
constexpr int IpVersion_ARRAYSIZE = IpVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpVersion_descriptor();
template<typename T>
inline const std::string& IpVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IpVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IpVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IpVersion_descriptor(), enum_t_value);
}
inline bool IpVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IpVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IpVersion>(
    IpVersion_descriptor(), name, value);
}
enum IoctlIdx : int {
  SIOCSHIWAT = 1,
  SIOCGHIWAT = 2,
  SIOCSLOWAT = 3,
  SIOCGLOWAT = 4,
  SIOCATMARK = 5,
  SIOCSPGRP = 6,
  SIOCGPGRP = 7,
  SIOCSIFADDR = 8,
  OSIOCGIFADDR = 9,
  SIOCSIFDSTADDR = 10,
  OSIOCGIFDSTADDR = 11,
  SIOCSIFFLAGS = 12,
  SIOCGIFFLAGS = 13,
  OSIOCGIFBRDADDR = 14,
  SIOCSIFBRDADDR = 15,
  OSIOCGIFCONF = 16,
  OSIOCGIFCONF32 = 17,
  OSIOCGIFCONF64 = 18,
  OSIOCGIFNETMASK = 19,
  SIOCSIFNETMASK = 20,
  SIOCGIFMETRIC = 21,
  SIOCSIFMETRIC = 22,
  SIOCDIFADDR = 23,
  SIOCAIFADDR = 24,
  SIOCGIFADDR = 25,
  SIOCGIFDSTADDR = 26,
  SIOCGIFBRDADDR = 27,
  SIOCGIFCONF = 28,
  SIOCGIFCONF32 = 29,
  SIOCGIFCONF64 = 30,
  SIOCGIFNETMASK = 31,
  SIOCADDMULTI = 32,
  SIOCDELMULTI = 33,
  SIOCGIFMTU = 34,
  SIOCSIFMTU = 35,
  SIOCGIFPHYS = 36,
  SIOCSIFPHYS = 37,
  SIOCSIFMEDIA = 38,
  SIOCGIFMEDIA = 39,
  SIOCGIFMEDIA32 = 40,
  SIOCGIFMEDIA64 = 41,
  SIOCSIFGENERIC = 42,
  SIOCGIFGENERIC = 43,
  SIOCSIFLLADDR = 44,
  SIOCGIFSTATUS = 45,
  SIOCSIFPHYADDR = 46,
  SIOCGIFPSRCADDR = 47,
  SIOCGIFPDSTADDR = 48,
  SIOCDIFPHYADDR = 49,
  SIOCGIFDEVMTU = 50,
  SIOCSIFALTMTU = 51,
  SIOCPROTOATTACH = 52,
  SIOCPROTODETACH = 53,
  SIOCIFCREATE = 54,
  SIOCIFDESTROY = 55,
  SIOCSIFVLAN = 56,
  SIOCGIFVLAN = 57,
  SIOCSETVLAN = 58,
  SIOCGETVLAN = 59,
  SIOCSIFDEVMTU = 60,
  SIOCIFGCLONERS = 61,
  SIOCIFGCLONERS32 = 62,
  SIOCIFGCLONERS64 = 63,
  SIOCGIFASYNCMAP = 64,
  SIOCSIFASYNCMAP = 65,
  SIOCSIFKPI = 66,
  SIOCGIFKPI = 67,
  SIOCGIFWAKEFLAGS = 68,
  SIOCGIFGETRTREFCNT = 69,
  SIOCGIFLINKQUALITYMETRIC = 70,
  SIOCSETROUTERMODE = 71,
  SIOCGIFEFLAGS = 72,
  SIOCSIFDESC = 73,
  SIOCGIFDESC = 74,
  SIOCSIFLINKPARAMS = 75,
  SIOCGIFLINKPARAMS = 76,
  SIOCGIFQUEUESTATS = 77,
  SIOCSIFTHROTTLE = 78,
  SIOCGIFTHROTTLE = 79,
  SIOCGASSOCIDS = 80,
  SIOCGCONNIDS = 81,
  SIOCGCONNINFO = 82,
  SIOCGASSOCIDS32 = 83,
  SIOCGASSOCIDS64 = 84,
  SIOCGCONNIDS32 = 85,
  SIOCGCONNIDS64 = 86,
  SIOCGCONNINFO32 = 87,
  SIOCGCONNINFO64 = 88,
  SIOCSCONNORDER = 89,
  SIOCGCONNORDER = 90,
  SIOCSIFLOG = 91,
  SIOCGIFLOG = 92,
  SIOCGIFDELEGATE = 93,
  SIOCGIFLLADDR = 94,
  SIOCGIFTYPE = 95,
  SIOCGIFEXPENSIVE = 96,
  SIOCSIFEXPENSIVE = 97,
  SIOCGIF2KCL = 98,
  SIOCSIF2KCL = 99,
  SIOCGSTARTDELAY = 100,
  SIOCAIFAGENTID = 101,
  SIOCDIFAGENTID = 102,
  SIOCGIFAGENTIDS = 103,
  SIOCGIFAGENTDATA = 104,
  SIOCGIFAGENTIDS32 = 105,
  SIOCGIFAGENTIDS64 = 106,
  SIOCGIFAGENTDATA32 = 107,
  SIOCGIFAGENTDATA64 = 108,
  SIOCSIFINTERFACESTATE = 109,
  SIOCGIFINTERFACESTATE = 110,
  SIOCSIFPROBECONNECTIVITY = 111,
  SIOCGIFPROBECONNECTIVITY = 112,
  SIOCGIFFUNCTIONALTYPE = 113,
  SIOCSIFNETSIGNATURE = 114,
  SIOCGIFNETSIGNATURE = 115,
  SIOCGECNMODE = 116,
  SIOCSECNMODE = 117,
  SIOCSIFORDER = 118,
  SIOCGIFORDER = 119,
  SIOCSQOSMARKINGMODE = 120,
  SIOCSFASTLANECAPABLE = 121,
  SIOCSQOSMARKINGENABLED = 122,
  SIOCSFASTLEENABLED = 123,
  SIOCGQOSMARKINGMODE = 124,
  SIOCGQOSMARKINGENABLED = 125,
  SIOCSIFTIMESTAMPENABLE = 126,
  SIOCSIFTIMESTAMPDISABLE = 127,
  SIOCGIFTIMESTAMPENABLED = 128,
  SIOCSIFDISABLEOUTPUT = 129,
  SIOCGIFAGENTLIST = 130,
  SIOCGIFAGENTLIST32 = 131,
  SIOCGIFAGENTLIST64 = 132,
  SIOCSIFLOWINTERNET = 133,
  SIOCGIFLOWINTERNET = 134,
  SIOCGIFNAT64PREFIX = 135,
  SIOCSIFNAT64PREFIX = 136,
  SIOCGIFNEXUS = 137,
  SIOCSIFADDR_IN6 = 138,
  SIOCGIFADDR_IN6 = 139,
  SIOCSIFDSTADDR_IN6 = 140,
  SIOCSIFNETMASK_IN6 = 141,
  SIOCGIFDSTADDR_IN6 = 142,
  SIOCGIFNETMASK_IN6 = 143,
  SIOCDIFADDR_IN6 = 144,
  SIOCAIFADDR_IN6 = 145,
  SIOCAIFADDR_IN6_32 = 146,
  SIOCAIFADDR_IN6_64 = 147,
  SIOCSIFPHYADDR_IN6 = 148,
  SIOCSIFPHYADDR_IN6_32 = 149,
  SIOCSIFPHYADDR_IN6_64 = 150,
  SIOCGIFPSRCADDR_IN6 = 151,
  SIOCGIFPDSTADDR_IN6 = 152,
  SIOCGIFAFLAG_IN6 = 153,
  SIOCGDRLST_IN6 = 154,
  SIOCGDRLST_IN6_32 = 155,
  SIOCGDRLST_IN6_64 = 156,
  SIOCGPRLST_IN6 = 157,
  SIOCGPRLST_IN6_32 = 158,
  SIOCGPRLST_IN6_64 = 159,
  OSIOCGIFINFO_IN6 = 160,
  SIOCGIFINFO_IN6 = 161,
  SIOCSNDFLUSH_IN6 = 162,
  SIOCGNBRINFO_IN6 = 163,
  SIOCGNBRINFO_IN6_32 = 164,
  SIOCGNBRINFO_IN6_64 = 165,
  SIOCSPFXFLUSH_IN6 = 166,
  SIOCSRTRFLUSH_IN6 = 167,
  SIOCGIFALIFETIME_IN6 = 168,
  SIOCSIFALIFETIME_IN6 = 169,
  SIOCGIFSTAT_IN6 = 170,
  SIOCGIFSTAT_ICMP6 = 171,
  SIOCSDEFIFACE_IN6 = 172,
  SIOCGDEFIFACE_IN6 = 173,
  SIOCSDEFIFACE_IN6_32 = 174,
  SIOCSDEFIFACE_IN6_64 = 175,
  SIOCGDEFIFACE_IN6_32 = 176,
  SIOCGDEFIFACE_IN6_64 = 177,
  SIOCSIFINFO_FLAGS = 178,
  SIOCSSCOPE6 = 179,
  SIOCGSCOPE6 = 180,
  SIOCGSCOPE6DEF = 181,
  SIOCSIFPREFIX_IN6 = 182,
  SIOCGIFPREFIX_IN6 = 183,
  SIOCDIFPREFIX_IN6 = 184,
  SIOCAIFPREFIX_IN6 = 185,
  SIOCCIFPREFIX_IN6 = 186,
  SIOCSGIFPREFIX_IN6 = 187,
  SIOCAADDRCTL_POLICY = 188,
  SIOCDADDRCTL_POLICY = 189,
  SIOCPROTOATTACH_IN6 = 190,
  SIOCPROTOATTACH_IN6_32 = 191,
  SIOCPROTOATTACH_IN6_64 = 192,
  SIOCPROTODETACH_IN6 = 193,
  SIOCLL_START = 194,
  SIOCLL_START_32 = 195,
  SIOCLL_START_64 = 196,
  SIOCLL_STOP = 197,
  SIOCAUTOCONF_START = 198,
  SIOCAUTOCONF_STOP = 199,
  SIOCDRADD_IN6 = 200,
  SIOCDRADD_IN6_32 = 201,
  SIOCDRADD_IN6_64 = 202,
  SIOCDRDEL_IN6 = 203,
  SIOCDRDEL_IN6_32 = 204,
  SIOCDRDEL_IN6_64 = 205,
  SIOCSETROUTERMODE_IN6 = 206,
  SIOCLL_CGASTART = 207,
  SIOCLL_CGASTART_32 = 208,
  SIOCLL_CGASTART_64 = 209,
  SIOCGIFCGAPREP_IN6 = 210,
  SIOCSIFCGAPREP_IN6 = 211,
  DIOCSTART = 212,
  DIOCSTOP = 213,
  DIOCADDRULE = 214,
  DIOCGETSTARTERS = 215,
  DIOCGETRULES = 216,
  DIOCGETRULE = 217,
  DIOCSTARTREF = 218,
  DIOCSTOPREF = 219,
  DIOCCLRSTATES = 220,
  DIOCGETSTATE = 221,
  DIOCSETSTATUSIF = 222,
  DIOCGETSTATUS = 223,
  DIOCCLRSTATUS = 224,
  DIOCNATLOOK = 225,
  DIOCSETDEBUG = 226,
  DIOCGETSTATES = 227,
  DIOCCHANGERULE = 228,
  DIOCINSERTRULE = 229,
  DIOCDELETERULE = 230,
  DIOCSETTIMEOUT = 231,
  DIOCGETTIMEOUT = 232,
  DIOCADDSTATE = 233,
  DIOCCLRRULECTRS = 234,
  DIOCGETLIMIT = 235,
  DIOCSETLIMIT = 236,
  DIOCKILLSTATES = 237,
  DIOCSTARTALTQ = 238,
  DIOCSTOPALTQ = 239,
  DIOCADDALTQ = 240,
  DIOCGETALTQS = 241,
  DIOCGETALTQ = 242,
  DIOCCHANGEALTQ = 243,
  DIOCGETQSTATS = 244,
  DIOCBEGINADDRS = 245,
  DIOCADDADDR = 246,
  DIOCGETADDRS = 247,
  DIOCGETADDR = 248,
  DIOCCHANGEADDR = 249,
  DIOCGETRULESETS = 250,
  DIOCGETRULESET = 251,
  DIOCRCLRTABLES = 252,
  DIOCRADDTABLES = 253,
  DIOCRDELTABLES = 254,
  DIOCRGETTABLES = 255,
  DIOCRGETTSTATS = 256,
  DIOCRCLRTSTATS = 257,
  DIOCRCLRADDRS = 258,
  DIOCRADDADDRS = 259,
  DIOCRDELADDRS = 260,
  DIOCRSETADDRS = 261,
  DIOCRGETADDRS = 262,
  DIOCRGETASTATS = 263,
  DIOCRCLRASTATS = 264,
  DIOCRTSTADDRS = 265,
  DIOCRSETTFLAGS = 266,
  DIOCRINADEFINE = 267,
  DIOCOSFPFLUSH = 268,
  DIOCOSFPADD = 269,
  DIOCOSFPGET = 270,
  DIOCXBEGIN = 271,
  DIOCXCOMMIT = 272,
  DIOCXROLLBACK = 273,
  DIOCGETSRCNODES = 274,
  DIOCCLRSRCNODES = 275,
  DIOCSETHOSTID = 276,
  DIOCIGETIFACES = 277,
  DIOCSETIFFLAG = 278,
  DIOCCLRIFFLAG = 279,
  DIOCKILLSRCNODES = 280,
  DIOCGIFSPEED = 281
};
bool IoctlIdx_IsValid(int value);
constexpr IoctlIdx IoctlIdx_MIN = SIOCSHIWAT;
constexpr IoctlIdx IoctlIdx_MAX = DIOCGIFSPEED;
constexpr int IoctlIdx_ARRAYSIZE = IoctlIdx_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IoctlIdx_descriptor();
template<typename T>
inline const std::string& IoctlIdx_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IoctlIdx>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IoctlIdx_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IoctlIdx_descriptor(), enum_t_value);
}
inline bool IoctlIdx_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IoctlIdx* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IoctlIdx>(
    IoctlIdx_descriptor(), name, value);
}
enum SocketOptName : int {
  SO_DEBUG = 1,
  SO_ACCEPTCONN = 2,
  SO_REUSEADDR = 4,
  SO_KEEPALIVE = 8,
  SO_DONTROUTE = 16,
  SO_BROADCAST = 32,
  SO_USELOOPBACK = 64,
  SO_LINGER = 128,
  SO_OOBINLINE = 256,
  SO_REUSEPORT = 512,
  SO_TIMESTAMP = 1024,
  SO_TIMESTAMP_MONOTONIC = 2048,
  SO_ACCEPTFILTER = 4096,
  SO_DONTTRUNC = 8192,
  SO_WANTMORE = 16384,
  SO_WANTOOBFLAG = 32768,
  SO_NOWAKEFROMSLEEP = 65536,
  SO_NOAPNFALLBK = 131072,
  SO_TIMESTAMP_CONTINUOUS = 262144,
  SO_SNDBUF = 4097,
  SO_RCVBUF = 4098,
  SO_SNDLOWAT = 4099,
  SO_RCVLOWAT = 4100,
  SO_SNDTIMEO = 4101,
  SO_RCVTIMEO = 4102,
  SO_ERROR = 4103,
  SO_TYPE = 4104,
  SO_LABEL = 4112,
  SO_PEERLABEL = 4113,
  SO_NREAD = 4128,
  SO_NKE = 4129,
  SO_NOSIGPIPE = 4130,
  SO_NOADDRERR = 4131,
  SO_NWRITE = 4132,
  SO_REUSESHAREUID = 4133,
  SO_NOTIFYCONFLICT = 4134,
  SO_UPCALLCLOSEWAIT = 4135,
  SO_LINGER_SEC = 4224,
  SO_RESTRICTIONS = 4225,
  SO_RANDOMPORT = 4226,
  SO_NP_EXTENSIONS = 4227,
  SO_EXECPATH = 4229,
  SO_TRAFFIC_CLASS = 4230,
  SO_TC_BK_SYS = 100,
  SO_TC_BK = 200,
  SO_TC_BE = 0,
  SO_TC_RD = 300,
  SO_TC_OAM = 400,
  SO_TC_AV = 500,
  SO_TC_RV = 600,
  SO_TC_VI = 700,
  SO_TC_VO = 800,
  SO_TC_CTL = 900,
  SO_TC_MAX = 10,
  SO_TC_UNSPEC = -1,
  SO_RECV_TRAFFIC_CLASS = 4231,
  SO_TRAFFIC_CLASS_DBG = 4232,
  SO_TRAFFIC_CLASS_STATS = 4233,
  SO_PRIVILEGED_TRAFFIC_CLASS = 4240,
  SO_DEFUNCTIT = 4241,
  SO_DEFUNCTOK = 4352,
  SO_ISDEFUNCT = 4353,
  SO_OPPORTUNISTIC = 4354,
  SO_FLUSH = 4355,
  SO_RECV_ANYIF = 4356,
  SO_TRAFFIC_MGT_BACKGROUND = 4357,
  SO_FLOW_DIVERT_TOKEN = 4358,
  SO_DELEGATED = 4359,
  SO_DELEGATED_UUID = 4360,
  SO_NECP_ATTRIBUTES = 4361,
  SO_CFIL_SOCK_ID = 4368,
  SO_NECP_CLIENTUUID = 4369,
  SO_NUMRCVPKT = 4370,
  SO_AWDL_UNRESTRICTED = 4371,
  SO_EXTENDED_BK_IDLE = 4372,
  SO_MARK_CELLFALLBACK = 4373,
  SO_NET_SERVICE_TYPE = 4374,
  SO_QOSMARKING_POLICY_OVERRIDE = 4375,
  SO_INTCOPROC_ALLOW = 4376,
  SO_TC_NET_SERVICE_OFFSET = 10000,
  SO_NETSVC_MARKING_LEVEL = 4377,
  TCPOPT_EOL = 0,
  TCPOPT_NOP = 1,
  TCPOPT_MAXSEG = 2,
  TCPOLEN_MAXSEG = 4,
  TCPOPT_WINDOW = 3,
  TCPOLEN_WINDOW = 3,
  TCPOPT_SACK_PERMITTED = 4,
  TCPOLEN_SACK_PERMITTED = 2,
  TCPOPT_SACK = 5,
  TCPOLEN_SACK = 8,
  TCPOPT_TIMESTAMP = 8,
  TCPOLEN_TIMESTAMP = 10,
  MAX_TCPOPTLEN = 40,
  TCPOPT_CC = 11,
  TCPOPT_CCNEW = 12,
  TCPOPT_CCECHO = 13,
  TCPOLEN_CC = 6,
  TCPOPT_SIGNATURE = 19,
  TCPOLEN_SIGNATURE = 18,
  TCPOPT_MULTIPATH = 30,
  TCPOPT_FASTOPEN = 34,
  TCPOLEN_FASTOPEN_REQ = 2,
  MAX_SACK_BLKS = 6,
  TCP_MAX_SACK = 4,
  TCP_MSS = 512,
  TCP_MINMSS = 216,
  TCP6_MSS = 1024,
  TCP_MAXWIN = 65535,
  TTCP_CLIENT_SND_WND = 4096,
  TCP_MAX_WINSHIFT = 14,
  TCP_NODELAY = 1,
  TCP_MAXSEG = 2,
  TCP_NOPUSH = 4,
  TCP_NOOPT = 8,
  TCP_KEEPALIVE = 16,
  TCP_CONNECTIONTIMEOUT = 32,
  PERSIST_TIMEOUT = 64,
  TCP_RXT_CONNDROPTIME = 128,
  TCP_RXT_FINDROP = 256,
  TCP_KEEPINTVL = 257,
  TCP_KEEPCNT = 258,
  TCP_SENDMOREACKS = 259,
  TCP_ENABLE_ECN = 260,
  TCP_FASTOPEN = 261,
  TCP_CONNECTION_INFO = 262,
  TCP_INFO = 512,
  TCP_MEASURE_SND_BW = 514,
  TCP_NOTSENT_LOWAT = 513,
  TCP_MEASURE_BW_BURST = 515,
  TCP_PEER_PID = 516,
  TCP_ADAPTIVE_READ_TIMEOUT = 517,
  TCP_ENABLE_MSGS = 518,
  TCP_ADAPTIVE_WRITE_TIMEOUT = 519,
  TCP_NOTIMEWAIT = 520,
  TCP_DISABLE_BLACKHOLE_DETECTION = 521,
  TCP_ECN_MODE = 528,
  TCP_KEEPALIVE_OFFLOAD = 529,
  ECN_MODE_DEFAULT = 0,
  ECN_MODE_ENABLE = 1,
  ECN_MODE_DISABLE = 2,
  TCP_MAX_NOTIFY_ACK = 10,
  TCP_NOTIFY_ACKNOWLEDGEMENT = 530,
  MPTCP_SERVICE_TYPE = 531,
  TCP_FASTOPEN_FORCE_HEURISTICS = 532,
  MPTCP_SVCTYPE_HANDOVER = 0,
  MPTCP_SVCTYPE_INTERACTIVE = 1,
  MPTCP_SVCTYPE_AGGREGATE = 2,
  MPTCP_SVCTYPE_MAX = 3,
  TCP_RXT_MINIMUM_TIMEOUT = 533,
  MPTCP_ALTERNATE_PORT = 534,
  TCPI_OPT_TIMESTAMPS = 1,
  TCPI_OPT_SACK = 2,
  TCPI_OPT_WSCALE = 4,
  TCPI_OPT_ECN = 8,
  TCPI_FLAG_LOSSRECOVERY = 1,
  TCPI_FLAG_STREAMING_ON = 2,
  CONNINFO_MPTCP_VERSION = 3,
  MPTCP_ITFSTATS_SIZE = 4,
  MPTCPCI_FIRSTPARTY = 1,
  TCPCI_OPT_TIMESTAMPS = 1,
  TCPCI_OPT_SACK = 2,
  TCPCI_OPT_WSCALE = 4,
  TCPCI_OPT_ECN = 8,
  TCPCI_FLAG_LOSSRECOVERY = 1,
  TCPCI_FLAG_REORDERING_DETECTED = 2,
  IP_OPTIONS = 1,
  IP_HDRINCL = 2,
  IP_TOS = 3,
  IP_TTL = 4,
  IP_RECVOPTS = 5,
  IP_RECVRETOPTS = 6,
  IP_RECVDSTADDR = 7,
  IP_RETOPTS = 8,
  IP_MULTICAST_IF = 9,
  IP_MULTICAST_TTL = 10,
  IP_MULTICAST_LOOP = 11,
  IP_ADD_MEMBERSHIP = 12,
  IP_DROP_MEMBERSHIP = 13,
  IP_MULTICAST_VIF = 14,
  IP_RSVP_ON = 15,
  IP_RSVP_OFF = 16,
  IP_RSVP_VIF_ON = 17,
  IP_RSVP_VIF_OFF = 18,
  IP_PORTRANGE = 19,
  IP_RECVIF = 20,
  IP_IPSEC_POLICY = 21,
  IP_FAITH = 22,
  IP_STRIPHDR = 23,
  IP_RECVTTL = 24,
  IP_BOUND_IF = 25,
  IP_PKTINFO = 26,
  IP_RECVTOS = 27,
  IP_FW_ADD = 40,
  IP_FW_DEL = 41,
  IP_FW_FLUSH = 42,
  IP_FW_ZERO = 43,
  IP_FW_GET = 44,
  IP_FW_RESETLOG = 45,
  IP_OLD_FW_ADD = 50,
  IP_OLD_FW_DEL = 51,
  IP_OLD_FW_FLUSH = 52,
  IP_OLD_FW_ZERO = 53,
  IP_OLD_FW_GET = 54,
  IP_NAT__XXX = 55,
  IP_OLD_FW_RESETLOG = 56,
  IP_DUMMYNET_CONFIGURE = 60,
  IP_DUMMYNET_DEL = 61,
  IP_DUMMYNET_FLUSH = 62,
  IP_DUMMYNET_GET = 64,
  IP_TRAFFIC_MGT_BACKGROUND = 65,
  IP_MULTICAST_IFINDEX = 66,
  IP_ADD_SOURCE_MEMBERSHIP = 70,
  IP_DROP_SOURCE_MEMBERSHIP = 71,
  IP_BLOCK_SOURCE = 72,
  IP_UNBLOCK_SOURCE = 73,
  IP_MSFILTER = 74,
  MCAST_JOIN_GROUP = 80,
  MCAST_LEAVE_GROUP = 81,
  MCAST_JOIN_SOURCE_GROUP = 82,
  MCAST_LEAVE_SOURCE_GROUP = 83,
  MCAST_BLOCK_SOURCE = 84,
  MCAST_UNBLOCK_SOURCE = 85,
  IP_FORCE_OUT_IFP = 69,
  IP_NO_IFT_CELLULAR = 6969,
  IP_OUT_IF = 9696,
  IP_DEFAULT_MULTICAST_TTL = 1,
  IP_DEFAULT_MULTICAST_LOOP = 1,
  IP_MIN_MEMBERSHIPS = 31,
  IP_MAX_MEMBERSHIPS = 4095,
  IP_MAX_GROUP_SRC_FILTER = 512,
  IP_MAX_SOCK_SRC_FILTER = 128,
  IP_MAX_SOCK_MUTE_FILTER = 128,
  MCAST_INCLUDE = 1,
  MCAST_EXCLUDE = 2,
  IP_PORTRANGE_DEFAULT = 0,
  IP_PORTRANGE_HIGH = 1,
  IP_PORTRANGE_LOW = 2,
  IPCTL_FORWARDING = 1,
  IPCTL_SENDREDIRECTS = 2,
  IPCTL_DEFTTL = 3,
  IPCTL_DEFMTU = 4,
  IPCTL_RTEXPIRE = 5,
  IPCTL_RTMINEXPIRE = 6,
  IPCTL_RTMAXCACHE = 7,
  IPCTL_SOURCEROUTE = 8,
  IPCTL_DIRECTEDBROADCAST = 9,
  IPCTL_INTRQMAXLEN = 10,
  IPCTL_INTRQDROPS = 11,
  IPCTL_STATS = 12,
  IPCTL_ACCEPTSOURCEROUTE = 13,
  IPCTL_FASTFORWARDING = 14,
  IPCTL_KEEPFAITH = 15,
  IPCTL_GIF_TTL = 16,
  IPCTL_MAXID = 17,
  _DSCP_DF = 0,
  _DSCP_CS0 = 0,
  _DSCP_CS1 = 8,
  _DSCP_CS2 = 16,
  _DSCP_CS3 = 24,
  _DSCP_CS4 = 32,
  _DSCP_CS5 = 40,
  _DSCP_CS6 = 48,
  _DSCP_CS7 = 56,
  _DSCP_EF = 46,
  _DSCP_VA = 44,
  _DSCP_AF11 = 10,
  _DSCP_AF12 = 12,
  _DSCP_AF13 = 14,
  _DSCP_AF21 = 18,
  _DSCP_AF22 = 20,
  _DSCP_AF23 = 22,
  _DSCP_AF31 = 26,
  _DSCP_AF32 = 28,
  _DSCP_AF33 = 30,
  _DSCP_AF41 = 34,
  _DSCP_AF42 = 36,
  _DSCP_AF43 = 38,
  _DSCP_52 = 52,
  _MAX_DSCP = 63,
  IPV6_OPTIONS = 1,
  IPV6_RECVOPTS = 5,
  IPV6_RECVRETOPTS = 6,
  IPV6_RECVDSTADDR = 7,
  IPV6_RETOPTS = 8,
  IPV6_SOCKOPT_RESERVED1 = 3,
  IPV6_UNICAST_HOPS = 4,
  IPV6_MULTICAST_IF = 9,
  IPV6_MULTICAST_HOPS = 10,
  IPV6_MULTICAST_LOOP = 11,
  IPV6_JOIN_GROUP = 12,
  IPV6_LEAVE_GROUP = 13,
  IPV6_PORTRANGE = 14,
  ICMP6_FILTER = 18,
  IPV6_2292PKTINFO = 19,
  IPV6_2292HOPLIMIT = 20,
  IPV6_2292NEXTHOP = 21,
  IPV6_2292HOPOPTS = 22,
  IPV6_2292DSTOPTS = 23,
  IPV6_2292RTHDR = 24,
  IPV6_2292PKTOPTIONS = 25,
  IPV6_CHECKSUM = 26,
  IPV6_V6ONLY = 27,
  IPV6_IPSEC_POLICY = 28,
  IPV6_FAITH = 29,
  IPV6_FW_ADD = 30,
  IPV6_FW_DEL = 31,
  IPV6_FW_FLUSH = 32,
  IPV6_FW_ZERO = 33,
  IPV6_FW_GET = 34,
  IPV6_RECVTCLASS = 35,
  IPV6_TCLASS = 36,
  IPV6_RTHDRDSTOPTS = 57,
  IPV6_RECVPKTINFO = 61,
  IPV6_RECVHOPLIMIT = 37,
  IPV6_RECVRTHDR = 38,
  IPV6_RECVHOPOPTS = 39,
  IPV6_RECVDSTOPTS = 40,
  IPV6_RECVRTHDRDSTOPTS = 41,
  IPV6_USE_MIN_MTU = 42,
  IPV6_RECVPATHMTU = 43,
  IPV6_PATHMTU = 44,
  IPV6_REACHCONF = 45,
  IPV6_3542PKTINFO = 46,
  IPV6_3542HOPLIMIT = 47,
  IPV6_3542NEXTHOP = 48,
  IPV6_3542HOPOPTS = 49,
  IPV6_3542DSTOPTS = 50,
  IPV6_3542RTHDR = 51,
  IPV6_AUTOFLOWLABEL = 59,
  IPV6_DONTFRAG = 62,
  IPV6_PREFER_TEMPADDR = 63,
  IPV6_MSFILTER = 74,
  IPV6_BOUND_IF = 125,
  IPV6_NO_IFT_CELLULAR = 6969,
  IPV6_OUT_IF = 9696,
  IPV6_RTHDR_LOOSE = 0,
  IPV6_RTHDR_STRICT = 1,
  IPV6_RTHDR_TYPE_0_SOCKET = 0,
  IPV6_DEFAULT_MULTICAST_HOPS = 1,
  IPV6_DEFAULT_MULTICAST_LOOP = 1,
  IPV6_MIN_MEMBERSHIPS = 31,
  IPV6_MAX_MEMBERSHIPS = 4095,
  IPV6_MAX_GROUP_SRC_FILTER = 512,
  IPV6_MAX_SOCK_SRC_FILTER = 128,
  IPV6_PORTRANGE_DEFAULT = 0,
  IPV6_PORTRANGE_HIGH = 1,
  IPV6_PORTRANGE_LOW = 2,
  IPV6CTL_FORWARDING = 1,
  IPV6CTL_SENDREDIRECTS = 2,
  IPV6CTL_DEFHLIM = 3,
  IPV6CTL_DEFMTU = 4,
  IPV6CTL_FORWSRCRT = 5,
  IPV6CTL_STATS = 6,
  IPV6CTL_MRTSTATS = 7,
  IPV6CTL_MRTPROTO = 8,
  IPV6CTL_MAXFRAGPACKETS = 9,
  IPV6CTL_SOURCECHECK = 10,
  IPV6CTL_SOURCECHECK_LOGINT = 11,
  IPV6CTL_ACCEPT_RTADV = 12,
  IPV6CTL_KEEPFAITH = 13,
  IPV6CTL_LOG_INTERVAL = 14,
  IPV6CTL_HDRNESTLIMIT = 15,
  IPV6CTL_DAD_COUNT = 16,
  IPV6CTL_AUTO_FLOWLABEL = 17,
  IPV6CTL_DEFMCASTHLIM = 18,
  IPV6CTL_GIF_HLIM = 19,
  IPV6CTL_KAME_VERSION = 20,
  IPV6CTL_USE_DEPRECATED = 21,
  IPV6CTL_RR_PRUNE = 22,
  IPV6CTL_MAPPED_ADDR = 23,
  IPV6CTL_V6ONLY = 24,
  IPV6CTL_RTEXPIRE = 25,
  IPV6CTL_RTMINEXPIRE = 26,
  IPV6CTL_RTMAXCACHE = 27,
  IPV6CTL_USETEMPADDR = 32,
  IPV6CTL_TEMPPLTIME = 33,
  IPV6CTL_TEMPVLTIME = 34,
  IPV6CTL_AUTO_LINKLOCAL = 35,
  IPV6CTL_RIP6STATS = 36,
  IPV6CTL_PREFER_TEMPADDR = 37,
  IPV6CTL_ADDRCTLPOLICY = 38,
  IPV6CTL_USE_DEFAULTZONE = 39,
  IPV6CTL_MAXFRAGS = 41,
  IPV6CTL_MCAST_PMTU = 44,
  IPV6CTL_NEIGHBORGCTHRESH = 46,
  IPV6CTL_MAXIFPREFIXES = 47,
  IPV6CTL_MAXIFDEFROUTERS = 48,
  IPV6CTL_MAXDYNROUTES = 49,
  ICMPV6CTL_ND6_ONLINKNSRFC4861 = 50,
  IPV6CTL_MAXID = 51
};
bool SocketOptName_IsValid(int value);
constexpr SocketOptName SocketOptName_MIN = SO_TC_UNSPEC;
constexpr SocketOptName SocketOptName_MAX = SO_TIMESTAMP_CONTINUOUS;
constexpr int SocketOptName_ARRAYSIZE = SocketOptName_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SocketOptName_descriptor();
template<typename T>
inline const std::string& SocketOptName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SocketOptName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SocketOptName_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SocketOptName_descriptor(), enum_t_value);
}
inline bool SocketOptName_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketOptName* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SocketOptName>(
    SocketOptName_descriptor(), name, value);
}
enum FileDescriptor : int {
  FD_0 = 0,
  FD_1 = 1,
  FD_2 = 2,
  FD_3 = 3,
  FD_4 = 4,
  FD_5 = 5,
  FD_6 = 6,
  FD_7 = 7,
  FD_8 = 8,
  FD_9 = 9
};
bool FileDescriptor_IsValid(int value);
constexpr FileDescriptor FileDescriptor_MIN = FD_0;
constexpr FileDescriptor FileDescriptor_MAX = FD_9;
constexpr int FileDescriptor_ARRAYSIZE = FileDescriptor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileDescriptor_descriptor();
template<typename T>
inline const std::string& FileDescriptor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileDescriptor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileDescriptor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileDescriptor_descriptor(), enum_t_value);
}
inline bool FileDescriptor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileDescriptor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileDescriptor>(
    FileDescriptor_descriptor(), name, value);
}
enum Domain : int {
  AF_UNSPEC = 0,
  AF_UNIX = 1,
  AF_INET = 2,
  AF_IMPLINK = 3,
  AF_PUP = 4,
  AF_CHAOS = 5,
  AF_NS = 6,
  AF_ISO = 7,
  AF_ECMA = 8,
  AF_DATAKIT = 9,
  AF_CCITT = 10,
  AF_SNA = 11,
  AF_DECnet = 12,
  AF_DLI = 13,
  AF_LAT = 14,
  AF_HYLINK = 15,
  AF_APPLETALK = 16,
  AF_ROUTE = 17,
  AF_LINK = 18,
  pseudo_AF_XTP = 19,
  AF_COIP = 20,
  AF_CNT = 21,
  pseudo_AF_RTIP = 22,
  AF_IPX = 23,
  AF_SIP = 24,
  pseudo_AF_PIP = 25,
  AF_NDRV = 27,
  AF_ISDN = 28,
  pseudo_AF_KEY = 29,
  AF_INET6 = 30,
  AF_NATM = 31,
  AF_SYSTEM = 32,
  AF_NETBIOS = 33,
  AF_PPP = 34,
  pseudo_AF_HDRCMPLT = 35,
  AF_RESERVED_36 = 36,
  AF_IEEE80211 = 37,
  AF_UTUN = 38,
  AF_MULTIPATH = 39,
  AF_MAX = 40
};
bool Domain_IsValid(int value);
constexpr Domain Domain_MIN = AF_UNSPEC;
constexpr Domain Domain_MAX = AF_MAX;
constexpr int Domain_ARRAYSIZE = Domain_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Domain_descriptor();
template<typename T>
inline const std::string& Domain_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Domain>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Domain_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Domain_descriptor(), enum_t_value);
}
inline bool Domain_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Domain* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Domain>(
    Domain_descriptor(), name, value);
}
enum SoType : int {
  SOCK_STREAM = 1,
  SOCK_DGRAM = 2,
  SOCK_RAW = 3,
  SOCK_RDM = 4,
  SOCK_SEQPACKET = 5
};
bool SoType_IsValid(int value);
constexpr SoType SoType_MIN = SOCK_STREAM;
constexpr SoType SoType_MAX = SOCK_SEQPACKET;
constexpr int SoType_ARRAYSIZE = SoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoType_descriptor();
template<typename T>
inline const std::string& SoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SoType_descriptor(), enum_t_value);
}
inline bool SoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SoType>(
    SoType_descriptor(), name, value);
}
enum Protocol : int {
  IPPROTO_IP = 0,
  IPPROTO_ICMP = 1,
  IPPROTO_IGMP = 2,
  IPPROTO_GGP = 3,
  IPPROTO_IPV4 = 4,
  IPPROTO_TCP = 6,
  IPPROTO_ST = 7,
  IPPROTO_EGP = 8,
  IPPROTO_PIGP = 9,
  IPPROTO_RCCMON = 10,
  IPPROTO_NVPII = 11,
  IPPROTO_PUP = 12,
  IPPROTO_ARGUS = 13,
  IPPROTO_EMCON = 14,
  IPPROTO_XNET = 15,
  IPPROTO_CHAOS = 16,
  IPPROTO_UDP = 17,
  IPPROTO_MUX = 18,
  IPPROTO_MEAS = 19,
  IPPROTO_HMP = 20,
  IPPROTO_PRM = 21,
  IPPROTO_IDP = 22,
  IPPROTO_TRUNK1 = 23,
  IPPROTO_TRUNK2 = 24,
  IPPROTO_LEAF1 = 25,
  IPPROTO_LEAF2 = 26,
  IPPROTO_RDP = 27,
  IPPROTO_IRTP = 28,
  IPPROTO_TP = 29,
  IPPROTO_BLT = 30,
  IPPROTO_NSP = 31,
  IPPROTO_INP = 32,
  IPPROTO_SEP = 33,
  IPPROTO_3PC = 34,
  IPPROTO_IDPR = 35,
  IPPROTO_XTP = 36,
  IPPROTO_DDP = 37,
  IPPROTO_CMTP = 38,
  IPPROTO_TPXX = 39,
  IPPROTO_IL = 40,
  IPPROTO_IPV6 = 41,
  IPPROTO_SDRP = 42,
  IPPROTO_ROUTIN = 43,
  IPPROTO_FRAGMEN = 44,
  IPPROTO_IDRP = 45,
  IPPROTO_RSVP = 46,
  IPPROTO_GRE = 47,
  IPPROTO_MHRP = 48,
  IPPROTO_BHA = 49,
  IPPROTO_ESP = 50,
  IPPROTO_AH = 51,
  IPPROTO_INLSP = 52,
  IPPROTO_SWIPE = 53,
  IPPROTO_NHRP = 54,
  IPPROTO_ICMPV6 = 58,
  IPPROTO_NONE = 59,
  IPPROTO_DSTOPTS = 60,
  IPPROTO_AHIP = 61,
  IPPROTO_CFTP = 62,
  IPPROTO_HELLO = 63,
  IPPROTO_SATEXPA = 64,
  IPPROTO_KRYPTOLA = 65,
  IPPROTO_RVD = 66,
  IPPROTO_IPPC = 67,
  IPPROTO_ADFS = 68,
  IPPROTO_SATMON = 69,
  IPPROTO_VISA = 70,
  IPPROTO_IPCV = 71,
  IPPROTO_CPNX = 72,
  IPPROTO_CPHB = 73,
  IPPROTO_WSN = 74,
  IPPROTO_PVP = 75,
  IPPROTO_BRSATMO = 76,
  IPPROTO_ND = 77,
  IPPROTO_WBMON = 78,
  IPPROTO_WBEXPAK = 79,
  IPPROTO_EON = 80,
  IPPROTO_VMTP = 81,
  IPPROTO_SVMTP = 82,
  IPPROTO_VINES = 83,
  IPPROTO_TTP = 84,
  IPPROTO_IGP = 85,
  IPPROTO_DGP = 86,
  IPPROTO_TCF = 87,
  IPPROTO_IGRP = 88,
  IPPROTO_OSPFIGP = 89,
  IPPROTO_SRPC = 90,
  IPPROTO_LARP = 91,
  IPPROTO_MTP = 92,
  IPPROTO_AX25 = 93,
  IPPROTO_IPEIP = 94,
  IPPROTO_MICP = 95,
  IPPROTO_SCCSP = 96,
  IPPROTO_ETHERIP = 97,
  IPPROTO_ENCAP = 98,
  IPPROTO_APES = 99,
  IPPROTO_GMTP = 100,
  IPPROTO_PIM = 103,
  IPPROTO_IPCOMP = 108,
  IPPROTO_PGM = 113,
  IPPROTO_SCTP = 132,
  IPPROTO_DIVERT = 254,
  IPPROTO_RAW = 255,
  IPPROTO_MAX = 256,
  IPPROTO_DONE = 257,
  SOL_SOCKET = 65535
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = IPPROTO_IP;
constexpr Protocol Protocol_MAX = SOL_SOCKET;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
// ===================================================================

class Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  virtual ~Session();
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 1,
    kDataProviderFieldNumber = 2,
  };
  // repeated .Command commands = 1;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::Command* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >*
      mutable_commands();
  private:
  const ::Command& _internal_commands(int index) const;
  ::Command* _internal_add_commands();
  public:
  const ::Command& commands(int index) const;
  ::Command* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >&
      commands() const;

  // required bytes data_provider = 2;
  bool has_data_provider() const;
  private:
  bool _internal_has_data_provider() const;
  public:
  void clear_data_provider();
  const std::string& data_provider() const;
  void set_data_provider(const std::string& value);
  void set_data_provider(std::string&& value);
  void set_data_provider(const char* value);
  void set_data_provider(const void* value, size_t size);
  std::string* mutable_data_provider();
  std::string* release_data_provider();
  void set_allocated_data_provider(std::string* data_provider);
  private:
  const std::string& _internal_data_provider() const;
  void _internal_set_data_provider(const std::string& value);
  std::string* _internal_mutable_data_provider();
  public:

  // @@protoc_insertion_point(class_scope:Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command > commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_provider_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Connect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Connect) */ {
 public:
  inline Connect() : Connect(nullptr) {}
  virtual ~Connect();
  explicit constexpr Connect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connect(const Connect& from);
  Connect(Connect&& from) noexcept
    : Connect() {
    *this = ::std::move(from);
  }

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connect& operator=(Connect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connect* internal_default_instance() {
    return reinterpret_cast<const Connect*>(
               &_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Connect& a, Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(Connect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connect* New() const final {
    return CreateMaybeMessage<Connect>(nullptr);
  }

  Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Connect";
  }
  protected:
  explicit Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSockaddrFieldNumber = 1,
    kFdFieldNumber = 2,
  };
  // required .SockAddr sockaddr = 1;
  bool has_sockaddr() const;
  private:
  bool _internal_has_sockaddr() const;
  public:
  void clear_sockaddr();
  const ::SockAddr& sockaddr() const;
  ::SockAddr* release_sockaddr();
  ::SockAddr* mutable_sockaddr();
  void set_allocated_sockaddr(::SockAddr* sockaddr);
  private:
  const ::SockAddr& _internal_sockaddr() const;
  ::SockAddr* _internal_mutable_sockaddr();
  public:
  void unsafe_arena_set_allocated_sockaddr(
      ::SockAddr* sockaddr);
  ::SockAddr* unsafe_arena_release_sockaddr();

  // required .FileDescriptor fd = 2;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:Connect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* sockaddr_;
  int fd_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class ConnectX PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectX) */ {
 public:
  inline ConnectX() : ConnectX(nullptr) {}
  virtual ~ConnectX();
  explicit constexpr ConnectX(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectX(const ConnectX& from);
  ConnectX(ConnectX&& from) noexcept
    : ConnectX() {
    *this = ::std::move(from);
  }

  inline ConnectX& operator=(const ConnectX& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectX& operator=(ConnectX&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectX& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectX* internal_default_instance() {
    return reinterpret_cast<const ConnectX*>(
               &_ConnectX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectX& a, ConnectX& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectX* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectX* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectX* New() const final {
    return CreateMaybeMessage<ConnectX>(nullptr);
  }

  ConnectX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectX& from);
  void MergeFrom(const ConnectX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectX";
  }
  protected:
  explicit ConnectX(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 4,
    kEndpointsFieldNumber = 2,
    kSocketFieldNumber = 1,
    kAssocidFieldNumber = 3,
  };
  // repeated .ConnectXFlag flags = 4;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  private:
  ::ConnectXFlag _internal_flags(int index) const;
  void _internal_add_flags(::ConnectXFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_flags();
  public:
  ::ConnectXFlag flags(int index) const;
  void set_flags(int index, ::ConnectXFlag value);
  void add_flags(::ConnectXFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_flags();

  // required .Endpoints endpoints = 2;
  bool has_endpoints() const;
  private:
  bool _internal_has_endpoints() const;
  public:
  void clear_endpoints();
  const ::Endpoints& endpoints() const;
  ::Endpoints* release_endpoints();
  ::Endpoints* mutable_endpoints();
  void set_allocated_endpoints(::Endpoints* endpoints);
  private:
  const ::Endpoints& _internal_endpoints() const;
  ::Endpoints* _internal_mutable_endpoints();
  public:
  void unsafe_arena_set_allocated_endpoints(
      ::Endpoints* endpoints);
  ::Endpoints* unsafe_arena_release_endpoints();

  // required .FileDescriptor socket = 1;
  bool has_socket() const;
  private:
  bool _internal_has_socket() const;
  public:
  void clear_socket();
  ::FileDescriptor socket() const;
  void set_socket(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_socket() const;
  void _internal_set_socket(::FileDescriptor value);
  public:

  // required .SaeAssocID associd = 3;
  bool has_associd() const;
  private:
  bool _internal_has_associd() const;
  public:
  void clear_associd();
  ::SaeAssocID associd() const;
  void set_associd(::SaeAssocID value);
  private:
  ::SaeAssocID _internal_associd() const;
  void _internal_set_associd(::SaeAssocID value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectX)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> flags_;
  ::Endpoints* endpoints_;
  int socket_;
  int associd_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class DisconnectX PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DisconnectX) */ {
 public:
  inline DisconnectX() : DisconnectX(nullptr) {}
  virtual ~DisconnectX();
  explicit constexpr DisconnectX(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectX(const DisconnectX& from);
  DisconnectX(DisconnectX&& from) noexcept
    : DisconnectX() {
    *this = ::std::move(from);
  }

  inline DisconnectX& operator=(const DisconnectX& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectX& operator=(DisconnectX&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectX& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectX* internal_default_instance() {
    return reinterpret_cast<const DisconnectX*>(
               &_DisconnectX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DisconnectX& a, DisconnectX& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectX* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectX* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectX* New() const final {
    return CreateMaybeMessage<DisconnectX>(nullptr);
  }

  DisconnectX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectX& from);
  void MergeFrom(const DisconnectX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DisconnectX";
  }
  protected:
  explicit DisconnectX(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssocidFieldNumber = 1,
    kCidFieldNumber = 2,
    kFdFieldNumber = 3,
  };
  // required .SaeAssocID associd = 1;
  bool has_associd() const;
  private:
  bool _internal_has_associd() const;
  public:
  void clear_associd();
  ::SaeAssocID associd() const;
  void set_associd(::SaeAssocID value);
  private:
  ::SaeAssocID _internal_associd() const;
  void _internal_set_associd(::SaeAssocID value);
  public:

  // required int32 cid = 2;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  ::PROTOBUF_NAMESPACE_ID::int32 cid() const;
  void set_cid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cid() const;
  void _internal_set_cid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .FileDescriptor fd = 3;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:DisconnectX)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int associd_;
  ::PROTOBUF_NAMESPACE_ID::int32 cid_;
  int fd_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class IOV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IOV) */ {
 public:
  inline IOV() : IOV(nullptr) {}
  virtual ~IOV();
  explicit constexpr IOV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IOV(const IOV& from);
  IOV(IOV&& from) noexcept
    : IOV() {
    *this = ::std::move(from);
  }

  inline IOV& operator=(const IOV& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOV& operator=(IOV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOV& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOV* internal_default_instance() {
    return reinterpret_cast<const IOV*>(
               &_IOV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IOV& a, IOV& b) {
    a.Swap(&b);
  }
  inline void Swap(IOV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOV* New() const final {
    return CreateMaybeMessage<IOV>(nullptr);
  }

  IOV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOV& from);
  void MergeFrom(const IOV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IOV";
  }
  protected:
  explicit IOV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIovDataFieldNumber = 1,
  };
  // required bytes iov_data = 1;
  bool has_iov_data() const;
  private:
  bool _internal_has_iov_data() const;
  public:
  void clear_iov_data();
  const std::string& iov_data() const;
  void set_iov_data(const std::string& value);
  void set_iov_data(std::string&& value);
  void set_iov_data(const char* value);
  void set_iov_data(const void* value, size_t size);
  std::string* mutable_iov_data();
  std::string* release_iov_data();
  void set_allocated_iov_data(std::string* iov_data);
  private:
  const std::string& _internal_iov_data() const;
  void _internal_set_iov_data(const std::string& value);
  std::string* _internal_mutable_iov_data();
  public:

  // @@protoc_insertion_point(class_scope:IOV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iov_data_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Endpoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Endpoints) */ {
 public:
  inline Endpoints() : Endpoints(nullptr) {}
  virtual ~Endpoints();
  explicit constexpr Endpoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Endpoints(const Endpoints& from);
  Endpoints(Endpoints&& from) noexcept
    : Endpoints() {
    *this = ::std::move(from);
  }

  inline Endpoints& operator=(const Endpoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endpoints& operator=(Endpoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Endpoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const Endpoints* internal_default_instance() {
    return reinterpret_cast<const Endpoints*>(
               &_Endpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Endpoints& a, Endpoints& b) {
    a.Swap(&b);
  }
  inline void Swap(Endpoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Endpoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Endpoints* New() const final {
    return CreateMaybeMessage<Endpoints>(nullptr);
  }

  Endpoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Endpoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Endpoints& from);
  void MergeFrom(const Endpoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Endpoints";
  }
  protected:
  explicit Endpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaeSrcaddrFieldNumber = 2,
    kSaeDstaddrFieldNumber = 3,
    kSaeSrcifFieldNumber = 1,
  };
  // optional .SockAddr sae_srcaddr = 2;
  bool has_sae_srcaddr() const;
  private:
  bool _internal_has_sae_srcaddr() const;
  public:
  void clear_sae_srcaddr();
  const ::SockAddr& sae_srcaddr() const;
  ::SockAddr* release_sae_srcaddr();
  ::SockAddr* mutable_sae_srcaddr();
  void set_allocated_sae_srcaddr(::SockAddr* sae_srcaddr);
  private:
  const ::SockAddr& _internal_sae_srcaddr() const;
  ::SockAddr* _internal_mutable_sae_srcaddr();
  public:
  void unsafe_arena_set_allocated_sae_srcaddr(
      ::SockAddr* sae_srcaddr);
  ::SockAddr* unsafe_arena_release_sae_srcaddr();

  // required .SockAddr sae_dstaddr = 3;
  bool has_sae_dstaddr() const;
  private:
  bool _internal_has_sae_dstaddr() const;
  public:
  void clear_sae_dstaddr();
  const ::SockAddr& sae_dstaddr() const;
  ::SockAddr* release_sae_dstaddr();
  ::SockAddr* mutable_sae_dstaddr();
  void set_allocated_sae_dstaddr(::SockAddr* sae_dstaddr);
  private:
  const ::SockAddr& _internal_sae_dstaddr() const;
  ::SockAddr* _internal_mutable_sae_dstaddr();
  public:
  void unsafe_arena_set_allocated_sae_dstaddr(
      ::SockAddr* sae_dstaddr);
  ::SockAddr* unsafe_arena_release_sae_dstaddr();

  // required .IfIdx sae_srcif = 1;
  bool has_sae_srcif() const;
  private:
  bool _internal_has_sae_srcif() const;
  public:
  void clear_sae_srcif();
  ::IfIdx sae_srcif() const;
  void set_sae_srcif(::IfIdx value);
  private:
  ::IfIdx _internal_sae_srcif() const;
  void _internal_set_sae_srcif(::IfIdx value);
  public:

  // @@protoc_insertion_point(class_scope:Endpoints)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* sae_srcaddr_;
  ::SockAddr* sae_dstaddr_;
  int sae_srcif_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class SockAddr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SockAddr) */ {
 public:
  inline SockAddr() : SockAddr(nullptr) {}
  virtual ~SockAddr();
  explicit constexpr SockAddr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SockAddr(const SockAddr& from);
  SockAddr(SockAddr&& from) noexcept
    : SockAddr() {
    *this = ::std::move(from);
  }

  inline SockAddr& operator=(const SockAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SockAddr& operator=(SockAddr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SockAddr& default_instance() {
    return *internal_default_instance();
  }
  enum SockaddrCase {
    kSockaddrGeneric = 1,
    kSockaddr4 = 2,
    kSockaddr6 = 3,
    SOCKADDR_NOT_SET = 0,
  };

  static inline const SockAddr* internal_default_instance() {
    return reinterpret_cast<const SockAddr*>(
               &_SockAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SockAddr& a, SockAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(SockAddr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SockAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SockAddr* New() const final {
    return CreateMaybeMessage<SockAddr>(nullptr);
  }

  SockAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SockAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SockAddr& from);
  void MergeFrom(const SockAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SockAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SockAddr";
  }
  protected:
  explicit SockAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSockaddrGenericFieldNumber = 1,
    kSockaddr4FieldNumber = 2,
    kSockaddr6FieldNumber = 3,
  };
  // .SockAddrGeneric sockaddr_generic = 1;
  bool has_sockaddr_generic() const;
  private:
  bool _internal_has_sockaddr_generic() const;
  public:
  void clear_sockaddr_generic();
  const ::SockAddrGeneric& sockaddr_generic() const;
  ::SockAddrGeneric* release_sockaddr_generic();
  ::SockAddrGeneric* mutable_sockaddr_generic();
  void set_allocated_sockaddr_generic(::SockAddrGeneric* sockaddr_generic);
  private:
  const ::SockAddrGeneric& _internal_sockaddr_generic() const;
  ::SockAddrGeneric* _internal_mutable_sockaddr_generic();
  public:
  void unsafe_arena_set_allocated_sockaddr_generic(
      ::SockAddrGeneric* sockaddr_generic);
  ::SockAddrGeneric* unsafe_arena_release_sockaddr_generic();

  // .SockAddr4 sockaddr4 = 2;
  bool has_sockaddr4() const;
  private:
  bool _internal_has_sockaddr4() const;
  public:
  void clear_sockaddr4();
  const ::SockAddr4& sockaddr4() const;
  ::SockAddr4* release_sockaddr4();
  ::SockAddr4* mutable_sockaddr4();
  void set_allocated_sockaddr4(::SockAddr4* sockaddr4);
  private:
  const ::SockAddr4& _internal_sockaddr4() const;
  ::SockAddr4* _internal_mutable_sockaddr4();
  public:
  void unsafe_arena_set_allocated_sockaddr4(
      ::SockAddr4* sockaddr4);
  ::SockAddr4* unsafe_arena_release_sockaddr4();

  // .SockAddr6 sockaddr6 = 3;
  bool has_sockaddr6() const;
  private:
  bool _internal_has_sockaddr6() const;
  public:
  void clear_sockaddr6();
  const ::SockAddr6& sockaddr6() const;
  ::SockAddr6* release_sockaddr6();
  ::SockAddr6* mutable_sockaddr6();
  void set_allocated_sockaddr6(::SockAddr6* sockaddr6);
  private:
  const ::SockAddr6& _internal_sockaddr6() const;
  ::SockAddr6* _internal_mutable_sockaddr6();
  public:
  void unsafe_arena_set_allocated_sockaddr6(
      ::SockAddr6* sockaddr6);
  ::SockAddr6* unsafe_arena_release_sockaddr6();

  void clear_sockaddr();
  SockaddrCase sockaddr_case() const;
  // @@protoc_insertion_point(class_scope:SockAddr)
 private:
  class _Internal;
  void set_has_sockaddr_generic();
  void set_has_sockaddr4();
  void set_has_sockaddr6();

  inline bool has_sockaddr() const;
  inline void clear_has_sockaddr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SockaddrUnion {
    constexpr SockaddrUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SockAddrGeneric* sockaddr_generic_;
    ::SockAddr4* sockaddr4_;
    ::SockAddr6* sockaddr6_;
  } sockaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class SockAddrGeneric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SockAddrGeneric) */ {
 public:
  inline SockAddrGeneric() : SockAddrGeneric(nullptr) {}
  virtual ~SockAddrGeneric();
  explicit constexpr SockAddrGeneric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SockAddrGeneric(const SockAddrGeneric& from);
  SockAddrGeneric(SockAddrGeneric&& from) noexcept
    : SockAddrGeneric() {
    *this = ::std::move(from);
  }

  inline SockAddrGeneric& operator=(const SockAddrGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline SockAddrGeneric& operator=(SockAddrGeneric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SockAddrGeneric& default_instance() {
    return *internal_default_instance();
  }
  static inline const SockAddrGeneric* internal_default_instance() {
    return reinterpret_cast<const SockAddrGeneric*>(
               &_SockAddrGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SockAddrGeneric& a, SockAddrGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(SockAddrGeneric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SockAddrGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SockAddrGeneric* New() const final {
    return CreateMaybeMessage<SockAddrGeneric>(nullptr);
  }

  SockAddrGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SockAddrGeneric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SockAddrGeneric& from);
  void MergeFrom(const SockAddrGeneric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SockAddrGeneric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SockAddrGeneric";
  }
  protected:
  explicit SockAddrGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaDataFieldNumber = 2,
    kSaFamilyFieldNumber = 1,
  };
  // required bytes sa_data = 2;
  bool has_sa_data() const;
  private:
  bool _internal_has_sa_data() const;
  public:
  void clear_sa_data();
  const std::string& sa_data() const;
  void set_sa_data(const std::string& value);
  void set_sa_data(std::string&& value);
  void set_sa_data(const char* value);
  void set_sa_data(const void* value, size_t size);
  std::string* mutable_sa_data();
  std::string* release_sa_data();
  void set_allocated_sa_data(std::string* sa_data);
  private:
  const std::string& _internal_sa_data() const;
  void _internal_set_sa_data(const std::string& value);
  std::string* _internal_mutable_sa_data();
  public:

  // required .Domain sa_family = 1;
  bool has_sa_family() const;
  private:
  bool _internal_has_sa_family() const;
  public:
  void clear_sa_family();
  ::Domain sa_family() const;
  void set_sa_family(::Domain value);
  private:
  ::Domain _internal_sa_family() const;
  void _internal_set_sa_family(::Domain value);
  public:

  // @@protoc_insertion_point(class_scope:SockAddrGeneric)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sa_data_;
  int sa_family_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class SockAddr4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SockAddr4) */ {
 public:
  inline SockAddr4() : SockAddr4(nullptr) {}
  virtual ~SockAddr4();
  explicit constexpr SockAddr4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SockAddr4(const SockAddr4& from);
  SockAddr4(SockAddr4&& from) noexcept
    : SockAddr4() {
    *this = ::std::move(from);
  }

  inline SockAddr4& operator=(const SockAddr4& from) {
    CopyFrom(from);
    return *this;
  }
  inline SockAddr4& operator=(SockAddr4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SockAddr4& default_instance() {
    return *internal_default_instance();
  }
  static inline const SockAddr4* internal_default_instance() {
    return reinterpret_cast<const SockAddr4*>(
               &_SockAddr4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SockAddr4& a, SockAddr4& b) {
    a.Swap(&b);
  }
  inline void Swap(SockAddr4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SockAddr4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SockAddr4* New() const final {
    return CreateMaybeMessage<SockAddr4>(nullptr);
  }

  SockAddr4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SockAddr4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SockAddr4& from);
  void MergeFrom(const SockAddr4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SockAddr4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SockAddr4";
  }
  protected:
  explicit SockAddr4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinFamilyFieldNumber = 1,
    kSinPortFieldNumber = 2,
    kSinAddrFieldNumber = 3,
  };
  // required .Domain sin_family = 1;
  bool has_sin_family() const;
  private:
  bool _internal_has_sin_family() const;
  public:
  void clear_sin_family();
  ::Domain sin_family() const;
  void set_sin_family(::Domain value);
  private:
  ::Domain _internal_sin_family() const;
  void _internal_set_sin_family(::Domain value);
  public:

  // required .Port sin_port = 2;
  bool has_sin_port() const;
  private:
  bool _internal_has_sin_port() const;
  public:
  void clear_sin_port();
  ::Port sin_port() const;
  void set_sin_port(::Port value);
  private:
  ::Port _internal_sin_port() const;
  void _internal_set_sin_port(::Port value);
  public:

  // required .InAddr sin_addr = 3;
  bool has_sin_addr() const;
  private:
  bool _internal_has_sin_addr() const;
  public:
  void clear_sin_addr();
  ::InAddr sin_addr() const;
  void set_sin_addr(::InAddr value);
  private:
  ::InAddr _internal_sin_addr() const;
  void _internal_set_sin_addr(::InAddr value);
  public:

  // @@protoc_insertion_point(class_scope:SockAddr4)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int sin_family_;
  int sin_port_;
  int sin_addr_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class SockAddr6 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SockAddr6) */ {
 public:
  inline SockAddr6() : SockAddr6(nullptr) {}
  virtual ~SockAddr6();
  explicit constexpr SockAddr6(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SockAddr6(const SockAddr6& from);
  SockAddr6(SockAddr6&& from) noexcept
    : SockAddr6() {
    *this = ::std::move(from);
  }

  inline SockAddr6& operator=(const SockAddr6& from) {
    CopyFrom(from);
    return *this;
  }
  inline SockAddr6& operator=(SockAddr6&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SockAddr6& default_instance() {
    return *internal_default_instance();
  }
  static inline const SockAddr6* internal_default_instance() {
    return reinterpret_cast<const SockAddr6*>(
               &_SockAddr6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SockAddr6& a, SockAddr6& b) {
    a.Swap(&b);
  }
  inline void Swap(SockAddr6* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SockAddr6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SockAddr6* New() const final {
    return CreateMaybeMessage<SockAddr6>(nullptr);
  }

  SockAddr6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SockAddr6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SockAddr6& from);
  void MergeFrom(const SockAddr6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SockAddr6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SockAddr6";
  }
  protected:
  explicit SockAddr6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kPortFieldNumber = 2,
    kFlowInfoFieldNumber = 3,
    kSin6AddrFieldNumber = 4,
    kSin6ScopeIdFieldNumber = 5,
  };
  // required .Domain family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  ::Domain family() const;
  void set_family(::Domain value);
  private:
  ::Domain _internal_family() const;
  void _internal_set_family(::Domain value);
  public:

  // required .Port port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::Port port() const;
  void set_port(::Port value);
  private:
  ::Port _internal_port() const;
  void _internal_set_port(::Port value);
  public:

  // required .FlowInfo flow_info = 3;
  bool has_flow_info() const;
  private:
  bool _internal_has_flow_info() const;
  public:
  void clear_flow_info();
  ::FlowInfo flow_info() const;
  void set_flow_info(::FlowInfo value);
  private:
  ::FlowInfo _internal_flow_info() const;
  void _internal_set_flow_info(::FlowInfo value);
  public:

  // required .In6Addr sin6_addr = 4;
  bool has_sin6_addr() const;
  private:
  bool _internal_has_sin6_addr() const;
  public:
  void clear_sin6_addr();
  ::In6Addr sin6_addr() const;
  void set_sin6_addr(::In6Addr value);
  private:
  ::In6Addr _internal_sin6_addr() const;
  void _internal_set_sin6_addr(::In6Addr value);
  public:

  // required .ScopeId sin6_scope_id = 5;
  bool has_sin6_scope_id() const;
  private:
  bool _internal_has_sin6_scope_id() const;
  public:
  void clear_sin6_scope_id();
  ::ScopeId sin6_scope_id() const;
  void set_sin6_scope_id(::ScopeId value);
  private:
  ::ScopeId _internal_sin6_scope_id() const;
  void _internal_set_sin6_scope_id(::ScopeId value);
  public:

  // @@protoc_insertion_point(class_scope:SockAddr6)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int family_;
  int port_;
  int flow_info_;
  int sin6_addr_;
  int sin6_scope_id_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  virtual ~Command();
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kIpInput = 1,
    kIoctl = 3,
    kSetSockOpt = 4,
    kIoctlReal = 5,
    kConnectx = 6,
    kConnect = 7,
    kListen = 8,
    kDisconnectx = 9,
    kGetSockOpt = 10,
    kBind = 11,
    kAccept = 12,
    kSocket = 13,
    kClose = 14,
    kClearAll = 15,
    kNecpMatchPolicy = 16,
    kNecpOpen = 17,
    kNecpClientAction = 18,
    kNecpSessionOpen = 19,
    kNecpSessionAction = 20,
    kAcceptNocancel = 21,
    kConnectNocancel = 22,
    kGetpeername = 23,
    kGetsockname = 24,
    kPeeloff = 25,
    kRecvfrom = 26,
    kRecvfromNocancel = 27,
    kRecvmsg = 28,
    kSendto = 34,
    kSocketpair = 38,
    kPipe = 39,
    kShutdown = 40,
    COMMAND_NOT_SET = 0,
  };

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpInputFieldNumber = 1,
    kIoctlFieldNumber = 3,
    kSetSockOptFieldNumber = 4,
    kIoctlRealFieldNumber = 5,
    kConnectxFieldNumber = 6,
    kConnectFieldNumber = 7,
    kListenFieldNumber = 8,
    kDisconnectxFieldNumber = 9,
    kGetSockOptFieldNumber = 10,
    kBindFieldNumber = 11,
    kAcceptFieldNumber = 12,
    kSocketFieldNumber = 13,
    kCloseFieldNumber = 14,
    kClearAllFieldNumber = 15,
    kNecpMatchPolicyFieldNumber = 16,
    kNecpOpenFieldNumber = 17,
    kNecpClientActionFieldNumber = 18,
    kNecpSessionOpenFieldNumber = 19,
    kNecpSessionActionFieldNumber = 20,
    kAcceptNocancelFieldNumber = 21,
    kConnectNocancelFieldNumber = 22,
    kGetpeernameFieldNumber = 23,
    kGetsocknameFieldNumber = 24,
    kPeeloffFieldNumber = 25,
    kRecvfromFieldNumber = 26,
    kRecvfromNocancelFieldNumber = 27,
    kRecvmsgFieldNumber = 28,
    kSendtoFieldNumber = 34,
    kSocketpairFieldNumber = 38,
    kPipeFieldNumber = 39,
    kShutdownFieldNumber = 40,
  };
  // .Packet ip_input = 1;
  bool has_ip_input() const;
  private:
  bool _internal_has_ip_input() const;
  public:
  void clear_ip_input();
  const ::Packet& ip_input() const;
  ::Packet* release_ip_input();
  ::Packet* mutable_ip_input();
  void set_allocated_ip_input(::Packet* ip_input);
  private:
  const ::Packet& _internal_ip_input() const;
  ::Packet* _internal_mutable_ip_input();
  public:
  void unsafe_arena_set_allocated_ip_input(
      ::Packet* ip_input);
  ::Packet* unsafe_arena_release_ip_input();

  // .Ioctl ioctl = 3;
  bool has_ioctl() const;
  private:
  bool _internal_has_ioctl() const;
  public:
  void clear_ioctl();
  const ::Ioctl& ioctl() const;
  ::Ioctl* release_ioctl();
  ::Ioctl* mutable_ioctl();
  void set_allocated_ioctl(::Ioctl* ioctl);
  private:
  const ::Ioctl& _internal_ioctl() const;
  ::Ioctl* _internal_mutable_ioctl();
  public:
  void unsafe_arena_set_allocated_ioctl(
      ::Ioctl* ioctl);
  ::Ioctl* unsafe_arena_release_ioctl();

  // .SetSocketOpt set_sock_opt = 4;
  bool has_set_sock_opt() const;
  private:
  bool _internal_has_set_sock_opt() const;
  public:
  void clear_set_sock_opt();
  const ::SetSocketOpt& set_sock_opt() const;
  ::SetSocketOpt* release_set_sock_opt();
  ::SetSocketOpt* mutable_set_sock_opt();
  void set_allocated_set_sock_opt(::SetSocketOpt* set_sock_opt);
  private:
  const ::SetSocketOpt& _internal_set_sock_opt() const;
  ::SetSocketOpt* _internal_mutable_set_sock_opt();
  public:
  void unsafe_arena_set_allocated_set_sock_opt(
      ::SetSocketOpt* set_sock_opt);
  ::SetSocketOpt* unsafe_arena_release_set_sock_opt();

  // .IoctlReal ioctl_real = 5;
  bool has_ioctl_real() const;
  private:
  bool _internal_has_ioctl_real() const;
  public:
  void clear_ioctl_real();
  const ::IoctlReal& ioctl_real() const;
  ::IoctlReal* release_ioctl_real();
  ::IoctlReal* mutable_ioctl_real();
  void set_allocated_ioctl_real(::IoctlReal* ioctl_real);
  private:
  const ::IoctlReal& _internal_ioctl_real() const;
  ::IoctlReal* _internal_mutable_ioctl_real();
  public:
  void unsafe_arena_set_allocated_ioctl_real(
      ::IoctlReal* ioctl_real);
  ::IoctlReal* unsafe_arena_release_ioctl_real();

  // .ConnectX connectx = 6;
  bool has_connectx() const;
  private:
  bool _internal_has_connectx() const;
  public:
  void clear_connectx();
  const ::ConnectX& connectx() const;
  ::ConnectX* release_connectx();
  ::ConnectX* mutable_connectx();
  void set_allocated_connectx(::ConnectX* connectx);
  private:
  const ::ConnectX& _internal_connectx() const;
  ::ConnectX* _internal_mutable_connectx();
  public:
  void unsafe_arena_set_allocated_connectx(
      ::ConnectX* connectx);
  ::ConnectX* unsafe_arena_release_connectx();

  // .Connect connect = 7;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::Connect& connect() const;
  ::Connect* release_connect();
  ::Connect* mutable_connect();
  void set_allocated_connect(::Connect* connect);
  private:
  const ::Connect& _internal_connect() const;
  ::Connect* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::Connect* connect);
  ::Connect* unsafe_arena_release_connect();

  // .Listen listen = 8;
  bool has_listen() const;
  private:
  bool _internal_has_listen() const;
  public:
  void clear_listen();
  const ::Listen& listen() const;
  ::Listen* release_listen();
  ::Listen* mutable_listen();
  void set_allocated_listen(::Listen* listen);
  private:
  const ::Listen& _internal_listen() const;
  ::Listen* _internal_mutable_listen();
  public:
  void unsafe_arena_set_allocated_listen(
      ::Listen* listen);
  ::Listen* unsafe_arena_release_listen();

  // .DisconnectX disconnectx = 9;
  bool has_disconnectx() const;
  private:
  bool _internal_has_disconnectx() const;
  public:
  void clear_disconnectx();
  const ::DisconnectX& disconnectx() const;
  ::DisconnectX* release_disconnectx();
  ::DisconnectX* mutable_disconnectx();
  void set_allocated_disconnectx(::DisconnectX* disconnectx);
  private:
  const ::DisconnectX& _internal_disconnectx() const;
  ::DisconnectX* _internal_mutable_disconnectx();
  public:
  void unsafe_arena_set_allocated_disconnectx(
      ::DisconnectX* disconnectx);
  ::DisconnectX* unsafe_arena_release_disconnectx();

  // .GetSocketOpt get_sock_opt = 10;
  bool has_get_sock_opt() const;
  private:
  bool _internal_has_get_sock_opt() const;
  public:
  void clear_get_sock_opt();
  const ::GetSocketOpt& get_sock_opt() const;
  ::GetSocketOpt* release_get_sock_opt();
  ::GetSocketOpt* mutable_get_sock_opt();
  void set_allocated_get_sock_opt(::GetSocketOpt* get_sock_opt);
  private:
  const ::GetSocketOpt& _internal_get_sock_opt() const;
  ::GetSocketOpt* _internal_mutable_get_sock_opt();
  public:
  void unsafe_arena_set_allocated_get_sock_opt(
      ::GetSocketOpt* get_sock_opt);
  ::GetSocketOpt* unsafe_arena_release_get_sock_opt();

  // .Bind bind = 11;
  bool has_bind() const;
  private:
  bool _internal_has_bind() const;
  public:
  void clear_bind();
  const ::Bind& bind() const;
  ::Bind* release_bind();
  ::Bind* mutable_bind();
  void set_allocated_bind(::Bind* bind);
  private:
  const ::Bind& _internal_bind() const;
  ::Bind* _internal_mutable_bind();
  public:
  void unsafe_arena_set_allocated_bind(
      ::Bind* bind);
  ::Bind* unsafe_arena_release_bind();

  // .Accept accept = 12;
  bool has_accept() const;
  private:
  bool _internal_has_accept() const;
  public:
  void clear_accept();
  const ::Accept& accept() const;
  ::Accept* release_accept();
  ::Accept* mutable_accept();
  void set_allocated_accept(::Accept* accept);
  private:
  const ::Accept& _internal_accept() const;
  ::Accept* _internal_mutable_accept();
  public:
  void unsafe_arena_set_allocated_accept(
      ::Accept* accept);
  ::Accept* unsafe_arena_release_accept();

  // .Socket socket = 13;
  bool has_socket() const;
  private:
  bool _internal_has_socket() const;
  public:
  void clear_socket();
  const ::Socket& socket() const;
  ::Socket* release_socket();
  ::Socket* mutable_socket();
  void set_allocated_socket(::Socket* socket);
  private:
  const ::Socket& _internal_socket() const;
  ::Socket* _internal_mutable_socket();
  public:
  void unsafe_arena_set_allocated_socket(
      ::Socket* socket);
  ::Socket* unsafe_arena_release_socket();

  // .Close close = 14;
  bool has_close() const;
  private:
  bool _internal_has_close() const;
  public:
  void clear_close();
  const ::Close& close() const;
  ::Close* release_close();
  ::Close* mutable_close();
  void set_allocated_close(::Close* close);
  private:
  const ::Close& _internal_close() const;
  ::Close* _internal_mutable_close();
  public:
  void unsafe_arena_set_allocated_close(
      ::Close* close);
  ::Close* unsafe_arena_release_close();

  // .ClearAll clear_all = 15;
  bool has_clear_all() const;
  private:
  bool _internal_has_clear_all() const;
  public:
  void clear_clear_all();
  const ::ClearAll& clear_all() const;
  ::ClearAll* release_clear_all();
  ::ClearAll* mutable_clear_all();
  void set_allocated_clear_all(::ClearAll* clear_all);
  private:
  const ::ClearAll& _internal_clear_all() const;
  ::ClearAll* _internal_mutable_clear_all();
  public:
  void unsafe_arena_set_allocated_clear_all(
      ::ClearAll* clear_all);
  ::ClearAll* unsafe_arena_release_clear_all();

  // .NecpMatchPolicy necp_match_policy = 16;
  bool has_necp_match_policy() const;
  private:
  bool _internal_has_necp_match_policy() const;
  public:
  void clear_necp_match_policy();
  const ::NecpMatchPolicy& necp_match_policy() const;
  ::NecpMatchPolicy* release_necp_match_policy();
  ::NecpMatchPolicy* mutable_necp_match_policy();
  void set_allocated_necp_match_policy(::NecpMatchPolicy* necp_match_policy);
  private:
  const ::NecpMatchPolicy& _internal_necp_match_policy() const;
  ::NecpMatchPolicy* _internal_mutable_necp_match_policy();
  public:
  void unsafe_arena_set_allocated_necp_match_policy(
      ::NecpMatchPolicy* necp_match_policy);
  ::NecpMatchPolicy* unsafe_arena_release_necp_match_policy();

  // .NecpOpen necp_open = 17;
  bool has_necp_open() const;
  private:
  bool _internal_has_necp_open() const;
  public:
  void clear_necp_open();
  const ::NecpOpen& necp_open() const;
  ::NecpOpen* release_necp_open();
  ::NecpOpen* mutable_necp_open();
  void set_allocated_necp_open(::NecpOpen* necp_open);
  private:
  const ::NecpOpen& _internal_necp_open() const;
  ::NecpOpen* _internal_mutable_necp_open();
  public:
  void unsafe_arena_set_allocated_necp_open(
      ::NecpOpen* necp_open);
  ::NecpOpen* unsafe_arena_release_necp_open();

  // .NecpClientAction necp_client_action = 18;
  bool has_necp_client_action() const;
  private:
  bool _internal_has_necp_client_action() const;
  public:
  void clear_necp_client_action();
  const ::NecpClientAction& necp_client_action() const;
  ::NecpClientAction* release_necp_client_action();
  ::NecpClientAction* mutable_necp_client_action();
  void set_allocated_necp_client_action(::NecpClientAction* necp_client_action);
  private:
  const ::NecpClientAction& _internal_necp_client_action() const;
  ::NecpClientAction* _internal_mutable_necp_client_action();
  public:
  void unsafe_arena_set_allocated_necp_client_action(
      ::NecpClientAction* necp_client_action);
  ::NecpClientAction* unsafe_arena_release_necp_client_action();

  // .NecpSessionOpen necp_session_open = 19;
  bool has_necp_session_open() const;
  private:
  bool _internal_has_necp_session_open() const;
  public:
  void clear_necp_session_open();
  const ::NecpSessionOpen& necp_session_open() const;
  ::NecpSessionOpen* release_necp_session_open();
  ::NecpSessionOpen* mutable_necp_session_open();
  void set_allocated_necp_session_open(::NecpSessionOpen* necp_session_open);
  private:
  const ::NecpSessionOpen& _internal_necp_session_open() const;
  ::NecpSessionOpen* _internal_mutable_necp_session_open();
  public:
  void unsafe_arena_set_allocated_necp_session_open(
      ::NecpSessionOpen* necp_session_open);
  ::NecpSessionOpen* unsafe_arena_release_necp_session_open();

  // .NecpSessionAction necp_session_action = 20;
  bool has_necp_session_action() const;
  private:
  bool _internal_has_necp_session_action() const;
  public:
  void clear_necp_session_action();
  const ::NecpSessionAction& necp_session_action() const;
  ::NecpSessionAction* release_necp_session_action();
  ::NecpSessionAction* mutable_necp_session_action();
  void set_allocated_necp_session_action(::NecpSessionAction* necp_session_action);
  private:
  const ::NecpSessionAction& _internal_necp_session_action() const;
  ::NecpSessionAction* _internal_mutable_necp_session_action();
  public:
  void unsafe_arena_set_allocated_necp_session_action(
      ::NecpSessionAction* necp_session_action);
  ::NecpSessionAction* unsafe_arena_release_necp_session_action();

  // .AcceptNocancel accept_nocancel = 21;
  bool has_accept_nocancel() const;
  private:
  bool _internal_has_accept_nocancel() const;
  public:
  void clear_accept_nocancel();
  const ::AcceptNocancel& accept_nocancel() const;
  ::AcceptNocancel* release_accept_nocancel();
  ::AcceptNocancel* mutable_accept_nocancel();
  void set_allocated_accept_nocancel(::AcceptNocancel* accept_nocancel);
  private:
  const ::AcceptNocancel& _internal_accept_nocancel() const;
  ::AcceptNocancel* _internal_mutable_accept_nocancel();
  public:
  void unsafe_arena_set_allocated_accept_nocancel(
      ::AcceptNocancel* accept_nocancel);
  ::AcceptNocancel* unsafe_arena_release_accept_nocancel();

  // .ConnectNocancel connect_nocancel = 22;
  bool has_connect_nocancel() const;
  private:
  bool _internal_has_connect_nocancel() const;
  public:
  void clear_connect_nocancel();
  const ::ConnectNocancel& connect_nocancel() const;
  ::ConnectNocancel* release_connect_nocancel();
  ::ConnectNocancel* mutable_connect_nocancel();
  void set_allocated_connect_nocancel(::ConnectNocancel* connect_nocancel);
  private:
  const ::ConnectNocancel& _internal_connect_nocancel() const;
  ::ConnectNocancel* _internal_mutable_connect_nocancel();
  public:
  void unsafe_arena_set_allocated_connect_nocancel(
      ::ConnectNocancel* connect_nocancel);
  ::ConnectNocancel* unsafe_arena_release_connect_nocancel();

  // .Getpeername getpeername = 23;
  bool has_getpeername() const;
  private:
  bool _internal_has_getpeername() const;
  public:
  void clear_getpeername();
  const ::Getpeername& getpeername() const;
  ::Getpeername* release_getpeername();
  ::Getpeername* mutable_getpeername();
  void set_allocated_getpeername(::Getpeername* getpeername);
  private:
  const ::Getpeername& _internal_getpeername() const;
  ::Getpeername* _internal_mutable_getpeername();
  public:
  void unsafe_arena_set_allocated_getpeername(
      ::Getpeername* getpeername);
  ::Getpeername* unsafe_arena_release_getpeername();

  // .Getsockname getsockname = 24;
  bool has_getsockname() const;
  private:
  bool _internal_has_getsockname() const;
  public:
  void clear_getsockname();
  const ::Getsockname& getsockname() const;
  ::Getsockname* release_getsockname();
  ::Getsockname* mutable_getsockname();
  void set_allocated_getsockname(::Getsockname* getsockname);
  private:
  const ::Getsockname& _internal_getsockname() const;
  ::Getsockname* _internal_mutable_getsockname();
  public:
  void unsafe_arena_set_allocated_getsockname(
      ::Getsockname* getsockname);
  ::Getsockname* unsafe_arena_release_getsockname();

  // .Peeloff peeloff = 25;
  bool has_peeloff() const;
  private:
  bool _internal_has_peeloff() const;
  public:
  void clear_peeloff();
  const ::Peeloff& peeloff() const;
  ::Peeloff* release_peeloff();
  ::Peeloff* mutable_peeloff();
  void set_allocated_peeloff(::Peeloff* peeloff);
  private:
  const ::Peeloff& _internal_peeloff() const;
  ::Peeloff* _internal_mutable_peeloff();
  public:
  void unsafe_arena_set_allocated_peeloff(
      ::Peeloff* peeloff);
  ::Peeloff* unsafe_arena_release_peeloff();

  // .Recvfrom recvfrom = 26;
  bool has_recvfrom() const;
  private:
  bool _internal_has_recvfrom() const;
  public:
  void clear_recvfrom();
  const ::Recvfrom& recvfrom() const;
  ::Recvfrom* release_recvfrom();
  ::Recvfrom* mutable_recvfrom();
  void set_allocated_recvfrom(::Recvfrom* recvfrom);
  private:
  const ::Recvfrom& _internal_recvfrom() const;
  ::Recvfrom* _internal_mutable_recvfrom();
  public:
  void unsafe_arena_set_allocated_recvfrom(
      ::Recvfrom* recvfrom);
  ::Recvfrom* unsafe_arena_release_recvfrom();

  // .RecvfromNocancel recvfrom_nocancel = 27;
  bool has_recvfrom_nocancel() const;
  private:
  bool _internal_has_recvfrom_nocancel() const;
  public:
  void clear_recvfrom_nocancel();
  const ::RecvfromNocancel& recvfrom_nocancel() const;
  ::RecvfromNocancel* release_recvfrom_nocancel();
  ::RecvfromNocancel* mutable_recvfrom_nocancel();
  void set_allocated_recvfrom_nocancel(::RecvfromNocancel* recvfrom_nocancel);
  private:
  const ::RecvfromNocancel& _internal_recvfrom_nocancel() const;
  ::RecvfromNocancel* _internal_mutable_recvfrom_nocancel();
  public:
  void unsafe_arena_set_allocated_recvfrom_nocancel(
      ::RecvfromNocancel* recvfrom_nocancel);
  ::RecvfromNocancel* unsafe_arena_release_recvfrom_nocancel();

  // .Recvmsg recvmsg = 28;
  bool has_recvmsg() const;
  private:
  bool _internal_has_recvmsg() const;
  public:
  void clear_recvmsg();
  const ::Recvmsg& recvmsg() const;
  ::Recvmsg* release_recvmsg();
  ::Recvmsg* mutable_recvmsg();
  void set_allocated_recvmsg(::Recvmsg* recvmsg);
  private:
  const ::Recvmsg& _internal_recvmsg() const;
  ::Recvmsg* _internal_mutable_recvmsg();
  public:
  void unsafe_arena_set_allocated_recvmsg(
      ::Recvmsg* recvmsg);
  ::Recvmsg* unsafe_arena_release_recvmsg();

  // .Sendto sendto = 34;
  bool has_sendto() const;
  private:
  bool _internal_has_sendto() const;
  public:
  void clear_sendto();
  const ::Sendto& sendto() const;
  ::Sendto* release_sendto();
  ::Sendto* mutable_sendto();
  void set_allocated_sendto(::Sendto* sendto);
  private:
  const ::Sendto& _internal_sendto() const;
  ::Sendto* _internal_mutable_sendto();
  public:
  void unsafe_arena_set_allocated_sendto(
      ::Sendto* sendto);
  ::Sendto* unsafe_arena_release_sendto();

  // .Socketpair socketpair = 38;
  bool has_socketpair() const;
  private:
  bool _internal_has_socketpair() const;
  public:
  void clear_socketpair();
  const ::Socketpair& socketpair() const;
  ::Socketpair* release_socketpair();
  ::Socketpair* mutable_socketpair();
  void set_allocated_socketpair(::Socketpair* socketpair);
  private:
  const ::Socketpair& _internal_socketpair() const;
  ::Socketpair* _internal_mutable_socketpair();
  public:
  void unsafe_arena_set_allocated_socketpair(
      ::Socketpair* socketpair);
  ::Socketpair* unsafe_arena_release_socketpair();

  // .Pipe pipe = 39;
  bool has_pipe() const;
  private:
  bool _internal_has_pipe() const;
  public:
  void clear_pipe();
  const ::Pipe& pipe() const;
  ::Pipe* release_pipe();
  ::Pipe* mutable_pipe();
  void set_allocated_pipe(::Pipe* pipe);
  private:
  const ::Pipe& _internal_pipe() const;
  ::Pipe* _internal_mutable_pipe();
  public:
  void unsafe_arena_set_allocated_pipe(
      ::Pipe* pipe);
  ::Pipe* unsafe_arena_release_pipe();

  // .Shutdown shutdown = 40;
  bool has_shutdown() const;
  private:
  bool _internal_has_shutdown() const;
  public:
  void clear_shutdown();
  const ::Shutdown& shutdown() const;
  ::Shutdown* release_shutdown();
  ::Shutdown* mutable_shutdown();
  void set_allocated_shutdown(::Shutdown* shutdown);
  private:
  const ::Shutdown& _internal_shutdown() const;
  ::Shutdown* _internal_mutable_shutdown();
  public:
  void unsafe_arena_set_allocated_shutdown(
      ::Shutdown* shutdown);
  ::Shutdown* unsafe_arena_release_shutdown();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:Command)
 private:
  class _Internal;
  void set_has_ip_input();
  void set_has_ioctl();
  void set_has_set_sock_opt();
  void set_has_ioctl_real();
  void set_has_connectx();
  void set_has_connect();
  void set_has_listen();
  void set_has_disconnectx();
  void set_has_get_sock_opt();
  void set_has_bind();
  void set_has_accept();
  void set_has_socket();
  void set_has_close();
  void set_has_clear_all();
  void set_has_necp_match_policy();
  void set_has_necp_open();
  void set_has_necp_client_action();
  void set_has_necp_session_open();
  void set_has_necp_session_action();
  void set_has_accept_nocancel();
  void set_has_connect_nocancel();
  void set_has_getpeername();
  void set_has_getsockname();
  void set_has_peeloff();
  void set_has_recvfrom();
  void set_has_recvfrom_nocancel();
  void set_has_recvmsg();
  void set_has_sendto();
  void set_has_socketpair();
  void set_has_pipe();
  void set_has_shutdown();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandUnion {
    constexpr CommandUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Packet* ip_input_;
    ::Ioctl* ioctl_;
    ::SetSocketOpt* set_sock_opt_;
    ::IoctlReal* ioctl_real_;
    ::ConnectX* connectx_;
    ::Connect* connect_;
    ::Listen* listen_;
    ::DisconnectX* disconnectx_;
    ::GetSocketOpt* get_sock_opt_;
    ::Bind* bind_;
    ::Accept* accept_;
    ::Socket* socket_;
    ::Close* close_;
    ::ClearAll* clear_all_;
    ::NecpMatchPolicy* necp_match_policy_;
    ::NecpOpen* necp_open_;
    ::NecpClientAction* necp_client_action_;
    ::NecpSessionOpen* necp_session_open_;
    ::NecpSessionAction* necp_session_action_;
    ::AcceptNocancel* accept_nocancel_;
    ::ConnectNocancel* connect_nocancel_;
    ::Getpeername* getpeername_;
    ::Getsockname* getsockname_;
    ::Peeloff* peeloff_;
    ::Recvfrom* recvfrom_;
    ::RecvfromNocancel* recvfrom_nocancel_;
    ::Recvmsg* recvmsg_;
    ::Sendto* sendto_;
    ::Socketpair* socketpair_;
    ::Pipe* pipe_;
    ::Shutdown* shutdown_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class AcceptNocancel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcceptNocancel) */ {
 public:
  inline AcceptNocancel() : AcceptNocancel(nullptr) {}
  virtual ~AcceptNocancel();
  explicit constexpr AcceptNocancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcceptNocancel(const AcceptNocancel& from);
  AcceptNocancel(AcceptNocancel&& from) noexcept
    : AcceptNocancel() {
    *this = ::std::move(from);
  }

  inline AcceptNocancel& operator=(const AcceptNocancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptNocancel& operator=(AcceptNocancel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptNocancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptNocancel* internal_default_instance() {
    return reinterpret_cast<const AcceptNocancel*>(
               &_AcceptNocancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AcceptNocancel& a, AcceptNocancel& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptNocancel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptNocancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptNocancel* New() const final {
    return CreateMaybeMessage<AcceptNocancel>(nullptr);
  }

  AcceptNocancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptNocancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptNocancel& from);
  void MergeFrom(const AcceptNocancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptNocancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcceptNocancel";
  }
  protected:
  explicit AcceptNocancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSFieldNumber = 1,
  };
  // optional .SockAddr name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::SockAddr& name() const;
  ::SockAddr* release_name();
  ::SockAddr* mutable_name();
  void set_allocated_name(::SockAddr* name);
  private:
  const ::SockAddr& _internal_name() const;
  ::SockAddr* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::SockAddr* name);
  ::SockAddr* unsafe_arena_release_name();

  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:AcceptNocancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* name_;
  int s_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class ConnectNocancel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectNocancel) */ {
 public:
  inline ConnectNocancel() : ConnectNocancel(nullptr) {}
  virtual ~ConnectNocancel();
  explicit constexpr ConnectNocancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectNocancel(const ConnectNocancel& from);
  ConnectNocancel(ConnectNocancel&& from) noexcept
    : ConnectNocancel() {
    *this = ::std::move(from);
  }

  inline ConnectNocancel& operator=(const ConnectNocancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectNocancel& operator=(ConnectNocancel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectNocancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectNocancel* internal_default_instance() {
    return reinterpret_cast<const ConnectNocancel*>(
               &_ConnectNocancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ConnectNocancel& a, ConnectNocancel& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectNocancel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectNocancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectNocancel* New() const final {
    return CreateMaybeMessage<ConnectNocancel>(nullptr);
  }

  ConnectNocancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectNocancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectNocancel& from);
  void MergeFrom(const ConnectNocancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectNocancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectNocancel";
  }
  protected:
  explicit ConnectNocancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSFieldNumber = 1,
  };
  // optional .SockAddr name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::SockAddr& name() const;
  ::SockAddr* release_name();
  ::SockAddr* mutable_name();
  void set_allocated_name(::SockAddr* name);
  private:
  const ::SockAddr& _internal_name() const;
  ::SockAddr* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::SockAddr* name);
  ::SockAddr* unsafe_arena_release_name();

  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectNocancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* name_;
  int s_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Getpeername PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Getpeername) */ {
 public:
  inline Getpeername() : Getpeername(nullptr) {}
  virtual ~Getpeername();
  explicit constexpr Getpeername(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Getpeername(const Getpeername& from);
  Getpeername(Getpeername&& from) noexcept
    : Getpeername() {
    *this = ::std::move(from);
  }

  inline Getpeername& operator=(const Getpeername& from) {
    CopyFrom(from);
    return *this;
  }
  inline Getpeername& operator=(Getpeername&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Getpeername& default_instance() {
    return *internal_default_instance();
  }
  static inline const Getpeername* internal_default_instance() {
    return reinterpret_cast<const Getpeername*>(
               &_Getpeername_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Getpeername& a, Getpeername& b) {
    a.Swap(&b);
  }
  inline void Swap(Getpeername* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Getpeername* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Getpeername* New() const final {
    return CreateMaybeMessage<Getpeername>(nullptr);
  }

  Getpeername* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Getpeername>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Getpeername& from);
  void MergeFrom(const Getpeername& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Getpeername* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Getpeername";
  }
  protected:
  explicit Getpeername(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsaFieldNumber = 2,
    kFdesFieldNumber = 1,
  };
  // optional .SockAddr asa = 2;
  bool has_asa() const;
  private:
  bool _internal_has_asa() const;
  public:
  void clear_asa();
  const ::SockAddr& asa() const;
  ::SockAddr* release_asa();
  ::SockAddr* mutable_asa();
  void set_allocated_asa(::SockAddr* asa);
  private:
  const ::SockAddr& _internal_asa() const;
  ::SockAddr* _internal_mutable_asa();
  public:
  void unsafe_arena_set_allocated_asa(
      ::SockAddr* asa);
  ::SockAddr* unsafe_arena_release_asa();

  // optional .FileDescriptor fdes = 1;
  bool has_fdes() const;
  private:
  bool _internal_has_fdes() const;
  public:
  void clear_fdes();
  ::FileDescriptor fdes() const;
  void set_fdes(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fdes() const;
  void _internal_set_fdes(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:Getpeername)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* asa_;
  int fdes_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Getsockname PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Getsockname) */ {
 public:
  inline Getsockname() : Getsockname(nullptr) {}
  virtual ~Getsockname();
  explicit constexpr Getsockname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Getsockname(const Getsockname& from);
  Getsockname(Getsockname&& from) noexcept
    : Getsockname() {
    *this = ::std::move(from);
  }

  inline Getsockname& operator=(const Getsockname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Getsockname& operator=(Getsockname&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Getsockname& default_instance() {
    return *internal_default_instance();
  }
  static inline const Getsockname* internal_default_instance() {
    return reinterpret_cast<const Getsockname*>(
               &_Getsockname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Getsockname& a, Getsockname& b) {
    a.Swap(&b);
  }
  inline void Swap(Getsockname* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Getsockname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Getsockname* New() const final {
    return CreateMaybeMessage<Getsockname>(nullptr);
  }

  Getsockname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Getsockname>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Getsockname& from);
  void MergeFrom(const Getsockname& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Getsockname* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Getsockname";
  }
  protected:
  explicit Getsockname(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsaFieldNumber = 2,
    kFdesFieldNumber = 1,
  };
  // optional .SockAddr asa = 2;
  bool has_asa() const;
  private:
  bool _internal_has_asa() const;
  public:
  void clear_asa();
  const ::SockAddr& asa() const;
  ::SockAddr* release_asa();
  ::SockAddr* mutable_asa();
  void set_allocated_asa(::SockAddr* asa);
  private:
  const ::SockAddr& _internal_asa() const;
  ::SockAddr* _internal_mutable_asa();
  public:
  void unsafe_arena_set_allocated_asa(
      ::SockAddr* asa);
  ::SockAddr* unsafe_arena_release_asa();

  // optional .FileDescriptor fdes = 1;
  bool has_fdes() const;
  private:
  bool _internal_has_fdes() const;
  public:
  void clear_fdes();
  ::FileDescriptor fdes() const;
  void set_fdes(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fdes() const;
  void _internal_set_fdes(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:Getsockname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* asa_;
  int fdes_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Peeloff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Peeloff) */ {
 public:
  inline Peeloff() : Peeloff(nullptr) {}
  virtual ~Peeloff();
  explicit constexpr Peeloff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Peeloff(const Peeloff& from);
  Peeloff(Peeloff&& from) noexcept
    : Peeloff() {
    *this = ::std::move(from);
  }

  inline Peeloff& operator=(const Peeloff& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peeloff& operator=(Peeloff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Peeloff& default_instance() {
    return *internal_default_instance();
  }
  static inline const Peeloff* internal_default_instance() {
    return reinterpret_cast<const Peeloff*>(
               &_Peeloff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Peeloff& a, Peeloff& b) {
    a.Swap(&b);
  }
  inline void Swap(Peeloff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peeloff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peeloff* New() const final {
    return CreateMaybeMessage<Peeloff>(nullptr);
  }

  Peeloff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peeloff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Peeloff& from);
  void MergeFrom(const Peeloff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peeloff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Peeloff";
  }
  protected:
  explicit Peeloff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kAidFieldNumber = 2,
  };
  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional .SaeAssocID aid = 2;
  bool has_aid() const;
  private:
  bool _internal_has_aid() const;
  public:
  void clear_aid();
  ::SaeAssocID aid() const;
  void set_aid(::SaeAssocID value);
  private:
  ::SaeAssocID _internal_aid() const;
  void _internal_set_aid(::SaeAssocID value);
  public:

  // @@protoc_insertion_point(class_scope:Peeloff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int s_;
  int aid_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Pipe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pipe) */ {
 public:
  inline Pipe() : Pipe(nullptr) {}
  virtual ~Pipe();
  explicit constexpr Pipe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pipe(const Pipe& from);
  Pipe(Pipe&& from) noexcept
    : Pipe() {
    *this = ::std::move(from);
  }

  inline Pipe& operator=(const Pipe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pipe& operator=(Pipe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pipe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pipe* internal_default_instance() {
    return reinterpret_cast<const Pipe*>(
               &_Pipe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Pipe& a, Pipe& b) {
    a.Swap(&b);
  }
  inline void Swap(Pipe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pipe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pipe* New() const final {
    return CreateMaybeMessage<Pipe>(nullptr);
  }

  Pipe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pipe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pipe& from);
  void MergeFrom(const Pipe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pipe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pipe";
  }
  protected:
  explicit Pipe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pipe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Shutdown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shutdown) */ {
 public:
  inline Shutdown() : Shutdown(nullptr) {}
  virtual ~Shutdown();
  explicit constexpr Shutdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Shutdown(const Shutdown& from);
  Shutdown(Shutdown&& from) noexcept
    : Shutdown() {
    *this = ::std::move(from);
  }

  inline Shutdown& operator=(const Shutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shutdown& operator=(Shutdown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shutdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const Shutdown* internal_default_instance() {
    return reinterpret_cast<const Shutdown*>(
               &_Shutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Shutdown& a, Shutdown& b) {
    a.Swap(&b);
  }
  inline void Swap(Shutdown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shutdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shutdown* New() const final {
    return CreateMaybeMessage<Shutdown>(nullptr);
  }

  Shutdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shutdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shutdown& from);
  void MergeFrom(const Shutdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shutdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shutdown";
  }
  protected:
  explicit Shutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kHowFieldNumber = 2,
  };
  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional .ShutdownHow how = 2;
  bool has_how() const;
  private:
  bool _internal_has_how() const;
  public:
  void clear_how();
  ::ShutdownHow how() const;
  void set_how(::ShutdownHow value);
  private:
  ::ShutdownHow _internal_how() const;
  void _internal_set_how(::ShutdownHow value);
  public:

  // @@protoc_insertion_point(class_scope:Shutdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int s_;
  int how_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Recvfrom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Recvfrom) */ {
 public:
  inline Recvfrom() : Recvfrom(nullptr) {}
  virtual ~Recvfrom();
  explicit constexpr Recvfrom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recvfrom(const Recvfrom& from);
  Recvfrom(Recvfrom&& from) noexcept
    : Recvfrom() {
    *this = ::std::move(from);
  }

  inline Recvfrom& operator=(const Recvfrom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recvfrom& operator=(Recvfrom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Recvfrom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recvfrom* internal_default_instance() {
    return reinterpret_cast<const Recvfrom*>(
               &_Recvfrom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Recvfrom& a, Recvfrom& b) {
    a.Swap(&b);
  }
  inline void Swap(Recvfrom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recvfrom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Recvfrom* New() const final {
    return CreateMaybeMessage<Recvfrom>(nullptr);
  }

  Recvfrom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Recvfrom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Recvfrom& from);
  void MergeFrom(const Recvfrom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recvfrom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Recvfrom";
  }
  protected:
  explicit Recvfrom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kFromFieldNumber = 4,
    kSFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // optional bytes buf = 2;
  bool has_buf() const;
  private:
  bool _internal_has_buf() const;
  public:
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // optional .SockAddr from = 4;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::SockAddr& from() const;
  ::SockAddr* release_from();
  ::SockAddr* mutable_from();
  void set_allocated_from(::SockAddr* from);
  private:
  const ::SockAddr& _internal_from() const;
  ::SockAddr* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::SockAddr* from);
  ::SockAddr* unsafe_arena_release_from();

  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional int32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Recvfrom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::SockAddr* from_;
  int s_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class RecvfromNocancel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecvfromNocancel) */ {
 public:
  inline RecvfromNocancel() : RecvfromNocancel(nullptr) {}
  virtual ~RecvfromNocancel();
  explicit constexpr RecvfromNocancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecvfromNocancel(const RecvfromNocancel& from);
  RecvfromNocancel(RecvfromNocancel&& from) noexcept
    : RecvfromNocancel() {
    *this = ::std::move(from);
  }

  inline RecvfromNocancel& operator=(const RecvfromNocancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvfromNocancel& operator=(RecvfromNocancel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecvfromNocancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecvfromNocancel* internal_default_instance() {
    return reinterpret_cast<const RecvfromNocancel*>(
               &_RecvfromNocancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RecvfromNocancel& a, RecvfromNocancel& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvfromNocancel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvfromNocancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecvfromNocancel* New() const final {
    return CreateMaybeMessage<RecvfromNocancel>(nullptr);
  }

  RecvfromNocancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecvfromNocancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecvfromNocancel& from);
  void MergeFrom(const RecvfromNocancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvfromNocancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecvfromNocancel";
  }
  protected:
  explicit RecvfromNocancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kFromFieldNumber = 4,
    kSFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // optional bytes buf = 2;
  bool has_buf() const;
  private:
  bool _internal_has_buf() const;
  public:
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // optional .SockAddr from = 4;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::SockAddr& from() const;
  ::SockAddr* release_from();
  ::SockAddr* mutable_from();
  void set_allocated_from(::SockAddr* from);
  private:
  const ::SockAddr& _internal_from() const;
  ::SockAddr* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::SockAddr* from);
  ::SockAddr* unsafe_arena_release_from();

  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional int32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RecvfromNocancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::SockAddr* from_;
  int s_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Recvmsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Recvmsg) */ {
 public:
  inline Recvmsg() : Recvmsg(nullptr) {}
  virtual ~Recvmsg();
  explicit constexpr Recvmsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recvmsg(const Recvmsg& from);
  Recvmsg(Recvmsg&& from) noexcept
    : Recvmsg() {
    *this = ::std::move(from);
  }

  inline Recvmsg& operator=(const Recvmsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recvmsg& operator=(Recvmsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Recvmsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recvmsg* internal_default_instance() {
    return reinterpret_cast<const Recvmsg*>(
               &_Recvmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Recvmsg& a, Recvmsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Recvmsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recvmsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Recvmsg* New() const final {
    return CreateMaybeMessage<Recvmsg>(nullptr);
  }

  Recvmsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Recvmsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Recvmsg& from);
  void MergeFrom(const Recvmsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recvmsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Recvmsg";
  }
  protected:
  explicit Recvmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Recvmsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Sendmsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sendmsg) */ {
 public:
  inline Sendmsg() : Sendmsg(nullptr) {}
  virtual ~Sendmsg();
  explicit constexpr Sendmsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sendmsg(const Sendmsg& from);
  Sendmsg(Sendmsg&& from) noexcept
    : Sendmsg() {
    *this = ::std::move(from);
  }

  inline Sendmsg& operator=(const Sendmsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sendmsg& operator=(Sendmsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sendmsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sendmsg* internal_default_instance() {
    return reinterpret_cast<const Sendmsg*>(
               &_Sendmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Sendmsg& a, Sendmsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Sendmsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sendmsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sendmsg* New() const final {
    return CreateMaybeMessage<Sendmsg>(nullptr);
  }

  Sendmsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sendmsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sendmsg& from);
  void MergeFrom(const Sendmsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sendmsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sendmsg";
  }
  protected:
  explicit Sendmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // optional bytes msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional uint32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Sendmsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Sendto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sendto) */ {
 public:
  inline Sendto() : Sendto(nullptr) {}
  virtual ~Sendto();
  explicit constexpr Sendto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sendto(const Sendto& from);
  Sendto(Sendto&& from) noexcept
    : Sendto() {
    *this = ::std::move(from);
  }

  inline Sendto& operator=(const Sendto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sendto& operator=(Sendto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sendto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sendto* internal_default_instance() {
    return reinterpret_cast<const Sendto*>(
               &_Sendto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Sendto& a, Sendto& b) {
    a.Swap(&b);
  }
  inline void Swap(Sendto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sendto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sendto* New() const final {
    return CreateMaybeMessage<Sendto>(nullptr);
  }

  Sendto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sendto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sendto& from);
  void MergeFrom(const Sendto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sendto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sendto";
  }
  protected:
  explicit Sendto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kToFieldNumber = 4,
    kSFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // optional bytes buf = 2;
  bool has_buf() const;
  private:
  bool _internal_has_buf() const;
  public:
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // optional .SockAddr to = 4;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::SockAddr& to() const;
  ::SockAddr* release_to();
  ::SockAddr* mutable_to();
  void set_allocated_to(::SockAddr* to);
  private:
  const ::SockAddr& _internal_to() const;
  ::SockAddr* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::SockAddr* to);
  ::SockAddr* unsafe_arena_release_to();

  // optional .FileDescriptor s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  ::FileDescriptor s() const;
  void set_s(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_s() const;
  void _internal_set_s(::FileDescriptor value);
  public:

  // optional int32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Sendto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::SockAddr* to_;
  int s_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Socketpair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Socketpair) */ {
 public:
  inline Socketpair() : Socketpair(nullptr) {}
  virtual ~Socketpair();
  explicit constexpr Socketpair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Socketpair(const Socketpair& from);
  Socketpair(Socketpair&& from) noexcept
    : Socketpair() {
    *this = ::std::move(from);
  }

  inline Socketpair& operator=(const Socketpair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Socketpair& operator=(Socketpair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Socketpair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Socketpair* internal_default_instance() {
    return reinterpret_cast<const Socketpair*>(
               &_Socketpair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Socketpair& a, Socketpair& b) {
    a.Swap(&b);
  }
  inline void Swap(Socketpair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Socketpair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Socketpair* New() const final {
    return CreateMaybeMessage<Socketpair>(nullptr);
  }

  Socketpair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Socketpair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Socketpair& from);
  void MergeFrom(const Socketpair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Socketpair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Socketpair";
  }
  protected:
  explicit Socketpair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kProtocolFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional .Domain domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  ::Domain domain() const;
  void set_domain(::Domain value);
  private:
  ::Domain _internal_domain() const;
  void _internal_set_domain(::Domain value);
  public:

  // optional .Protocol protocol = 3;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  ::Protocol protocol() const;
  void set_protocol(::Protocol value);
  private:
  ::Protocol _internal_protocol() const;
  void _internal_set_protocol(::Protocol value);
  public:

  // optional .SoType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::SoType type() const;
  void set_type(::SoType value);
  private:
  ::SoType _internal_type() const;
  void _internal_set_type(::SoType value);
  public:

  // @@protoc_insertion_point(class_scope:Socketpair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int domain_;
  int protocol_;
  int type_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpSessionOpen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpSessionOpen) */ {
 public:
  inline NecpSessionOpen() : NecpSessionOpen(nullptr) {}
  virtual ~NecpSessionOpen();
  explicit constexpr NecpSessionOpen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpSessionOpen(const NecpSessionOpen& from);
  NecpSessionOpen(NecpSessionOpen&& from) noexcept
    : NecpSessionOpen() {
    *this = ::std::move(from);
  }

  inline NecpSessionOpen& operator=(const NecpSessionOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpSessionOpen& operator=(NecpSessionOpen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpSessionOpen& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpSessionOpen* internal_default_instance() {
    return reinterpret_cast<const NecpSessionOpen*>(
               &_NecpSessionOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(NecpSessionOpen& a, NecpSessionOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpSessionOpen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpSessionOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpSessionOpen* New() const final {
    return CreateMaybeMessage<NecpSessionOpen>(nullptr);
  }

  NecpSessionOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpSessionOpen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpSessionOpen& from);
  void MergeFrom(const NecpSessionOpen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpSessionOpen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpSessionOpen";
  }
  protected:
  explicit NecpSessionOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NecpSessionOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpSessionAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpSessionAction) */ {
 public:
  inline NecpSessionAction() : NecpSessionAction(nullptr) {}
  virtual ~NecpSessionAction();
  explicit constexpr NecpSessionAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpSessionAction(const NecpSessionAction& from);
  NecpSessionAction(NecpSessionAction&& from) noexcept
    : NecpSessionAction() {
    *this = ::std::move(from);
  }

  inline NecpSessionAction& operator=(const NecpSessionAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpSessionAction& operator=(NecpSessionAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpSessionAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpSessionAction* internal_default_instance() {
    return reinterpret_cast<const NecpSessionAction*>(
               &_NecpSessionAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(NecpSessionAction& a, NecpSessionAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpSessionAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpSessionAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpSessionAction* New() const final {
    return CreateMaybeMessage<NecpSessionAction>(nullptr);
  }

  NecpSessionAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpSessionAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpSessionAction& from);
  void MergeFrom(const NecpSessionAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpSessionAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpSessionAction";
  }
  protected:
  explicit NecpSessionAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInBufferFieldNumber = 3,
    kNecpFdFieldNumber = 1,
    kOutBufferSizeFieldNumber = 4,
    kActionFieldNumber = 2,
  };
  // optional bytes in_buffer = 3;
  bool has_in_buffer() const;
  private:
  bool _internal_has_in_buffer() const;
  public:
  void clear_in_buffer();
  const std::string& in_buffer() const;
  void set_in_buffer(const std::string& value);
  void set_in_buffer(std::string&& value);
  void set_in_buffer(const char* value);
  void set_in_buffer(const void* value, size_t size);
  std::string* mutable_in_buffer();
  std::string* release_in_buffer();
  void set_allocated_in_buffer(std::string* in_buffer);
  private:
  const std::string& _internal_in_buffer() const;
  void _internal_set_in_buffer(const std::string& value);
  std::string* _internal_mutable_in_buffer();
  public:

  // optional .FileDescriptor necp_fd = 1;
  bool has_necp_fd() const;
  private:
  bool _internal_has_necp_fd() const;
  public:
  void clear_necp_fd();
  ::FileDescriptor necp_fd() const;
  void set_necp_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_necp_fd() const;
  void _internal_set_necp_fd(::FileDescriptor value);
  public:

  // optional uint32 out_buffer_size = 4;
  bool has_out_buffer_size() const;
  private:
  bool _internal_has_out_buffer_size() const;
  public:
  void clear_out_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 out_buffer_size() const;
  void set_out_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out_buffer_size() const;
  void _internal_set_out_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .NecpSessionActionNumber action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::NecpSessionActionNumber action() const;
  void set_action(::NecpSessionActionNumber value);
  private:
  ::NecpSessionActionNumber _internal_action() const;
  void _internal_set_action(::NecpSessionActionNumber value);
  public:

  // @@protoc_insertion_point(class_scope:NecpSessionAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr in_buffer_;
  int necp_fd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_buffer_size_;
  int action_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpMatchPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpMatchPolicy) */ {
 public:
  inline NecpMatchPolicy() : NecpMatchPolicy(nullptr) {}
  virtual ~NecpMatchPolicy();
  explicit constexpr NecpMatchPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpMatchPolicy(const NecpMatchPolicy& from);
  NecpMatchPolicy(NecpMatchPolicy&& from) noexcept
    : NecpMatchPolicy() {
    *this = ::std::move(from);
  }

  inline NecpMatchPolicy& operator=(const NecpMatchPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpMatchPolicy& operator=(NecpMatchPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpMatchPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpMatchPolicy* internal_default_instance() {
    return reinterpret_cast<const NecpMatchPolicy*>(
               &_NecpMatchPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(NecpMatchPolicy& a, NecpMatchPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpMatchPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpMatchPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpMatchPolicy* New() const final {
    return CreateMaybeMessage<NecpMatchPolicy>(nullptr);
  }

  NecpMatchPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpMatchPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpMatchPolicy& from);
  void MergeFrom(const NecpMatchPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpMatchPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpMatchPolicy";
  }
  protected:
  explicit NecpMatchPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // optional bytes parameters = 1;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const std::string& parameters() const;
  void set_parameters(const std::string& value);
  void set_parameters(std::string&& value);
  void set_parameters(const char* value);
  void set_parameters(const void* value, size_t size);
  std::string* mutable_parameters();
  std::string* release_parameters();
  void set_allocated_parameters(std::string* parameters);
  private:
  const std::string& _internal_parameters() const;
  void _internal_set_parameters(const std::string& value);
  std::string* _internal_mutable_parameters();
  public:

  // @@protoc_insertion_point(class_scope:NecpMatchPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpOpen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpOpen) */ {
 public:
  inline NecpOpen() : NecpOpen(nullptr) {}
  virtual ~NecpOpen();
  explicit constexpr NecpOpen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpOpen(const NecpOpen& from);
  NecpOpen(NecpOpen&& from) noexcept
    : NecpOpen() {
    *this = ::std::move(from);
  }

  inline NecpOpen& operator=(const NecpOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpOpen& operator=(NecpOpen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpOpen& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpOpen* internal_default_instance() {
    return reinterpret_cast<const NecpOpen*>(
               &_NecpOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NecpOpen& a, NecpOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpOpen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpOpen* New() const final {
    return CreateMaybeMessage<NecpOpen>(nullptr);
  }

  NecpOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpOpen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpOpen& from);
  void MergeFrom(const NecpOpen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpOpen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpOpen";
  }
  protected:
  explicit NecpOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // repeated .NecpOpenFlag flags = 1;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  private:
  ::NecpOpenFlag _internal_flags(int index) const;
  void _internal_add_flags(::NecpOpenFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_flags();
  public:
  ::NecpOpenFlag flags(int index) const;
  void set_flags(int index, ::NecpOpenFlag value);
  void add_flags(::NecpOpenFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_flags();

  // @@protoc_insertion_point(class_scope:NecpOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpClientAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpClientAction) */ {
 public:
  inline NecpClientAction() : NecpClientAction(nullptr) {}
  virtual ~NecpClientAction();
  explicit constexpr NecpClientAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpClientAction(const NecpClientAction& from);
  NecpClientAction(NecpClientAction&& from) noexcept
    : NecpClientAction() {
    *this = ::std::move(from);
  }

  inline NecpClientAction& operator=(const NecpClientAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpClientAction& operator=(NecpClientAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpClientAction& default_instance() {
    return *internal_default_instance();
  }
  enum ActionCase {
    kAdd = 5,
    kRemove = 6,
    kCopyParameters = 7,
    kAgent = 11,
    ACTION_NOT_SET = 0,
  };

  static inline const NecpClientAction* internal_default_instance() {
    return reinterpret_cast<const NecpClientAction*>(
               &_NecpClientAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(NecpClientAction& a, NecpClientAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpClientAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpClientAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpClientAction* New() const final {
    return CreateMaybeMessage<NecpClientAction>(nullptr);
  }

  NecpClientAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpClientAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpClientAction& from);
  void MergeFrom(const NecpClientAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpClientAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpClientAction";
  }
  protected:
  explicit NecpClientAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNecpFdFieldNumber = 1,
    kClientIdFieldNumber = 3,
    kAddFieldNumber = 5,
    kRemoveFieldNumber = 6,
    kCopyParametersFieldNumber = 7,
    kAgentFieldNumber = 11,
  };
  // optional .FileDescriptor necp_fd = 1;
  bool has_necp_fd() const;
  private:
  bool _internal_has_necp_fd() const;
  public:
  void clear_necp_fd();
  ::FileDescriptor necp_fd() const;
  void set_necp_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_necp_fd() const;
  void _internal_set_necp_fd(::FileDescriptor value);
  public:

  // optional .NecpClientId client_id = 3;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::NecpClientId client_id() const;
  void set_client_id(::NecpClientId value);
  private:
  ::NecpClientId _internal_client_id() const;
  void _internal_set_client_id(::NecpClientId value);
  public:

  // .NecpClientActionAdd add = 5;
  bool has_add() const;
  private:
  bool _internal_has_add() const;
  public:
  void clear_add();
  const ::NecpClientActionAdd& add() const;
  ::NecpClientActionAdd* release_add();
  ::NecpClientActionAdd* mutable_add();
  void set_allocated_add(::NecpClientActionAdd* add);
  private:
  const ::NecpClientActionAdd& _internal_add() const;
  ::NecpClientActionAdd* _internal_mutable_add();
  public:
  void unsafe_arena_set_allocated_add(
      ::NecpClientActionAdd* add);
  ::NecpClientActionAdd* unsafe_arena_release_add();

  // .NecpClientActionRemove remove = 6;
  bool has_remove() const;
  private:
  bool _internal_has_remove() const;
  public:
  void clear_remove();
  const ::NecpClientActionRemove& remove() const;
  ::NecpClientActionRemove* release_remove();
  ::NecpClientActionRemove* mutable_remove();
  void set_allocated_remove(::NecpClientActionRemove* remove);
  private:
  const ::NecpClientActionRemove& _internal_remove() const;
  ::NecpClientActionRemove* _internal_mutable_remove();
  public:
  void unsafe_arena_set_allocated_remove(
      ::NecpClientActionRemove* remove);
  ::NecpClientActionRemove* unsafe_arena_release_remove();

  // .NecpClientActionCopyParameters copy_parameters = 7;
  bool has_copy_parameters() const;
  private:
  bool _internal_has_copy_parameters() const;
  public:
  void clear_copy_parameters();
  const ::NecpClientActionCopyParameters& copy_parameters() const;
  ::NecpClientActionCopyParameters* release_copy_parameters();
  ::NecpClientActionCopyParameters* mutable_copy_parameters();
  void set_allocated_copy_parameters(::NecpClientActionCopyParameters* copy_parameters);
  private:
  const ::NecpClientActionCopyParameters& _internal_copy_parameters() const;
  ::NecpClientActionCopyParameters* _internal_mutable_copy_parameters();
  public:
  void unsafe_arena_set_allocated_copy_parameters(
      ::NecpClientActionCopyParameters* copy_parameters);
  ::NecpClientActionCopyParameters* unsafe_arena_release_copy_parameters();

  // .NecpClientActionAgent agent = 11;
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::NecpClientActionAgent& agent() const;
  ::NecpClientActionAgent* release_agent();
  ::NecpClientActionAgent* mutable_agent();
  void set_allocated_agent(::NecpClientActionAgent* agent);
  private:
  const ::NecpClientActionAgent& _internal_agent() const;
  ::NecpClientActionAgent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::NecpClientActionAgent* agent);
  ::NecpClientActionAgent* unsafe_arena_release_agent();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:NecpClientAction)
 private:
  class _Internal;
  void set_has_add();
  void set_has_remove();
  void set_has_copy_parameters();
  void set_has_agent();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int necp_fd_;
  int client_id_;
  union ActionUnion {
    constexpr ActionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::NecpClientActionAdd* add_;
    ::NecpClientActionRemove* remove_;
    ::NecpClientActionCopyParameters* copy_parameters_;
    ::NecpClientActionAgent* agent_;
  } action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpClientActionAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpClientActionAdd) */ {
 public:
  inline NecpClientActionAdd() : NecpClientActionAdd(nullptr) {}
  virtual ~NecpClientActionAdd();
  explicit constexpr NecpClientActionAdd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpClientActionAdd(const NecpClientActionAdd& from);
  NecpClientActionAdd(NecpClientActionAdd&& from) noexcept
    : NecpClientActionAdd() {
    *this = ::std::move(from);
  }

  inline NecpClientActionAdd& operator=(const NecpClientActionAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpClientActionAdd& operator=(NecpClientActionAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpClientActionAdd& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpClientActionAdd* internal_default_instance() {
    return reinterpret_cast<const NecpClientActionAdd*>(
               &_NecpClientActionAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(NecpClientActionAdd& a, NecpClientActionAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpClientActionAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpClientActionAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpClientActionAdd* New() const final {
    return CreateMaybeMessage<NecpClientActionAdd>(nullptr);
  }

  NecpClientActionAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpClientActionAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpClientActionAdd& from);
  void MergeFrom(const NecpClientActionAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpClientActionAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpClientActionAdd";
  }
  protected:
  explicit NecpClientActionAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
  };
  // optional bytes buffer = 1;
  bool has_buffer() const;
  private:
  bool _internal_has_buffer() const;
  public:
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:NecpClientActionAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpClientActionRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpClientActionRemove) */ {
 public:
  inline NecpClientActionRemove() : NecpClientActionRemove(nullptr) {}
  virtual ~NecpClientActionRemove();
  explicit constexpr NecpClientActionRemove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpClientActionRemove(const NecpClientActionRemove& from);
  NecpClientActionRemove(NecpClientActionRemove&& from) noexcept
    : NecpClientActionRemove() {
    *this = ::std::move(from);
  }

  inline NecpClientActionRemove& operator=(const NecpClientActionRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpClientActionRemove& operator=(NecpClientActionRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpClientActionRemove& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpClientActionRemove* internal_default_instance() {
    return reinterpret_cast<const NecpClientActionRemove*>(
               &_NecpClientActionRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(NecpClientActionRemove& a, NecpClientActionRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpClientActionRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpClientActionRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpClientActionRemove* New() const final {
    return CreateMaybeMessage<NecpClientActionRemove>(nullptr);
  }

  NecpClientActionRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpClientActionRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpClientActionRemove& from);
  void MergeFrom(const NecpClientActionRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpClientActionRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpClientActionRemove";
  }
  protected:
  explicit NecpClientActionRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NecpClientActionRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpClientActionCopyParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpClientActionCopyParameters) */ {
 public:
  inline NecpClientActionCopyParameters() : NecpClientActionCopyParameters(nullptr) {}
  virtual ~NecpClientActionCopyParameters();
  explicit constexpr NecpClientActionCopyParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpClientActionCopyParameters(const NecpClientActionCopyParameters& from);
  NecpClientActionCopyParameters(NecpClientActionCopyParameters&& from) noexcept
    : NecpClientActionCopyParameters() {
    *this = ::std::move(from);
  }

  inline NecpClientActionCopyParameters& operator=(const NecpClientActionCopyParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpClientActionCopyParameters& operator=(NecpClientActionCopyParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpClientActionCopyParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpClientActionCopyParameters* internal_default_instance() {
    return reinterpret_cast<const NecpClientActionCopyParameters*>(
               &_NecpClientActionCopyParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(NecpClientActionCopyParameters& a, NecpClientActionCopyParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpClientActionCopyParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpClientActionCopyParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpClientActionCopyParameters* New() const final {
    return CreateMaybeMessage<NecpClientActionCopyParameters>(nullptr);
  }

  NecpClientActionCopyParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpClientActionCopyParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpClientActionCopyParameters& from);
  void MergeFrom(const NecpClientActionCopyParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpClientActionCopyParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpClientActionCopyParameters";
  }
  protected:
  explicit NecpClientActionCopyParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyoutSizeFieldNumber = 1,
  };
  // optional uint32 copyout_size = 1;
  bool has_copyout_size() const;
  private:
  bool _internal_has_copyout_size() const;
  public:
  void clear_copyout_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 copyout_size() const;
  void set_copyout_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copyout_size() const;
  void _internal_set_copyout_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NecpClientActionCopyParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copyout_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpClientActionAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpClientActionAgent) */ {
 public:
  inline NecpClientActionAgent() : NecpClientActionAgent(nullptr) {}
  virtual ~NecpClientActionAgent();
  explicit constexpr NecpClientActionAgent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpClientActionAgent(const NecpClientActionAgent& from);
  NecpClientActionAgent(NecpClientActionAgent&& from) noexcept
    : NecpClientActionAgent() {
    *this = ::std::move(from);
  }

  inline NecpClientActionAgent& operator=(const NecpClientActionAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpClientActionAgent& operator=(NecpClientActionAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpClientActionAgent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpClientActionAgent* internal_default_instance() {
    return reinterpret_cast<const NecpClientActionAgent*>(
               &_NecpClientActionAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(NecpClientActionAgent& a, NecpClientActionAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpClientActionAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpClientActionAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpClientActionAgent* New() const final {
    return CreateMaybeMessage<NecpClientActionAgent>(nullptr);
  }

  NecpClientActionAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpClientActionAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpClientActionAgent& from);
  void MergeFrom(const NecpClientActionAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpClientActionAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpClientActionAgent";
  }
  protected:
  explicit NecpClientActionAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNecpTlvFieldNumber = 1,
  };
  // repeated .NecpTlv necp_tlv = 1;
  int necp_tlv_size() const;
  private:
  int _internal_necp_tlv_size() const;
  public:
  void clear_necp_tlv();
  ::NecpTlv* mutable_necp_tlv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NecpTlv >*
      mutable_necp_tlv();
  private:
  const ::NecpTlv& _internal_necp_tlv(int index) const;
  ::NecpTlv* _internal_add_necp_tlv();
  public:
  const ::NecpTlv& necp_tlv(int index) const;
  ::NecpTlv* add_necp_tlv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NecpTlv >&
      necp_tlv() const;

  // @@protoc_insertion_point(class_scope:NecpClientActionAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NecpTlv > necp_tlv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class NecpTlv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NecpTlv) */ {
 public:
  inline NecpTlv() : NecpTlv(nullptr) {}
  virtual ~NecpTlv();
  explicit constexpr NecpTlv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NecpTlv(const NecpTlv& from);
  NecpTlv(NecpTlv&& from) noexcept
    : NecpTlv() {
    *this = ::std::move(from);
  }

  inline NecpTlv& operator=(const NecpTlv& from) {
    CopyFrom(from);
    return *this;
  }
  inline NecpTlv& operator=(NecpTlv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NecpTlv& default_instance() {
    return *internal_default_instance();
  }
  static inline const NecpTlv* internal_default_instance() {
    return reinterpret_cast<const NecpTlv*>(
               &_NecpTlv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(NecpTlv& a, NecpTlv& b) {
    a.Swap(&b);
  }
  inline void Swap(NecpTlv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NecpTlv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NecpTlv* New() const final {
    return CreateMaybeMessage<NecpTlv>(nullptr);
  }

  NecpTlv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NecpTlv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NecpTlv& from);
  void MergeFrom(const NecpTlv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NecpTlv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NecpTlv";
  }
  protected:
  explicit NecpTlv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kNecpTypeFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 necp_type = 1;
  bool has_necp_type() const;
  private:
  bool _internal_has_necp_type() const;
  public:
  void clear_necp_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 necp_type() const;
  void set_necp_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_necp_type() const;
  void _internal_set_necp_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NecpTlv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 necp_type_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class ClearAll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClearAll) */ {
 public:
  inline ClearAll() : ClearAll(nullptr) {}
  virtual ~ClearAll();
  explicit constexpr ClearAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearAll(const ClearAll& from);
  ClearAll(ClearAll&& from) noexcept
    : ClearAll() {
    *this = ::std::move(from);
  }

  inline ClearAll& operator=(const ClearAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearAll& operator=(ClearAll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearAll* internal_default_instance() {
    return reinterpret_cast<const ClearAll*>(
               &_ClearAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ClearAll& a, ClearAll& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearAll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearAll* New() const final {
    return CreateMaybeMessage<ClearAll>(nullptr);
  }

  ClearAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearAll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearAll& from);
  void MergeFrom(const ClearAll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearAll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClearAll";
  }
  protected:
  explicit ClearAll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClearAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Close PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Close) */ {
 public:
  inline Close() : Close(nullptr) {}
  virtual ~Close();
  explicit constexpr Close(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Close& default_instance() {
    return *internal_default_instance();
  }
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const final {
    return CreateMaybeMessage<Close>(nullptr);
  }

  Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Close* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Close";
  }
  protected:
  explicit Close(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 1,
  };
  // required .FileDescriptor fd = 1;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:Close)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int fd_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Accept PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Accept) */ {
 public:
  inline Accept() : Accept(nullptr) {}
  virtual ~Accept();
  explicit constexpr Accept(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Accept(const Accept& from);
  Accept(Accept&& from) noexcept
    : Accept() {
    *this = ::std::move(from);
  }

  inline Accept& operator=(const Accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accept& operator=(Accept&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accept& default_instance() {
    return *internal_default_instance();
  }
  static inline const Accept* internal_default_instance() {
    return reinterpret_cast<const Accept*>(
               &_Accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Accept& a, Accept& b) {
    a.Swap(&b);
  }
  inline void Swap(Accept* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accept* New() const final {
    return CreateMaybeMessage<Accept>(nullptr);
  }

  Accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accept& from);
  void MergeFrom(const Accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Accept";
  }
  protected:
  explicit Accept(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSockaddrFieldNumber = 1,
    kFdFieldNumber = 2,
  };
  // required .SockAddr sockaddr = 1;
  bool has_sockaddr() const;
  private:
  bool _internal_has_sockaddr() const;
  public:
  void clear_sockaddr();
  const ::SockAddr& sockaddr() const;
  ::SockAddr* release_sockaddr();
  ::SockAddr* mutable_sockaddr();
  void set_allocated_sockaddr(::SockAddr* sockaddr);
  private:
  const ::SockAddr& _internal_sockaddr() const;
  ::SockAddr* _internal_mutable_sockaddr();
  public:
  void unsafe_arena_set_allocated_sockaddr(
      ::SockAddr* sockaddr);
  ::SockAddr* unsafe_arena_release_sockaddr();

  // optional .FileDescriptor fd = 2;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:Accept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* sockaddr_;
  int fd_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Bind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Bind) */ {
 public:
  inline Bind() : Bind(nullptr) {}
  virtual ~Bind();
  explicit constexpr Bind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bind(const Bind& from);
  Bind(Bind&& from) noexcept
    : Bind() {
    *this = ::std::move(from);
  }

  inline Bind& operator=(const Bind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bind& operator=(Bind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bind* internal_default_instance() {
    return reinterpret_cast<const Bind*>(
               &_Bind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Bind& a, Bind& b) {
    a.Swap(&b);
  }
  inline void Swap(Bind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bind* New() const final {
    return CreateMaybeMessage<Bind>(nullptr);
  }

  Bind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bind& from);
  void MergeFrom(const Bind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bind";
  }
  protected:
  explicit Bind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSockaddrFieldNumber = 1,
    kFdFieldNumber = 2,
  };
  // required .SockAddr sockaddr = 1;
  bool has_sockaddr() const;
  private:
  bool _internal_has_sockaddr() const;
  public:
  void clear_sockaddr();
  const ::SockAddr& sockaddr() const;
  ::SockAddr* release_sockaddr();
  ::SockAddr* mutable_sockaddr();
  void set_allocated_sockaddr(::SockAddr* sockaddr);
  private:
  const ::SockAddr& _internal_sockaddr() const;
  ::SockAddr* _internal_mutable_sockaddr();
  public:
  void unsafe_arena_set_allocated_sockaddr(
      ::SockAddr* sockaddr);
  ::SockAddr* unsafe_arena_release_sockaddr();

  // optional .FileDescriptor fd = 2;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // @@protoc_insertion_point(class_scope:Bind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SockAddr* sockaddr_;
  int fd_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Listen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Listen) */ {
 public:
  inline Listen() : Listen(nullptr) {}
  virtual ~Listen();
  explicit constexpr Listen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Listen(const Listen& from);
  Listen(Listen&& from) noexcept
    : Listen() {
    *this = ::std::move(from);
  }

  inline Listen& operator=(const Listen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Listen& operator=(Listen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Listen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Listen* internal_default_instance() {
    return reinterpret_cast<const Listen*>(
               &_Listen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Listen& a, Listen& b) {
    a.Swap(&b);
  }
  inline void Swap(Listen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Listen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Listen* New() const final {
    return CreateMaybeMessage<Listen>(nullptr);
  }

  Listen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Listen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Listen& from);
  void MergeFrom(const Listen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Listen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Listen";
  }
  protected:
  explicit Listen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketFieldNumber = 1,
    kBacklogFieldNumber = 2,
  };
  // required .FileDescriptor socket = 1;
  bool has_socket() const;
  private:
  bool _internal_has_socket() const;
  public:
  void clear_socket();
  ::FileDescriptor socket() const;
  void set_socket(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_socket() const;
  void _internal_set_socket(::FileDescriptor value);
  public:

  // optional int32 backlog = 2;
  bool has_backlog() const;
  private:
  bool _internal_has_backlog() const;
  public:
  void clear_backlog();
  ::PROTOBUF_NAMESPACE_ID::int32 backlog() const;
  void set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_backlog() const;
  void _internal_set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Listen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int socket_;
  ::PROTOBUF_NAMESPACE_ID::int32 backlog_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class IoctlReal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IoctlReal) */ {
 public:
  inline IoctlReal() : IoctlReal(nullptr) {}
  virtual ~IoctlReal();
  explicit constexpr IoctlReal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IoctlReal(const IoctlReal& from);
  IoctlReal(IoctlReal&& from) noexcept
    : IoctlReal() {
    *this = ::std::move(from);
  }

  inline IoctlReal& operator=(const IoctlReal& from) {
    CopyFrom(from);
    return *this;
  }
  inline IoctlReal& operator=(IoctlReal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IoctlReal& default_instance() {
    return *internal_default_instance();
  }
  enum IoctlCase {
    kSiocaifaddrIn664 = 1,
    kSiocsifflags = 3,
    IOCTL_NOT_SET = 0,
  };

  static inline const IoctlReal* internal_default_instance() {
    return reinterpret_cast<const IoctlReal*>(
               &_IoctlReal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(IoctlReal& a, IoctlReal& b) {
    a.Swap(&b);
  }
  inline void Swap(IoctlReal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IoctlReal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IoctlReal* New() const final {
    return CreateMaybeMessage<IoctlReal>(nullptr);
  }

  IoctlReal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IoctlReal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IoctlReal& from);
  void MergeFrom(const IoctlReal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IoctlReal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IoctlReal";
  }
  protected:
  explicit IoctlReal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 2,
    kSiocaifaddrIn664FieldNumber = 1,
    kSiocsifflagsFieldNumber = 3,
  };
  // optional .FileDescriptor fd = 2;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // .In6_AliasReq_64 siocaifaddr_in6_64 = 1;
  bool has_siocaifaddr_in6_64() const;
  private:
  bool _internal_has_siocaifaddr_in6_64() const;
  public:
  void clear_siocaifaddr_in6_64();
  const ::In6_AliasReq_64& siocaifaddr_in6_64() const;
  ::In6_AliasReq_64* release_siocaifaddr_in6_64();
  ::In6_AliasReq_64* mutable_siocaifaddr_in6_64();
  void set_allocated_siocaifaddr_in6_64(::In6_AliasReq_64* siocaifaddr_in6_64);
  private:
  const ::In6_AliasReq_64& _internal_siocaifaddr_in6_64() const;
  ::In6_AliasReq_64* _internal_mutable_siocaifaddr_in6_64();
  public:
  void unsafe_arena_set_allocated_siocaifaddr_in6_64(
      ::In6_AliasReq_64* siocaifaddr_in6_64);
  ::In6_AliasReq_64* unsafe_arena_release_siocaifaddr_in6_64();

  // .IfReqFlags siocsifflags = 3;
  bool has_siocsifflags() const;
  private:
  bool _internal_has_siocsifflags() const;
  public:
  void clear_siocsifflags();
  const ::IfReqFlags& siocsifflags() const;
  ::IfReqFlags* release_siocsifflags();
  ::IfReqFlags* mutable_siocsifflags();
  void set_allocated_siocsifflags(::IfReqFlags* siocsifflags);
  private:
  const ::IfReqFlags& _internal_siocsifflags() const;
  ::IfReqFlags* _internal_mutable_siocsifflags();
  public:
  void unsafe_arena_set_allocated_siocsifflags(
      ::IfReqFlags* siocsifflags);
  ::IfReqFlags* unsafe_arena_release_siocsifflags();

  void clear_ioctl();
  IoctlCase ioctl_case() const;
  // @@protoc_insertion_point(class_scope:IoctlReal)
 private:
  class _Internal;
  void set_has_siocaifaddr_in6_64();
  void set_has_siocsifflags();

  inline bool has_ioctl() const;
  inline void clear_has_ioctl();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int fd_;
  union IoctlUnion {
    constexpr IoctlUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::In6_AliasReq_64* siocaifaddr_in6_64_;
    ::IfReqFlags* siocsifflags_;
  } ioctl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class IfReqFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IfReqFlags) */ {
 public:
  inline IfReqFlags() : IfReqFlags(nullptr) {}
  virtual ~IfReqFlags();
  explicit constexpr IfReqFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IfReqFlags(const IfReqFlags& from);
  IfReqFlags(IfReqFlags&& from) noexcept
    : IfReqFlags() {
    *this = ::std::move(from);
  }

  inline IfReqFlags& operator=(const IfReqFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline IfReqFlags& operator=(IfReqFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IfReqFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const IfReqFlags* internal_default_instance() {
    return reinterpret_cast<const IfReqFlags*>(
               &_IfReqFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(IfReqFlags& a, IfReqFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(IfReqFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IfReqFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IfReqFlags* New() const final {
    return CreateMaybeMessage<IfReqFlags>(nullptr);
  }

  IfReqFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IfReqFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IfReqFlags& from);
  void MergeFrom(const IfReqFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfReqFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IfReqFlags";
  }
  protected:
  explicit IfReqFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kIfrNameFieldNumber = 1,
  };
  // repeated .IfruFlag flags = 2;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  private:
  ::IfruFlag _internal_flags(int index) const;
  void _internal_add_flags(::IfruFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_flags();
  public:
  ::IfruFlag flags(int index) const;
  void set_flags(int index, ::IfruFlag value);
  void add_flags(::IfruFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_flags();

  // required .IfrName ifr_name = 1;
  bool has_ifr_name() const;
  private:
  bool _internal_has_ifr_name() const;
  public:
  void clear_ifr_name();
  ::IfrName ifr_name() const;
  void set_ifr_name(::IfrName value);
  private:
  ::IfrName _internal_ifr_name() const;
  void _internal_set_ifr_name(::IfrName value);
  public:

  // @@protoc_insertion_point(class_scope:IfReqFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> flags_;
  int ifr_name_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class In6_AliasReq_64 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:In6_AliasReq_64) */ {
 public:
  inline In6_AliasReq_64() : In6_AliasReq_64(nullptr) {}
  virtual ~In6_AliasReq_64();
  explicit constexpr In6_AliasReq_64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  In6_AliasReq_64(const In6_AliasReq_64& from);
  In6_AliasReq_64(In6_AliasReq_64&& from) noexcept
    : In6_AliasReq_64() {
    *this = ::std::move(from);
  }

  inline In6_AliasReq_64& operator=(const In6_AliasReq_64& from) {
    CopyFrom(from);
    return *this;
  }
  inline In6_AliasReq_64& operator=(In6_AliasReq_64&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const In6_AliasReq_64& default_instance() {
    return *internal_default_instance();
  }
  static inline const In6_AliasReq_64* internal_default_instance() {
    return reinterpret_cast<const In6_AliasReq_64*>(
               &_In6_AliasReq_64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(In6_AliasReq_64& a, In6_AliasReq_64& b) {
    a.Swap(&b);
  }
  inline void Swap(In6_AliasReq_64* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(In6_AliasReq_64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline In6_AliasReq_64* New() const final {
    return CreateMaybeMessage<In6_AliasReq_64>(nullptr);
  }

  In6_AliasReq_64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<In6_AliasReq_64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const In6_AliasReq_64& from);
  void MergeFrom(const In6_AliasReq_64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(In6_AliasReq_64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "In6_AliasReq_64";
  }
  protected:
  explicit In6_AliasReq_64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfraFlagsFieldNumber = 5,
    kIfraNameFieldNumber = 1,
    kIfraAddrFieldNumber = 2,
    kIfraDstaddrFieldNumber = 3,
    kIfraPrefixmaskFieldNumber = 4,
    kIfraLifetimeFieldNumber = 6,
  };
  // repeated .IfraFlag ifra_flags = 5;
  int ifra_flags_size() const;
  private:
  int _internal_ifra_flags_size() const;
  public:
  void clear_ifra_flags();
  private:
  ::IfraFlag _internal_ifra_flags(int index) const;
  void _internal_add_ifra_flags(::IfraFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ifra_flags();
  public:
  ::IfraFlag ifra_flags(int index) const;
  void set_ifra_flags(int index, ::IfraFlag value);
  void add_ifra_flags(::IfraFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ifra_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ifra_flags();

  // required bytes ifra_name = 1;
  bool has_ifra_name() const;
  private:
  bool _internal_has_ifra_name() const;
  public:
  void clear_ifra_name();
  const std::string& ifra_name() const;
  void set_ifra_name(const std::string& value);
  void set_ifra_name(std::string&& value);
  void set_ifra_name(const char* value);
  void set_ifra_name(const void* value, size_t size);
  std::string* mutable_ifra_name();
  std::string* release_ifra_name();
  void set_allocated_ifra_name(std::string* ifra_name);
  private:
  const std::string& _internal_ifra_name() const;
  void _internal_set_ifra_name(const std::string& value);
  std::string* _internal_mutable_ifra_name();
  public:

  // required .SockAddr6 ifra_addr = 2;
  bool has_ifra_addr() const;
  private:
  bool _internal_has_ifra_addr() const;
  public:
  void clear_ifra_addr();
  const ::SockAddr6& ifra_addr() const;
  ::SockAddr6* release_ifra_addr();
  ::SockAddr6* mutable_ifra_addr();
  void set_allocated_ifra_addr(::SockAddr6* ifra_addr);
  private:
  const ::SockAddr6& _internal_ifra_addr() const;
  ::SockAddr6* _internal_mutable_ifra_addr();
  public:
  void unsafe_arena_set_allocated_ifra_addr(
      ::SockAddr6* ifra_addr);
  ::SockAddr6* unsafe_arena_release_ifra_addr();

  // required .SockAddr6 ifra_dstaddr = 3;
  bool has_ifra_dstaddr() const;
  private:
  bool _internal_has_ifra_dstaddr() const;
  public:
  void clear_ifra_dstaddr();
  const ::SockAddr6& ifra_dstaddr() const;
  ::SockAddr6* release_ifra_dstaddr();
  ::SockAddr6* mutable_ifra_dstaddr();
  void set_allocated_ifra_dstaddr(::SockAddr6* ifra_dstaddr);
  private:
  const ::SockAddr6& _internal_ifra_dstaddr() const;
  ::SockAddr6* _internal_mutable_ifra_dstaddr();
  public:
  void unsafe_arena_set_allocated_ifra_dstaddr(
      ::SockAddr6* ifra_dstaddr);
  ::SockAddr6* unsafe_arena_release_ifra_dstaddr();

  // required .SockAddr6 ifra_prefixmask = 4;
  bool has_ifra_prefixmask() const;
  private:
  bool _internal_has_ifra_prefixmask() const;
  public:
  void clear_ifra_prefixmask();
  const ::SockAddr6& ifra_prefixmask() const;
  ::SockAddr6* release_ifra_prefixmask();
  ::SockAddr6* mutable_ifra_prefixmask();
  void set_allocated_ifra_prefixmask(::SockAddr6* ifra_prefixmask);
  private:
  const ::SockAddr6& _internal_ifra_prefixmask() const;
  ::SockAddr6* _internal_mutable_ifra_prefixmask();
  public:
  void unsafe_arena_set_allocated_ifra_prefixmask(
      ::SockAddr6* ifra_prefixmask);
  ::SockAddr6* unsafe_arena_release_ifra_prefixmask();

  // required .In6AddrLifetime_64 ifra_lifetime = 6;
  bool has_ifra_lifetime() const;
  private:
  bool _internal_has_ifra_lifetime() const;
  public:
  void clear_ifra_lifetime();
  const ::In6AddrLifetime_64& ifra_lifetime() const;
  ::In6AddrLifetime_64* release_ifra_lifetime();
  ::In6AddrLifetime_64* mutable_ifra_lifetime();
  void set_allocated_ifra_lifetime(::In6AddrLifetime_64* ifra_lifetime);
  private:
  const ::In6AddrLifetime_64& _internal_ifra_lifetime() const;
  ::In6AddrLifetime_64* _internal_mutable_ifra_lifetime();
  public:
  void unsafe_arena_set_allocated_ifra_lifetime(
      ::In6AddrLifetime_64* ifra_lifetime);
  ::In6AddrLifetime_64* unsafe_arena_release_ifra_lifetime();

  // @@protoc_insertion_point(class_scope:In6_AliasReq_64)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ifra_flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ifra_name_;
  ::SockAddr6* ifra_addr_;
  ::SockAddr6* ifra_dstaddr_;
  ::SockAddr6* ifra_prefixmask_;
  ::In6AddrLifetime_64* ifra_lifetime_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class In6AddrLifetime_64 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:In6AddrLifetime_64) */ {
 public:
  inline In6AddrLifetime_64() : In6AddrLifetime_64(nullptr) {}
  virtual ~In6AddrLifetime_64();
  explicit constexpr In6AddrLifetime_64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  In6AddrLifetime_64(const In6AddrLifetime_64& from);
  In6AddrLifetime_64(In6AddrLifetime_64&& from) noexcept
    : In6AddrLifetime_64() {
    *this = ::std::move(from);
  }

  inline In6AddrLifetime_64& operator=(const In6AddrLifetime_64& from) {
    CopyFrom(from);
    return *this;
  }
  inline In6AddrLifetime_64& operator=(In6AddrLifetime_64&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const In6AddrLifetime_64& default_instance() {
    return *internal_default_instance();
  }
  static inline const In6AddrLifetime_64* internal_default_instance() {
    return reinterpret_cast<const In6AddrLifetime_64*>(
               &_In6AddrLifetime_64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(In6AddrLifetime_64& a, In6AddrLifetime_64& b) {
    a.Swap(&b);
  }
  inline void Swap(In6AddrLifetime_64* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(In6AddrLifetime_64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline In6AddrLifetime_64* New() const final {
    return CreateMaybeMessage<In6AddrLifetime_64>(nullptr);
  }

  In6AddrLifetime_64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<In6AddrLifetime_64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const In6AddrLifetime_64& from);
  void MergeFrom(const In6AddrLifetime_64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(In6AddrLifetime_64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "In6AddrLifetime_64";
  }
  protected:
  explicit In6AddrLifetime_64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIa6TExpireFieldNumber = 1,
    kIa6TPreferredFieldNumber = 2,
    kIa6TVltimeFieldNumber = 3,
    kIa6TPltimeFieldNumber = 4,
  };
  // required uint64 ia6t_expire = 1;
  bool has_ia6t_expire() const;
  private:
  bool _internal_has_ia6t_expire() const;
  public:
  void clear_ia6t_expire();
  ::PROTOBUF_NAMESPACE_ID::uint64 ia6t_expire() const;
  void set_ia6t_expire(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ia6t_expire() const;
  void _internal_set_ia6t_expire(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 ia6t_preferred = 2;
  bool has_ia6t_preferred() const;
  private:
  bool _internal_has_ia6t_preferred() const;
  public:
  void clear_ia6t_preferred();
  ::PROTOBUF_NAMESPACE_ID::uint64 ia6t_preferred() const;
  void set_ia6t_preferred(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ia6t_preferred() const;
  void _internal_set_ia6t_preferred(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 ia6t_vltime = 3;
  bool has_ia6t_vltime() const;
  private:
  bool _internal_has_ia6t_vltime() const;
  public:
  void clear_ia6t_vltime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ia6t_vltime() const;
  void set_ia6t_vltime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ia6t_vltime() const;
  void _internal_set_ia6t_vltime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ia6t_pltime = 4;
  bool has_ia6t_pltime() const;
  private:
  bool _internal_has_ia6t_pltime() const;
  public:
  void clear_ia6t_pltime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ia6t_pltime() const;
  void set_ia6t_pltime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ia6t_pltime() const;
  void _internal_set_ia6t_pltime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:In6AddrLifetime_64)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ia6t_expire_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ia6t_preferred_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ia6t_vltime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ia6t_pltime_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  virtual ~Packet();
  explicit constexpr Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kTcpPacket = 1,
    kTcp6Packet = 2,
    kIp4Packet = 3,
    kIp6Packet = 4,
    kRawIp4 = 1000,
    kRawIp6 = 1001,
    PACKET_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTcpPacketFieldNumber = 1,
    kTcp6PacketFieldNumber = 2,
    kIp4PacketFieldNumber = 3,
    kIp6PacketFieldNumber = 4,
    kRawIp4FieldNumber = 1000,
    kRawIp6FieldNumber = 1001,
  };
  // .TcpPacket tcp_packet = 1;
  bool has_tcp_packet() const;
  private:
  bool _internal_has_tcp_packet() const;
  public:
  void clear_tcp_packet();
  const ::TcpPacket& tcp_packet() const;
  ::TcpPacket* release_tcp_packet();
  ::TcpPacket* mutable_tcp_packet();
  void set_allocated_tcp_packet(::TcpPacket* tcp_packet);
  private:
  const ::TcpPacket& _internal_tcp_packet() const;
  ::TcpPacket* _internal_mutable_tcp_packet();
  public:
  void unsafe_arena_set_allocated_tcp_packet(
      ::TcpPacket* tcp_packet);
  ::TcpPacket* unsafe_arena_release_tcp_packet();

  // .Tcp6Packet tcp6_packet = 2;
  bool has_tcp6_packet() const;
  private:
  bool _internal_has_tcp6_packet() const;
  public:
  void clear_tcp6_packet();
  const ::Tcp6Packet& tcp6_packet() const;
  ::Tcp6Packet* release_tcp6_packet();
  ::Tcp6Packet* mutable_tcp6_packet();
  void set_allocated_tcp6_packet(::Tcp6Packet* tcp6_packet);
  private:
  const ::Tcp6Packet& _internal_tcp6_packet() const;
  ::Tcp6Packet* _internal_mutable_tcp6_packet();
  public:
  void unsafe_arena_set_allocated_tcp6_packet(
      ::Tcp6Packet* tcp6_packet);
  ::Tcp6Packet* unsafe_arena_release_tcp6_packet();

  // .Ip4Packet ip4_packet = 3;
  bool has_ip4_packet() const;
  private:
  bool _internal_has_ip4_packet() const;
  public:
  void clear_ip4_packet();
  const ::Ip4Packet& ip4_packet() const;
  ::Ip4Packet* release_ip4_packet();
  ::Ip4Packet* mutable_ip4_packet();
  void set_allocated_ip4_packet(::Ip4Packet* ip4_packet);
  private:
  const ::Ip4Packet& _internal_ip4_packet() const;
  ::Ip4Packet* _internal_mutable_ip4_packet();
  public:
  void unsafe_arena_set_allocated_ip4_packet(
      ::Ip4Packet* ip4_packet);
  ::Ip4Packet* unsafe_arena_release_ip4_packet();

  // .Ip6Packet ip6_packet = 4;
  bool has_ip6_packet() const;
  private:
  bool _internal_has_ip6_packet() const;
  public:
  void clear_ip6_packet();
  const ::Ip6Packet& ip6_packet() const;
  ::Ip6Packet* release_ip6_packet();
  ::Ip6Packet* mutable_ip6_packet();
  void set_allocated_ip6_packet(::Ip6Packet* ip6_packet);
  private:
  const ::Ip6Packet& _internal_ip6_packet() const;
  ::Ip6Packet* _internal_mutable_ip6_packet();
  public:
  void unsafe_arena_set_allocated_ip6_packet(
      ::Ip6Packet* ip6_packet);
  ::Ip6Packet* unsafe_arena_release_ip6_packet();

  // bytes raw_ip4 = 1000;
  bool has_raw_ip4() const;
  private:
  bool _internal_has_raw_ip4() const;
  public:
  void clear_raw_ip4();
  const std::string& raw_ip4() const;
  void set_raw_ip4(const std::string& value);
  void set_raw_ip4(std::string&& value);
  void set_raw_ip4(const char* value);
  void set_raw_ip4(const void* value, size_t size);
  std::string* mutable_raw_ip4();
  std::string* release_raw_ip4();
  void set_allocated_raw_ip4(std::string* raw_ip4);
  private:
  const std::string& _internal_raw_ip4() const;
  void _internal_set_raw_ip4(const std::string& value);
  std::string* _internal_mutable_raw_ip4();
  public:

  // bytes raw_ip6 = 1001;
  bool has_raw_ip6() const;
  private:
  bool _internal_has_raw_ip6() const;
  public:
  void clear_raw_ip6();
  const std::string& raw_ip6() const;
  void set_raw_ip6(const std::string& value);
  void set_raw_ip6(std::string&& value);
  void set_raw_ip6(const char* value);
  void set_raw_ip6(const void* value, size_t size);
  std::string* mutable_raw_ip6();
  std::string* release_raw_ip6();
  void set_allocated_raw_ip6(std::string* raw_ip6);
  private:
  const std::string& _internal_raw_ip6() const;
  void _internal_set_raw_ip6(const std::string& value);
  std::string* _internal_mutable_raw_ip6();
  public:

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:Packet)
 private:
  class _Internal;
  void set_has_tcp_packet();
  void set_has_tcp6_packet();
  void set_has_ip4_packet();
  void set_has_ip6_packet();
  void set_has_raw_ip4();
  void set_has_raw_ip6();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PacketUnion {
    constexpr PacketUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TcpPacket* tcp_packet_;
    ::Tcp6Packet* tcp6_packet_;
    ::Ip4Packet* ip4_packet_;
    ::Ip6Packet* ip6_packet_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_ip4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_ip6_;
  } packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class TcpPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TcpPacket) */ {
 public:
  inline TcpPacket() : TcpPacket(nullptr) {}
  virtual ~TcpPacket();
  explicit constexpr TcpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TcpPacket(const TcpPacket& from);
  TcpPacket(TcpPacket&& from) noexcept
    : TcpPacket() {
    *this = ::std::move(from);
  }

  inline TcpPacket& operator=(const TcpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TcpPacket& operator=(TcpPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TcpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const TcpPacket* internal_default_instance() {
    return reinterpret_cast<const TcpPacket*>(
               &_TcpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TcpPacket& a, TcpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TcpPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TcpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TcpPacket* New() const final {
    return CreateMaybeMessage<TcpPacket>(nullptr);
  }

  TcpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TcpPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TcpPacket& from);
  void MergeFrom(const TcpPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TcpPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TcpPacket";
  }
  protected:
  explicit TcpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kIpHdrFieldNumber = 1,
    kTcpHdrFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .IpHdr ip_hdr = 1;
  bool has_ip_hdr() const;
  private:
  bool _internal_has_ip_hdr() const;
  public:
  void clear_ip_hdr();
  const ::IpHdr& ip_hdr() const;
  ::IpHdr* release_ip_hdr();
  ::IpHdr* mutable_ip_hdr();
  void set_allocated_ip_hdr(::IpHdr* ip_hdr);
  private:
  const ::IpHdr& _internal_ip_hdr() const;
  ::IpHdr* _internal_mutable_ip_hdr();
  public:
  void unsafe_arena_set_allocated_ip_hdr(
      ::IpHdr* ip_hdr);
  ::IpHdr* unsafe_arena_release_ip_hdr();

  // required .TcpHdr tcp_hdr = 2;
  bool has_tcp_hdr() const;
  private:
  bool _internal_has_tcp_hdr() const;
  public:
  void clear_tcp_hdr();
  const ::TcpHdr& tcp_hdr() const;
  ::TcpHdr* release_tcp_hdr();
  ::TcpHdr* mutable_tcp_hdr();
  void set_allocated_tcp_hdr(::TcpHdr* tcp_hdr);
  private:
  const ::TcpHdr& _internal_tcp_hdr() const;
  ::TcpHdr* _internal_mutable_tcp_hdr();
  public:
  void unsafe_arena_set_allocated_tcp_hdr(
      ::TcpHdr* tcp_hdr);
  ::TcpHdr* unsafe_arena_release_tcp_hdr();

  // @@protoc_insertion_point(class_scope:TcpPacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::IpHdr* ip_hdr_;
  ::TcpHdr* tcp_hdr_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Tcp6Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tcp6Packet) */ {
 public:
  inline Tcp6Packet() : Tcp6Packet(nullptr) {}
  virtual ~Tcp6Packet();
  explicit constexpr Tcp6Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tcp6Packet(const Tcp6Packet& from);
  Tcp6Packet(Tcp6Packet&& from) noexcept
    : Tcp6Packet() {
    *this = ::std::move(from);
  }

  inline Tcp6Packet& operator=(const Tcp6Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tcp6Packet& operator=(Tcp6Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tcp6Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tcp6Packet* internal_default_instance() {
    return reinterpret_cast<const Tcp6Packet*>(
               &_Tcp6Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Tcp6Packet& a, Tcp6Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Tcp6Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tcp6Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tcp6Packet* New() const final {
    return CreateMaybeMessage<Tcp6Packet>(nullptr);
  }

  Tcp6Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tcp6Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tcp6Packet& from);
  void MergeFrom(const Tcp6Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tcp6Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tcp6Packet";
  }
  protected:
  explicit Tcp6Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kIp6HdrFieldNumber = 1,
    kTcpHdrFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .Ip6Hdr ip6_hdr = 1;
  bool has_ip6_hdr() const;
  private:
  bool _internal_has_ip6_hdr() const;
  public:
  void clear_ip6_hdr();
  const ::Ip6Hdr& ip6_hdr() const;
  ::Ip6Hdr* release_ip6_hdr();
  ::Ip6Hdr* mutable_ip6_hdr();
  void set_allocated_ip6_hdr(::Ip6Hdr* ip6_hdr);
  private:
  const ::Ip6Hdr& _internal_ip6_hdr() const;
  ::Ip6Hdr* _internal_mutable_ip6_hdr();
  public:
  void unsafe_arena_set_allocated_ip6_hdr(
      ::Ip6Hdr* ip6_hdr);
  ::Ip6Hdr* unsafe_arena_release_ip6_hdr();

  // required .TcpHdr tcp_hdr = 2;
  bool has_tcp_hdr() const;
  private:
  bool _internal_has_tcp_hdr() const;
  public:
  void clear_tcp_hdr();
  const ::TcpHdr& tcp_hdr() const;
  ::TcpHdr* release_tcp_hdr();
  ::TcpHdr* mutable_tcp_hdr();
  void set_allocated_tcp_hdr(::TcpHdr* tcp_hdr);
  private:
  const ::TcpHdr& _internal_tcp_hdr() const;
  ::TcpHdr* _internal_mutable_tcp_hdr();
  public:
  void unsafe_arena_set_allocated_tcp_hdr(
      ::TcpHdr* tcp_hdr);
  ::TcpHdr* unsafe_arena_release_tcp_hdr();

  // @@protoc_insertion_point(class_scope:Tcp6Packet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::Ip6Hdr* ip6_hdr_;
  ::TcpHdr* tcp_hdr_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip4Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip4Packet) */ {
 public:
  inline Ip4Packet() : Ip4Packet(nullptr) {}
  virtual ~Ip4Packet();
  explicit constexpr Ip4Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip4Packet(const Ip4Packet& from);
  Ip4Packet(Ip4Packet&& from) noexcept
    : Ip4Packet() {
    *this = ::std::move(from);
  }

  inline Ip4Packet& operator=(const Ip4Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip4Packet& operator=(Ip4Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip4Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip4Packet* internal_default_instance() {
    return reinterpret_cast<const Ip4Packet*>(
               &_Ip4Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Ip4Packet& a, Ip4Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip4Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip4Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip4Packet* New() const final {
    return CreateMaybeMessage<Ip4Packet>(nullptr);
  }

  Ip4Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip4Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip4Packet& from);
  void MergeFrom(const Ip4Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip4Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip4Packet";
  }
  protected:
  explicit Ip4Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIpHdrFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .IpHdr ip_hdr = 1;
  bool has_ip_hdr() const;
  private:
  bool _internal_has_ip_hdr() const;
  public:
  void clear_ip_hdr();
  const ::IpHdr& ip_hdr() const;
  ::IpHdr* release_ip_hdr();
  ::IpHdr* mutable_ip_hdr();
  void set_allocated_ip_hdr(::IpHdr* ip_hdr);
  private:
  const ::IpHdr& _internal_ip_hdr() const;
  ::IpHdr* _internal_mutable_ip_hdr();
  public:
  void unsafe_arena_set_allocated_ip_hdr(
      ::IpHdr* ip_hdr);
  ::IpHdr* unsafe_arena_release_ip_hdr();

  // @@protoc_insertion_point(class_scope:Ip4Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::IpHdr* ip_hdr_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6Packet) */ {
 public:
  inline Ip6Packet() : Ip6Packet(nullptr) {}
  virtual ~Ip6Packet();
  explicit constexpr Ip6Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6Packet(const Ip6Packet& from);
  Ip6Packet(Ip6Packet&& from) noexcept
    : Ip6Packet() {
    *this = ::std::move(from);
  }

  inline Ip6Packet& operator=(const Ip6Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6Packet& operator=(Ip6Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6Packet* internal_default_instance() {
    return reinterpret_cast<const Ip6Packet*>(
               &_Ip6Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Ip6Packet& a, Ip6Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6Packet* New() const final {
    return CreateMaybeMessage<Ip6Packet>(nullptr);
  }

  Ip6Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6Packet& from);
  void MergeFrom(const Ip6Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6Packet";
  }
  protected:
  explicit Ip6Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIp6HdrFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .Ip6Hdr ip6_hdr = 1;
  bool has_ip6_hdr() const;
  private:
  bool _internal_has_ip6_hdr() const;
  public:
  void clear_ip6_hdr();
  const ::Ip6Hdr& ip6_hdr() const;
  ::Ip6Hdr* release_ip6_hdr();
  ::Ip6Hdr* mutable_ip6_hdr();
  void set_allocated_ip6_hdr(::Ip6Hdr* ip6_hdr);
  private:
  const ::Ip6Hdr& _internal_ip6_hdr() const;
  ::Ip6Hdr* _internal_mutable_ip6_hdr();
  public:
  void unsafe_arena_set_allocated_ip6_hdr(
      ::Ip6Hdr* ip6_hdr);
  ::Ip6Hdr* unsafe_arena_release_ip6_hdr();

  // @@protoc_insertion_point(class_scope:Ip6Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::Ip6Hdr* ip6_hdr_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6Ext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6Ext) */ {
 public:
  inline Ip6Ext() : Ip6Ext(nullptr) {}
  virtual ~Ip6Ext();
  explicit constexpr Ip6Ext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6Ext(const Ip6Ext& from);
  Ip6Ext(Ip6Ext&& from) noexcept
    : Ip6Ext() {
    *this = ::std::move(from);
  }

  inline Ip6Ext& operator=(const Ip6Ext& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6Ext& operator=(Ip6Ext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6Ext& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6Ext* internal_default_instance() {
    return reinterpret_cast<const Ip6Ext*>(
               &_Ip6Ext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Ip6Ext& a, Ip6Ext& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6Ext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6Ext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6Ext* New() const final {
    return CreateMaybeMessage<Ip6Ext>(nullptr);
  }

  Ip6Ext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6Ext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6Ext& from);
  void MergeFrom(const Ip6Ext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6Ext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6Ext";
  }
  protected:
  explicit Ip6Ext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp6ENxtFieldNumber = 1,
    kIp6ELenFieldNumber = 2,
  };
  // required .Protocol ip6e_nxt = 1;
  bool has_ip6e_nxt() const;
  private:
  bool _internal_has_ip6e_nxt() const;
  public:
  void clear_ip6e_nxt();
  ::Protocol ip6e_nxt() const;
  void set_ip6e_nxt(::Protocol value);
  private:
  ::Protocol _internal_ip6e_nxt() const;
  void _internal_set_ip6e_nxt(::Protocol value);
  public:

  // required uint32 ip6e_len = 2;
  bool has_ip6e_len() const;
  private:
  bool _internal_has_ip6e_len() const;
  public:
  void clear_ip6e_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6e_len() const;
  void set_ip6e_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6e_len() const;
  void _internal_set_ip6e_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ip6Ext)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int ip6e_nxt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6e_len_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6RtHdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6RtHdr) */ {
 public:
  inline Ip6RtHdr() : Ip6RtHdr(nullptr) {}
  virtual ~Ip6RtHdr();
  explicit constexpr Ip6RtHdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6RtHdr(const Ip6RtHdr& from);
  Ip6RtHdr(Ip6RtHdr&& from) noexcept
    : Ip6RtHdr() {
    *this = ::std::move(from);
  }

  inline Ip6RtHdr& operator=(const Ip6RtHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6RtHdr& operator=(Ip6RtHdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6RtHdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6RtHdr* internal_default_instance() {
    return reinterpret_cast<const Ip6RtHdr*>(
               &_Ip6RtHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Ip6RtHdr& a, Ip6RtHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6RtHdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6RtHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6RtHdr* New() const final {
    return CreateMaybeMessage<Ip6RtHdr>(nullptr);
  }

  Ip6RtHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6RtHdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6RtHdr& from);
  void MergeFrom(const Ip6RtHdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6RtHdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6RtHdr";
  }
  protected:
  explicit Ip6RtHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp6RNxtFieldNumber = 1,
    kIp6RLenFieldNumber = 2,
    kIp6RTypeFieldNumber = 3,
    kIp6RSegleftFieldNumber = 4,
  };
  // required .Protocol ip6r_nxt = 1;
  bool has_ip6r_nxt() const;
  private:
  bool _internal_has_ip6r_nxt() const;
  public:
  void clear_ip6r_nxt();
  ::Protocol ip6r_nxt() const;
  void set_ip6r_nxt(::Protocol value);
  private:
  ::Protocol _internal_ip6r_nxt() const;
  void _internal_set_ip6r_nxt(::Protocol value);
  public:

  // required uint32 ip6r_len = 2;
  bool has_ip6r_len() const;
  private:
  bool _internal_has_ip6r_len() const;
  public:
  void clear_ip6r_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r_len() const;
  void set_ip6r_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r_len() const;
  void _internal_set_ip6r_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .Ip6RtType ip6r_type = 3;
  bool has_ip6r_type() const;
  private:
  bool _internal_has_ip6r_type() const;
  public:
  void clear_ip6r_type();
  ::Ip6RtType ip6r_type() const;
  void set_ip6r_type(::Ip6RtType value);
  private:
  ::Ip6RtType _internal_ip6r_type() const;
  void _internal_set_ip6r_type(::Ip6RtType value);
  public:

  // required uint32 ip6r_segleft = 4;
  bool has_ip6r_segleft() const;
  private:
  bool _internal_has_ip6r_segleft() const;
  public:
  void clear_ip6r_segleft();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r_segleft() const;
  void set_ip6r_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r_segleft() const;
  void _internal_set_ip6r_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ip6RtHdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int ip6r_nxt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r_len_;
  int ip6r_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r_segleft_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6Rt0Hdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6Rt0Hdr) */ {
 public:
  inline Ip6Rt0Hdr() : Ip6Rt0Hdr(nullptr) {}
  virtual ~Ip6Rt0Hdr();
  explicit constexpr Ip6Rt0Hdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6Rt0Hdr(const Ip6Rt0Hdr& from);
  Ip6Rt0Hdr(Ip6Rt0Hdr&& from) noexcept
    : Ip6Rt0Hdr() {
    *this = ::std::move(from);
  }

  inline Ip6Rt0Hdr& operator=(const Ip6Rt0Hdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6Rt0Hdr& operator=(Ip6Rt0Hdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6Rt0Hdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6Rt0Hdr* internal_default_instance() {
    return reinterpret_cast<const Ip6Rt0Hdr*>(
               &_Ip6Rt0Hdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Ip6Rt0Hdr& a, Ip6Rt0Hdr& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6Rt0Hdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6Rt0Hdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6Rt0Hdr* New() const final {
    return CreateMaybeMessage<Ip6Rt0Hdr>(nullptr);
  }

  Ip6Rt0Hdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6Rt0Hdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6Rt0Hdr& from);
  void MergeFrom(const Ip6Rt0Hdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6Rt0Hdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6Rt0Hdr";
  }
  protected:
  explicit Ip6Rt0Hdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp6R0AddrFieldNumber = 7,
    kIp6R0NxtFieldNumber = 1,
    kIp6R0LenFieldNumber = 2,
    kIp6R0TypeFieldNumber = 3,
    kIp6R0SegleftFieldNumber = 4,
    kIp6R0ReservedFieldNumber = 5,
    kIp6R0SlmapFieldNumber = 6,
  };
  // repeated .In6Addr ip6r0_addr = 7;
  int ip6r0_addr_size() const;
  private:
  int _internal_ip6r0_addr_size() const;
  public:
  void clear_ip6r0_addr();
  private:
  ::In6Addr _internal_ip6r0_addr(int index) const;
  void _internal_add_ip6r0_addr(::In6Addr value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ip6r0_addr();
  public:
  ::In6Addr ip6r0_addr(int index) const;
  void set_ip6r0_addr(int index, ::In6Addr value);
  void add_ip6r0_addr(::In6Addr value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ip6r0_addr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ip6r0_addr();

  // required .Protocol ip6r0_nxt = 1;
  bool has_ip6r0_nxt() const;
  private:
  bool _internal_has_ip6r0_nxt() const;
  public:
  void clear_ip6r0_nxt();
  ::Protocol ip6r0_nxt() const;
  void set_ip6r0_nxt(::Protocol value);
  private:
  ::Protocol _internal_ip6r0_nxt() const;
  void _internal_set_ip6r0_nxt(::Protocol value);
  public:

  // required uint32 ip6r0_len = 2;
  bool has_ip6r0_len() const;
  private:
  bool _internal_has_ip6r0_len() const;
  public:
  void clear_ip6r0_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_len() const;
  void set_ip6r0_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r0_len() const;
  void _internal_set_ip6r0_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6r0_type = 3;
  bool has_ip6r0_type() const;
  private:
  bool _internal_has_ip6r0_type() const;
  public:
  void clear_ip6r0_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_type() const;
  void set_ip6r0_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r0_type() const;
  void _internal_set_ip6r0_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6r0_segleft = 4;
  bool has_ip6r0_segleft() const;
  private:
  bool _internal_has_ip6r0_segleft() const;
  public:
  void clear_ip6r0_segleft();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_segleft() const;
  void set_ip6r0_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r0_segleft() const;
  void _internal_set_ip6r0_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6r0_reserved = 5;
  bool has_ip6r0_reserved() const;
  private:
  bool _internal_has_ip6r0_reserved() const;
  public:
  void clear_ip6r0_reserved();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_reserved() const;
  void set_ip6r0_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r0_reserved() const;
  void _internal_set_ip6r0_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6r0_slmap = 6;
  bool has_ip6r0_slmap() const;
  private:
  bool _internal_has_ip6r0_slmap() const;
  public:
  void clear_ip6r0_slmap();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_slmap() const;
  void set_ip6r0_slmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6r0_slmap() const;
  void _internal_set_ip6r0_slmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ip6Rt0Hdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ip6r0_addr_;
  int ip6r0_nxt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_segleft_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_reserved_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6r0_slmap_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6FragHdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6FragHdr) */ {
 public:
  inline Ip6FragHdr() : Ip6FragHdr(nullptr) {}
  virtual ~Ip6FragHdr();
  explicit constexpr Ip6FragHdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6FragHdr(const Ip6FragHdr& from);
  Ip6FragHdr(Ip6FragHdr&& from) noexcept
    : Ip6FragHdr() {
    *this = ::std::move(from);
  }

  inline Ip6FragHdr& operator=(const Ip6FragHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6FragHdr& operator=(Ip6FragHdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6FragHdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6FragHdr* internal_default_instance() {
    return reinterpret_cast<const Ip6FragHdr*>(
               &_Ip6FragHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Ip6FragHdr& a, Ip6FragHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6FragHdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6FragHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6FragHdr* New() const final {
    return CreateMaybeMessage<Ip6FragHdr>(nullptr);
  }

  Ip6FragHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6FragHdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6FragHdr& from);
  void MergeFrom(const Ip6FragHdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6FragHdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6FragHdr";
  }
  protected:
  explicit Ip6FragHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp6FNxtFieldNumber = 1,
    kIp6FReservedFieldNumber = 2,
    kIp6FOfflgFieldNumber = 3,
    kIp6FIdentFieldNumber = 4,
  };
  // required .Protocol ip6f_nxt = 1;
  bool has_ip6f_nxt() const;
  private:
  bool _internal_has_ip6f_nxt() const;
  public:
  void clear_ip6f_nxt();
  ::Protocol ip6f_nxt() const;
  void set_ip6f_nxt(::Protocol value);
  private:
  ::Protocol _internal_ip6f_nxt() const;
  void _internal_set_ip6f_nxt(::Protocol value);
  public:

  // required uint32 ip6f_reserved = 2;
  bool has_ip6f_reserved() const;
  private:
  bool _internal_has_ip6f_reserved() const;
  public:
  void clear_ip6f_reserved();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6f_reserved() const;
  void set_ip6f_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6f_reserved() const;
  void _internal_set_ip6f_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6f_offlg = 3;
  bool has_ip6f_offlg() const;
  private:
  bool _internal_has_ip6f_offlg() const;
  public:
  void clear_ip6f_offlg();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6f_offlg() const;
  void set_ip6f_offlg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6f_offlg() const;
  void _internal_set_ip6f_offlg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6f_ident = 4;
  bool has_ip6f_ident() const;
  private:
  bool _internal_has_ip6f_ident() const;
  public:
  void clear_ip6f_ident();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6f_ident() const;
  void set_ip6f_ident(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6f_ident() const;
  void _internal_set_ip6f_ident(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ip6FragHdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int ip6f_nxt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6f_reserved_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6f_offlg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6f_ident_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Icmp6Hdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Icmp6Hdr) */ {
 public:
  inline Icmp6Hdr() : Icmp6Hdr(nullptr) {}
  virtual ~Icmp6Hdr();
  explicit constexpr Icmp6Hdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Icmp6Hdr(const Icmp6Hdr& from);
  Icmp6Hdr(Icmp6Hdr&& from) noexcept
    : Icmp6Hdr() {
    *this = ::std::move(from);
  }

  inline Icmp6Hdr& operator=(const Icmp6Hdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icmp6Hdr& operator=(Icmp6Hdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icmp6Hdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Icmp6Hdr* internal_default_instance() {
    return reinterpret_cast<const Icmp6Hdr*>(
               &_Icmp6Hdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Icmp6Hdr& a, Icmp6Hdr& b) {
    a.Swap(&b);
  }
  inline void Swap(Icmp6Hdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icmp6Hdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icmp6Hdr* New() const final {
    return CreateMaybeMessage<Icmp6Hdr>(nullptr);
  }

  Icmp6Hdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icmp6Hdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icmp6Hdr& from);
  void MergeFrom(const Icmp6Hdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icmp6Hdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Icmp6Hdr";
  }
  protected:
  explicit Icmp6Hdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIcmp6CodeFieldNumber = 2,
    kIcmp6DataunFieldNumber = 4,
    kIcmp6TypeFieldNumber = 1,
  };
  // optional .Icmp6Code icmp6_code = 2;
  bool has_icmp6_code() const;
  private:
  bool _internal_has_icmp6_code() const;
  public:
  void clear_icmp6_code();
  ::Icmp6Code icmp6_code() const;
  void set_icmp6_code(::Icmp6Code value);
  private:
  ::Icmp6Code _internal_icmp6_code() const;
  void _internal_set_icmp6_code(::Icmp6Code value);
  public:

  // optional uint32 icmp6_dataun = 4;
  bool has_icmp6_dataun() const;
  private:
  bool _internal_has_icmp6_dataun() const;
  public:
  void clear_icmp6_dataun();
  ::PROTOBUF_NAMESPACE_ID::uint32 icmp6_dataun() const;
  void set_icmp6_dataun(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_icmp6_dataun() const;
  void _internal_set_icmp6_dataun(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Icmp6Type icmp6_type = 1;
  bool has_icmp6_type() const;
  private:
  bool _internal_has_icmp6_type() const;
  public:
  void clear_icmp6_type();
  ::Icmp6Type icmp6_type() const;
  void set_icmp6_type(::Icmp6Type value);
  private:
  ::Icmp6Type _internal_icmp6_type() const;
  void _internal_set_icmp6_type(::Icmp6Type value);
  public:

  // @@protoc_insertion_point(class_scope:Icmp6Hdr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int icmp6_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 icmp6_dataun_;
  int icmp6_type_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class TcpHdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TcpHdr) */ {
 public:
  inline TcpHdr() : TcpHdr(nullptr) {}
  virtual ~TcpHdr();
  explicit constexpr TcpHdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TcpHdr(const TcpHdr& from);
  TcpHdr(TcpHdr&& from) noexcept
    : TcpHdr() {
    *this = ::std::move(from);
  }

  inline TcpHdr& operator=(const TcpHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline TcpHdr& operator=(TcpHdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TcpHdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const TcpHdr* internal_default_instance() {
    return reinterpret_cast<const TcpHdr*>(
               &_TcpHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TcpHdr& a, TcpHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(TcpHdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TcpHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TcpHdr* New() const final {
    return CreateMaybeMessage<TcpHdr>(nullptr);
  }

  TcpHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TcpHdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TcpHdr& from);
  void MergeFrom(const TcpHdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TcpHdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TcpHdr";
  }
  protected:
  explicit TcpHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThFlagsFieldNumber = 6,
    kThSportFieldNumber = 1,
    kThDportFieldNumber = 2,
    kThOffFieldNumber = 5,
    kThWinFieldNumber = 7,
    kThSumFieldNumber = 8,
    kThUrpFieldNumber = 9,
    kIsPureSynFieldNumber = 10,
    kIsPureAckFieldNumber = 11,
    kThSeqFieldNumber = 3,
    kThAckFieldNumber = 4,
  };
  // repeated .TcpFlag th_flags = 6;
  int th_flags_size() const;
  private:
  int _internal_th_flags_size() const;
  public:
  void clear_th_flags();
  private:
  ::TcpFlag _internal_th_flags(int index) const;
  void _internal_add_th_flags(::TcpFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_th_flags();
  public:
  ::TcpFlag th_flags(int index) const;
  void set_th_flags(int index, ::TcpFlag value);
  void add_th_flags(::TcpFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& th_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_th_flags();

  // required .Port th_sport = 1;
  bool has_th_sport() const;
  private:
  bool _internal_has_th_sport() const;
  public:
  void clear_th_sport();
  ::Port th_sport() const;
  void set_th_sport(::Port value);
  private:
  ::Port _internal_th_sport() const;
  void _internal_set_th_sport(::Port value);
  public:

  // required .Port th_dport = 2;
  bool has_th_dport() const;
  private:
  bool _internal_has_th_dport() const;
  public:
  void clear_th_dport();
  ::Port th_dport() const;
  void set_th_dport(::Port value);
  private:
  ::Port _internal_th_dport() const;
  void _internal_set_th_dport(::Port value);
  public:

  // required uint32 th_off = 5;
  bool has_th_off() const;
  private:
  bool _internal_has_th_off() const;
  public:
  void clear_th_off();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_off() const;
  void set_th_off(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_off() const;
  void _internal_set_th_off(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 th_win = 7;
  bool has_th_win() const;
  private:
  bool _internal_has_th_win() const;
  public:
  void clear_th_win();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_win() const;
  void set_th_win(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_win() const;
  void _internal_set_th_win(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 th_sum = 8;
  bool has_th_sum() const;
  private:
  bool _internal_has_th_sum() const;
  public:
  void clear_th_sum();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_sum() const;
  void set_th_sum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_sum() const;
  void _internal_set_th_sum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 th_urp = 9;
  bool has_th_urp() const;
  private:
  bool _internal_has_th_urp() const;
  public:
  void clear_th_urp();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_urp() const;
  void set_th_urp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_urp() const;
  void _internal_set_th_urp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool is_pure_syn = 10;
  bool has_is_pure_syn() const;
  private:
  bool _internal_has_is_pure_syn() const;
  public:
  void clear_is_pure_syn();
  bool is_pure_syn() const;
  void set_is_pure_syn(bool value);
  private:
  bool _internal_is_pure_syn() const;
  void _internal_set_is_pure_syn(bool value);
  public:

  // required bool is_pure_ack = 11;
  bool has_is_pure_ack() const;
  private:
  bool _internal_has_is_pure_ack() const;
  public:
  void clear_is_pure_ack();
  bool is_pure_ack() const;
  void set_is_pure_ack(bool value);
  private:
  bool _internal_is_pure_ack() const;
  void _internal_set_is_pure_ack(bool value);
  public:

  // required .TcpSeq th_seq = 3;
  bool has_th_seq() const;
  private:
  bool _internal_has_th_seq() const;
  public:
  void clear_th_seq();
  ::TcpSeq th_seq() const;
  void set_th_seq(::TcpSeq value);
  private:
  ::TcpSeq _internal_th_seq() const;
  void _internal_set_th_seq(::TcpSeq value);
  public:

  // required .TcpSeq th_ack = 4;
  bool has_th_ack() const;
  private:
  bool _internal_has_th_ack() const;
  public:
  void clear_th_ack();
  ::TcpSeq th_ack() const;
  void set_th_ack(::TcpSeq value);
  private:
  ::TcpSeq _internal_th_ack() const;
  void _internal_set_th_ack(::TcpSeq value);
  public:

  // @@protoc_insertion_point(class_scope:TcpHdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> th_flags_;
  int th_sport_;
  int th_dport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_off_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_win_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_sum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_urp_;
  bool is_pure_syn_;
  bool is_pure_ack_;
  int th_seq_;
  int th_ack_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class IpHdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IpHdr) */ {
 public:
  inline IpHdr() : IpHdr(nullptr) {}
  virtual ~IpHdr();
  explicit constexpr IpHdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IpHdr(const IpHdr& from);
  IpHdr(IpHdr&& from) noexcept
    : IpHdr() {
    *this = ::std::move(from);
  }

  inline IpHdr& operator=(const IpHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpHdr& operator=(IpHdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpHdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const IpHdr* internal_default_instance() {
    return reinterpret_cast<const IpHdr*>(
               &_IpHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(IpHdr& a, IpHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(IpHdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpHdr* New() const final {
    return CreateMaybeMessage<IpHdr>(nullptr);
  }

  IpHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpHdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpHdr& from);
  void MergeFrom(const IpHdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpHdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IpHdr";
  }
  protected:
  explicit IpHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpHlFieldNumber = 1,
    kIpTosFieldNumber = 3,
    kIpLenFieldNumber = 4,
    kIpIdFieldNumber = 5,
    kIpOffFieldNumber = 6,
    kIpTtlFieldNumber = 7,
    kIpPFieldNumber = 8,
    kIpSrcFieldNumber = 9,
    kIpDstFieldNumber = 10,
    kIpVFieldNumber = 2,
  };
  // required uint32 ip_hl = 1;
  bool has_ip_hl() const;
  private:
  bool _internal_has_ip_hl() const;
  public:
  void clear_ip_hl();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_hl() const;
  void set_ip_hl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_hl() const;
  void _internal_set_ip_hl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip_tos = 3;
  bool has_ip_tos() const;
  private:
  bool _internal_has_ip_tos() const;
  public:
  void clear_ip_tos();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_tos() const;
  void set_ip_tos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_tos() const;
  void _internal_set_ip_tos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip_len = 4;
  bool has_ip_len() const;
  private:
  bool _internal_has_ip_len() const;
  public:
  void clear_ip_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_len() const;
  void set_ip_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_len() const;
  void _internal_set_ip_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip_id = 5;
  bool has_ip_id() const;
  private:
  bool _internal_has_ip_id() const;
  public:
  void clear_ip_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_id() const;
  void set_ip_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_id() const;
  void _internal_set_ip_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip_off = 6;
  bool has_ip_off() const;
  private:
  bool _internal_has_ip_off() const;
  public:
  void clear_ip_off();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_off() const;
  void set_ip_off(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_off() const;
  void _internal_set_ip_off(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip_ttl = 7;
  bool has_ip_ttl() const;
  private:
  bool _internal_has_ip_ttl() const;
  public:
  void clear_ip_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_ttl() const;
  void set_ip_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_ttl() const;
  void _internal_set_ip_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .Protocol ip_p = 8;
  bool has_ip_p() const;
  private:
  bool _internal_has_ip_p() const;
  public:
  void clear_ip_p();
  ::Protocol ip_p() const;
  void set_ip_p(::Protocol value);
  private:
  ::Protocol _internal_ip_p() const;
  void _internal_set_ip_p(::Protocol value);
  public:

  // required .InAddr ip_src = 9;
  bool has_ip_src() const;
  private:
  bool _internal_has_ip_src() const;
  public:
  void clear_ip_src();
  ::InAddr ip_src() const;
  void set_ip_src(::InAddr value);
  private:
  ::InAddr _internal_ip_src() const;
  void _internal_set_ip_src(::InAddr value);
  public:

  // required .InAddr ip_dst = 10;
  bool has_ip_dst() const;
  private:
  bool _internal_has_ip_dst() const;
  public:
  void clear_ip_dst();
  ::InAddr ip_dst() const;
  void set_ip_dst(::InAddr value);
  private:
  ::InAddr _internal_ip_dst() const;
  void _internal_set_ip_dst(::InAddr value);
  public:

  // required .IpVersion ip_v = 2;
  bool has_ip_v() const;
  private:
  bool _internal_has_ip_v() const;
  public:
  void clear_ip_v();
  ::IpVersion ip_v() const;
  void set_ip_v(::IpVersion value);
  private:
  ::IpVersion _internal_ip_v() const;
  void _internal_set_ip_v(::IpVersion value);
  public:

  // @@protoc_insertion_point(class_scope:IpHdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_hl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_tos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_off_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_ttl_;
  int ip_p_;
  int ip_src_;
  int ip_dst_;
  int ip_v_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6Hdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6Hdr) */ {
 public:
  inline Ip6Hdr() : Ip6Hdr(nullptr) {}
  virtual ~Ip6Hdr();
  explicit constexpr Ip6Hdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6Hdr(const Ip6Hdr& from);
  Ip6Hdr(Ip6Hdr&& from) noexcept
    : Ip6Hdr() {
    *this = ::std::move(from);
  }

  inline Ip6Hdr& operator=(const Ip6Hdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6Hdr& operator=(Ip6Hdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6Hdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6Hdr* internal_default_instance() {
    return reinterpret_cast<const Ip6Hdr*>(
               &_Ip6Hdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Ip6Hdr& a, Ip6Hdr& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6Hdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6Hdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6Hdr* New() const final {
    return CreateMaybeMessage<Ip6Hdr>(nullptr);
  }

  Ip6Hdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6Hdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6Hdr& from);
  void MergeFrom(const Ip6Hdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6Hdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6Hdr";
  }
  protected:
  explicit Ip6Hdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp6HdrctlFieldNumber = 1,
    kIp6SrcFieldNumber = 2,
    kIp6DstFieldNumber = 3,
  };
  // required .Ip6Hdrctl ip6_hdrctl = 1;
  bool has_ip6_hdrctl() const;
  private:
  bool _internal_has_ip6_hdrctl() const;
  public:
  void clear_ip6_hdrctl();
  const ::Ip6Hdrctl& ip6_hdrctl() const;
  ::Ip6Hdrctl* release_ip6_hdrctl();
  ::Ip6Hdrctl* mutable_ip6_hdrctl();
  void set_allocated_ip6_hdrctl(::Ip6Hdrctl* ip6_hdrctl);
  private:
  const ::Ip6Hdrctl& _internal_ip6_hdrctl() const;
  ::Ip6Hdrctl* _internal_mutable_ip6_hdrctl();
  public:
  void unsafe_arena_set_allocated_ip6_hdrctl(
      ::Ip6Hdrctl* ip6_hdrctl);
  ::Ip6Hdrctl* unsafe_arena_release_ip6_hdrctl();

  // required .In6Addr ip6_src = 2;
  bool has_ip6_src() const;
  private:
  bool _internal_has_ip6_src() const;
  public:
  void clear_ip6_src();
  ::In6Addr ip6_src() const;
  void set_ip6_src(::In6Addr value);
  private:
  ::In6Addr _internal_ip6_src() const;
  void _internal_set_ip6_src(::In6Addr value);
  public:

  // required .In6Addr ip6_dst = 3;
  bool has_ip6_dst() const;
  private:
  bool _internal_has_ip6_dst() const;
  public:
  void clear_ip6_dst();
  ::In6Addr ip6_dst() const;
  void set_ip6_dst(::In6Addr value);
  private:
  ::In6Addr _internal_ip6_dst() const;
  void _internal_set_ip6_dst(::In6Addr value);
  public:

  // @@protoc_insertion_point(class_scope:Ip6Hdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Ip6Hdrctl* ip6_hdrctl_;
  int ip6_src_;
  int ip6_dst_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ip6Hdrctl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ip6Hdrctl) */ {
 public:
  inline Ip6Hdrctl() : Ip6Hdrctl(nullptr) {}
  virtual ~Ip6Hdrctl();
  explicit constexpr Ip6Hdrctl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ip6Hdrctl(const Ip6Hdrctl& from);
  Ip6Hdrctl(Ip6Hdrctl&& from) noexcept
    : Ip6Hdrctl() {
    *this = ::std::move(from);
  }

  inline Ip6Hdrctl& operator=(const Ip6Hdrctl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ip6Hdrctl& operator=(Ip6Hdrctl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ip6Hdrctl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ip6Hdrctl* internal_default_instance() {
    return reinterpret_cast<const Ip6Hdrctl*>(
               &_Ip6Hdrctl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Ip6Hdrctl& a, Ip6Hdrctl& b) {
    a.Swap(&b);
  }
  inline void Swap(Ip6Hdrctl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ip6Hdrctl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ip6Hdrctl* New() const final {
    return CreateMaybeMessage<Ip6Hdrctl>(nullptr);
  }

  Ip6Hdrctl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ip6Hdrctl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ip6Hdrctl& from);
  void MergeFrom(const Ip6Hdrctl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ip6Hdrctl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ip6Hdrctl";
  }
  protected:
  explicit Ip6Hdrctl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp6Un1FlowFieldNumber = 1,
    kIp6Un1PlenFieldNumber = 2,
    kIp6Un1NxtFieldNumber = 3,
    kIp6Un1HlimFieldNumber = 4,
  };
  // required uint32 ip6_un1_flow = 1;
  bool has_ip6_un1_flow() const;
  private:
  bool _internal_has_ip6_un1_flow() const;
  public:
  void clear_ip6_un1_flow();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6_un1_flow() const;
  void set_ip6_un1_flow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6_un1_flow() const;
  void _internal_set_ip6_un1_flow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ip6_un1_plen = 2;
  bool has_ip6_un1_plen() const;
  private:
  bool _internal_has_ip6_un1_plen() const;
  public:
  void clear_ip6_un1_plen();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6_un1_plen() const;
  void set_ip6_un1_plen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6_un1_plen() const;
  void _internal_set_ip6_un1_plen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .Protocol ip6_un1_nxt = 3;
  bool has_ip6_un1_nxt() const;
  private:
  bool _internal_has_ip6_un1_nxt() const;
  public:
  void clear_ip6_un1_nxt();
  ::Protocol ip6_un1_nxt() const;
  void set_ip6_un1_nxt(::Protocol value);
  private:
  ::Protocol _internal_ip6_un1_nxt() const;
  void _internal_set_ip6_un1_nxt(::Protocol value);
  public:

  // required uint32 ip6_un1_hlim = 4;
  bool has_ip6_un1_hlim() const;
  private:
  bool _internal_has_ip6_un1_hlim() const;
  public:
  void clear_ip6_un1_hlim();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6_un1_hlim() const;
  void set_ip6_un1_hlim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip6_un1_hlim() const;
  void _internal_set_ip6_un1_hlim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ip6Hdrctl)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6_un1_flow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6_un1_plen_;
  int ip6_un1_nxt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip6_un1_hlim_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Key PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Key) */ {
 public:
  inline Key() : Key(nullptr) {}
  virtual ~Key();
  explicit constexpr Key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Key";
  }
  protected:
  explicit Key(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMbufDataFieldNumber = 1,
  };
  // required bytes mbuf_data = 1;
  bool has_mbuf_data() const;
  private:
  bool _internal_has_mbuf_data() const;
  public:
  void clear_mbuf_data();
  const std::string& mbuf_data() const;
  void set_mbuf_data(const std::string& value);
  void set_mbuf_data(std::string&& value);
  void set_mbuf_data(const char* value);
  void set_mbuf_data(const void* value, size_t size);
  std::string* mutable_mbuf_data();
  std::string* release_mbuf_data();
  void set_allocated_mbuf_data(std::string* mbuf_data);
  private:
  const std::string& _internal_mbuf_data() const;
  void _internal_set_mbuf_data(const std::string& value);
  std::string* _internal_mutable_mbuf_data();
  public:

  // @@protoc_insertion_point(class_scope:Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mbuf_data_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Ioctl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ioctl) */ {
 public:
  inline Ioctl() : Ioctl(nullptr) {}
  virtual ~Ioctl();
  explicit constexpr Ioctl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ioctl(const Ioctl& from);
  Ioctl(Ioctl&& from) noexcept
    : Ioctl() {
    *this = ::std::move(from);
  }

  inline Ioctl& operator=(const Ioctl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ioctl& operator=(Ioctl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ioctl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ioctl* internal_default_instance() {
    return reinterpret_cast<const Ioctl*>(
               &_Ioctl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Ioctl& a, Ioctl& b) {
    a.Swap(&b);
  }
  inline void Swap(Ioctl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ioctl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ioctl* New() const final {
    return CreateMaybeMessage<Ioctl>(nullptr);
  }

  Ioctl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ioctl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ioctl& from);
  void MergeFrom(const Ioctl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ioctl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ioctl";
  }
  protected:
  explicit Ioctl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 2,
    kIoctlIdxFieldNumber = 1,
  };
  // required .FileDescriptor fd = 2;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // required .IoctlIdx ioctl_idx = 1;
  bool has_ioctl_idx() const;
  private:
  bool _internal_has_ioctl_idx() const;
  public:
  void clear_ioctl_idx();
  ::IoctlIdx ioctl_idx() const;
  void set_ioctl_idx(::IoctlIdx value);
  private:
  ::IoctlIdx _internal_ioctl_idx() const;
  void _internal_set_ioctl_idx(::IoctlIdx value);
  public:

  // @@protoc_insertion_point(class_scope:Ioctl)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int fd_;
  int ioctl_idx_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class SetSocketOpt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetSocketOpt) */ {
 public:
  inline SetSocketOpt() : SetSocketOpt(nullptr) {}
  virtual ~SetSocketOpt();
  explicit constexpr SetSocketOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSocketOpt(const SetSocketOpt& from);
  SetSocketOpt(SetSocketOpt&& from) noexcept
    : SetSocketOpt() {
    *this = ::std::move(from);
  }

  inline SetSocketOpt& operator=(const SetSocketOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSocketOpt& operator=(SetSocketOpt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSocketOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSocketOpt* internal_default_instance() {
    return reinterpret_cast<const SetSocketOpt*>(
               &_SetSocketOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SetSocketOpt& a, SetSocketOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSocketOpt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSocketOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSocketOpt* New() const final {
    return CreateMaybeMessage<SetSocketOpt>(nullptr);
  }

  SetSocketOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSocketOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSocketOpt& from);
  void MergeFrom(const SetSocketOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSocketOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetSocketOpt";
  }
  protected:
  explicit SetSocketOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kLevelFieldNumber = 1,
    kFdFieldNumber = 4,
    kNameFieldNumber = 2,
  };
  // optional bytes val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // optional .Protocol level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::Protocol level() const;
  void set_level(::Protocol value);
  private:
  ::Protocol _internal_level() const;
  void _internal_set_level(::Protocol value);
  public:

  // optional .FileDescriptor fd = 4;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::FileDescriptor fd() const;
  void set_fd(::FileDescriptor value);
  private:
  ::FileDescriptor _internal_fd() const;
  void _internal_set_fd(::FileDescriptor value);
  public:

  // optional .SocketOptName name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  ::SocketOptName name() const;
  void set_name(::SocketOptName value);
  private:
  ::SocketOptName _internal_name() const;
  void _internal_set_name(::SocketOptName value);
  public:

  // @@protoc_insertion_point(class_scope:SetSocketOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  int level_;
  int fd_;
  int name_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class GetSocketOpt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSocketOpt) */ {
 public:
  inline GetSocketOpt() : GetSocketOpt(nullptr) {}
  virtual ~GetSocketOpt();
  explicit constexpr GetSocketOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSocketOpt(const GetSocketOpt& from);
  GetSocketOpt(GetSocketOpt&& from) noexcept
    : GetSocketOpt() {
    *this = ::std::move(from);
  }

  inline GetSocketOpt& operator=(const GetSocketOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSocketOpt& operator=(GetSocketOpt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSocketOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSocketOpt* internal_default_instance() {
    return reinterpret_cast<const GetSocketOpt*>(
               &_GetSocketOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetSocketOpt& a, GetSocketOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSocketOpt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSocketOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSocketOpt* New() const final {
    return CreateMaybeMessage<GetSocketOpt>(nullptr);
  }

  GetSocketOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSocketOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSocketOpt& from);
  void MergeFrom(const GetSocketOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSocketOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSocketOpt";
  }
  protected:
  explicit GetSocketOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kSizeFieldNumber = 3,
    kFdFieldNumber = 4,
    kNameFieldNumber = 2,
  };
  // optional .Protocol level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::Protocol level() const;
  void set_level(::Protocol value);
  private:
  ::Protocol _internal_level() const;
  void _internal_set_level(::Protocol value);
  public:

  // optional int32 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 fd = 4;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::uint32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .SocketOptName name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  ::SocketOptName name() const;
  void set_name(::SocketOptName value);
  private:
  ::SocketOptName _internal_name() const;
  void _internal_set_name(::SocketOptName value);
  public:

  // @@protoc_insertion_point(class_scope:GetSocketOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int level_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fd_;
  int name_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// -------------------------------------------------------------------

class Socket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Socket) */ {
 public:
  inline Socket() : Socket(nullptr) {}
  virtual ~Socket();
  explicit constexpr Socket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Socket(const Socket& from);
  Socket(Socket&& from) noexcept
    : Socket() {
    *this = ::std::move(from);
  }

  inline Socket& operator=(const Socket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Socket& operator=(Socket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Socket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Socket* internal_default_instance() {
    return reinterpret_cast<const Socket*>(
               &_Socket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Socket& a, Socket& b) {
    a.Swap(&b);
  }
  inline void Swap(Socket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Socket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Socket* New() const final {
    return CreateMaybeMessage<Socket>(nullptr);
  }

  Socket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Socket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Socket& from);
  void MergeFrom(const Socket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Socket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Socket";
  }
  protected:
  explicit Socket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5ffuzzer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kProtocolFieldNumber = 3,
    kSoTypeFieldNumber = 2,
  };
  // required .Domain domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  ::Domain domain() const;
  void set_domain(::Domain value);
  private:
  ::Domain _internal_domain() const;
  void _internal_set_domain(::Domain value);
  public:

  // required .Protocol protocol = 3;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  ::Protocol protocol() const;
  void set_protocol(::Protocol value);
  private:
  ::Protocol _internal_protocol() const;
  void _internal_set_protocol(::Protocol value);
  public:

  // required .SoType so_type = 2;
  bool has_so_type() const;
  private:
  bool _internal_has_so_type() const;
  public:
  void clear_so_type();
  ::SoType so_type() const;
  void set_so_type(::SoType value);
  private:
  ::SoType _internal_so_type() const;
  void _internal_set_so_type(::SoType value);
  public:

  // @@protoc_insertion_point(class_scope:Socket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int domain_;
  int protocol_;
  int so_type_;
  friend struct ::TableStruct_net_5ffuzzer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// repeated .Command commands = 1;
inline int Session::_internal_commands_size() const {
  return commands_.size();
}
inline int Session::commands_size() const {
  return _internal_commands_size();
}
inline void Session::clear_commands() {
  commands_.Clear();
}
inline ::Command* Session::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:Session.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >*
Session::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:Session.commands)
  return &commands_;
}
inline const ::Command& Session::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::Command& Session::commands(int index) const {
  // @@protoc_insertion_point(field_get:Session.commands)
  return _internal_commands(index);
}
inline ::Command* Session::_internal_add_commands() {
  return commands_.Add();
}
inline ::Command* Session::add_commands() {
  // @@protoc_insertion_point(field_add:Session.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >&
Session::commands() const {
  // @@protoc_insertion_point(field_list:Session.commands)
  return commands_;
}

// required bytes data_provider = 2;
inline bool Session::_internal_has_data_provider() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Session::has_data_provider() const {
  return _internal_has_data_provider();
}
inline void Session::clear_data_provider() {
  data_provider_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Session::data_provider() const {
  // @@protoc_insertion_point(field_get:Session.data_provider)
  return _internal_data_provider();
}
inline void Session::set_data_provider(const std::string& value) {
  _internal_set_data_provider(value);
  // @@protoc_insertion_point(field_set:Session.data_provider)
}
inline std::string* Session::mutable_data_provider() {
  // @@protoc_insertion_point(field_mutable:Session.data_provider)
  return _internal_mutable_data_provider();
}
inline const std::string& Session::_internal_data_provider() const {
  return data_provider_.Get();
}
inline void Session::_internal_set_data_provider(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Session::set_data_provider(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_provider_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Session.data_provider)
}
inline void Session::set_data_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Session.data_provider)
}
inline void Session::set_data_provider(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Session.data_provider)
}
inline std::string* Session::_internal_mutable_data_provider() {
  _has_bits_[0] |= 0x00000001u;
  return data_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Session::release_data_provider() {
  // @@protoc_insertion_point(field_release:Session.data_provider)
  if (!_internal_has_data_provider()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_provider_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_data_provider(std::string* data_provider) {
  if (data_provider != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Session.data_provider)
}

// -------------------------------------------------------------------

// Connect

// required .SockAddr sockaddr = 1;
inline bool Connect::_internal_has_sockaddr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sockaddr_ != nullptr);
  return value;
}
inline bool Connect::has_sockaddr() const {
  return _internal_has_sockaddr();
}
inline void Connect::clear_sockaddr() {
  if (sockaddr_ != nullptr) sockaddr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& Connect::_internal_sockaddr() const {
  const ::SockAddr* p = sockaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Connect::sockaddr() const {
  // @@protoc_insertion_point(field_get:Connect.sockaddr)
  return _internal_sockaddr();
}
inline void Connect::unsafe_arena_set_allocated_sockaddr(
    ::SockAddr* sockaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sockaddr_);
  }
  sockaddr_ = sockaddr;
  if (sockaddr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Connect.sockaddr)
}
inline ::SockAddr* Connect::release_sockaddr() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sockaddr_;
  sockaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Connect::unsafe_arena_release_sockaddr() {
  // @@protoc_insertion_point(field_release:Connect.sockaddr)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sockaddr_;
  sockaddr_ = nullptr;
  return temp;
}
inline ::SockAddr* Connect::_internal_mutable_sockaddr() {
  _has_bits_[0] |= 0x00000001u;
  if (sockaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    sockaddr_ = p;
  }
  return sockaddr_;
}
inline ::SockAddr* Connect::mutable_sockaddr() {
  // @@protoc_insertion_point(field_mutable:Connect.sockaddr)
  return _internal_mutable_sockaddr();
}
inline void Connect::set_allocated_sockaddr(::SockAddr* sockaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sockaddr_;
  }
  if (sockaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sockaddr);
    if (message_arena != submessage_arena) {
      sockaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sockaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sockaddr_ = sockaddr;
  // @@protoc_insertion_point(field_set_allocated:Connect.sockaddr)
}

// required .FileDescriptor fd = 2;
inline bool Connect::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Connect::has_fd() const {
  return _internal_has_fd();
}
inline void Connect::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor Connect::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor Connect::fd() const {
  // @@protoc_insertion_point(field_get:Connect.fd)
  return _internal_fd();
}
inline void Connect::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fd_ = value;
}
inline void Connect::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:Connect.fd)
}

// -------------------------------------------------------------------

// ConnectX

// required .FileDescriptor socket = 1;
inline bool ConnectX::_internal_has_socket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConnectX::has_socket() const {
  return _internal_has_socket();
}
inline void ConnectX::clear_socket() {
  socket_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor ConnectX::_internal_socket() const {
  return static_cast< ::FileDescriptor >(socket_);
}
inline ::FileDescriptor ConnectX::socket() const {
  // @@protoc_insertion_point(field_get:ConnectX.socket)
  return _internal_socket();
}
inline void ConnectX::_internal_set_socket(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  socket_ = value;
}
inline void ConnectX::set_socket(::FileDescriptor value) {
  _internal_set_socket(value);
  // @@protoc_insertion_point(field_set:ConnectX.socket)
}

// required .Endpoints endpoints = 2;
inline bool ConnectX::_internal_has_endpoints() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || endpoints_ != nullptr);
  return value;
}
inline bool ConnectX::has_endpoints() const {
  return _internal_has_endpoints();
}
inline void ConnectX::clear_endpoints() {
  if (endpoints_ != nullptr) endpoints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Endpoints& ConnectX::_internal_endpoints() const {
  const ::Endpoints* p = endpoints_;
  return p != nullptr ? *p : reinterpret_cast<const ::Endpoints&>(
      ::_Endpoints_default_instance_);
}
inline const ::Endpoints& ConnectX::endpoints() const {
  // @@protoc_insertion_point(field_get:ConnectX.endpoints)
  return _internal_endpoints();
}
inline void ConnectX::unsafe_arena_set_allocated_endpoints(
    ::Endpoints* endpoints) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoints_);
  }
  endpoints_ = endpoints;
  if (endpoints) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectX.endpoints)
}
inline ::Endpoints* ConnectX::release_endpoints() {
  _has_bits_[0] &= ~0x00000001u;
  ::Endpoints* temp = endpoints_;
  endpoints_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Endpoints* ConnectX::unsafe_arena_release_endpoints() {
  // @@protoc_insertion_point(field_release:ConnectX.endpoints)
  _has_bits_[0] &= ~0x00000001u;
  ::Endpoints* temp = endpoints_;
  endpoints_ = nullptr;
  return temp;
}
inline ::Endpoints* ConnectX::_internal_mutable_endpoints() {
  _has_bits_[0] |= 0x00000001u;
  if (endpoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::Endpoints>(GetArena());
    endpoints_ = p;
  }
  return endpoints_;
}
inline ::Endpoints* ConnectX::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable:ConnectX.endpoints)
  return _internal_mutable_endpoints();
}
inline void ConnectX::set_allocated_endpoints(::Endpoints* endpoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete endpoints_;
  }
  if (endpoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(endpoints);
    if (message_arena != submessage_arena) {
      endpoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoints, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  endpoints_ = endpoints;
  // @@protoc_insertion_point(field_set_allocated:ConnectX.endpoints)
}

// required .SaeAssocID associd = 3;
inline bool ConnectX::_internal_has_associd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConnectX::has_associd() const {
  return _internal_has_associd();
}
inline void ConnectX::clear_associd() {
  associd_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::SaeAssocID ConnectX::_internal_associd() const {
  return static_cast< ::SaeAssocID >(associd_);
}
inline ::SaeAssocID ConnectX::associd() const {
  // @@protoc_insertion_point(field_get:ConnectX.associd)
  return _internal_associd();
}
inline void ConnectX::_internal_set_associd(::SaeAssocID value) {
  assert(::SaeAssocID_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  associd_ = value;
}
inline void ConnectX::set_associd(::SaeAssocID value) {
  _internal_set_associd(value);
  // @@protoc_insertion_point(field_set:ConnectX.associd)
}

// repeated .ConnectXFlag flags = 4;
inline int ConnectX::_internal_flags_size() const {
  return flags_.size();
}
inline int ConnectX::flags_size() const {
  return _internal_flags_size();
}
inline void ConnectX::clear_flags() {
  flags_.Clear();
}
inline ::ConnectXFlag ConnectX::_internal_flags(int index) const {
  return static_cast< ::ConnectXFlag >(flags_.Get(index));
}
inline ::ConnectXFlag ConnectX::flags(int index) const {
  // @@protoc_insertion_point(field_get:ConnectX.flags)
  return _internal_flags(index);
}
inline void ConnectX::set_flags(int index, ::ConnectXFlag value) {
  assert(::ConnectXFlag_IsValid(value));
  flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConnectX.flags)
}
inline void ConnectX::_internal_add_flags(::ConnectXFlag value) {
  assert(::ConnectXFlag_IsValid(value));
  flags_.Add(value);
}
inline void ConnectX::add_flags(::ConnectXFlag value) {
  // @@protoc_insertion_point(field_add:ConnectX.flags)
  _internal_add_flags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ConnectX::flags() const {
  // @@protoc_insertion_point(field_list:ConnectX.flags)
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ConnectX::_internal_mutable_flags() {
  return &flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ConnectX::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:ConnectX.flags)
  return _internal_mutable_flags();
}

// -------------------------------------------------------------------

// DisconnectX

// required .SaeAssocID associd = 1;
inline bool DisconnectX::_internal_has_associd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisconnectX::has_associd() const {
  return _internal_has_associd();
}
inline void DisconnectX::clear_associd() {
  associd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::SaeAssocID DisconnectX::_internal_associd() const {
  return static_cast< ::SaeAssocID >(associd_);
}
inline ::SaeAssocID DisconnectX::associd() const {
  // @@protoc_insertion_point(field_get:DisconnectX.associd)
  return _internal_associd();
}
inline void DisconnectX::_internal_set_associd(::SaeAssocID value) {
  assert(::SaeAssocID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  associd_ = value;
}
inline void DisconnectX::set_associd(::SaeAssocID value) {
  _internal_set_associd(value);
  // @@protoc_insertion_point(field_set:DisconnectX.associd)
}

// required int32 cid = 2;
inline bool DisconnectX::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisconnectX::has_cid() const {
  return _internal_has_cid();
}
inline void DisconnectX::clear_cid() {
  cid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisconnectX::_internal_cid() const {
  return cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisconnectX::cid() const {
  // @@protoc_insertion_point(field_get:DisconnectX.cid)
  return _internal_cid();
}
inline void DisconnectX::_internal_set_cid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cid_ = value;
}
inline void DisconnectX::set_cid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:DisconnectX.cid)
}

// required .FileDescriptor fd = 3;
inline bool DisconnectX::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DisconnectX::has_fd() const {
  return _internal_has_fd();
}
inline void DisconnectX::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FileDescriptor DisconnectX::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor DisconnectX::fd() const {
  // @@protoc_insertion_point(field_get:DisconnectX.fd)
  return _internal_fd();
}
inline void DisconnectX::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  fd_ = value;
}
inline void DisconnectX::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:DisconnectX.fd)
}

// -------------------------------------------------------------------

// IOV

// required bytes iov_data = 1;
inline bool IOV::_internal_has_iov_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IOV::has_iov_data() const {
  return _internal_has_iov_data();
}
inline void IOV::clear_iov_data() {
  iov_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IOV::iov_data() const {
  // @@protoc_insertion_point(field_get:IOV.iov_data)
  return _internal_iov_data();
}
inline void IOV::set_iov_data(const std::string& value) {
  _internal_set_iov_data(value);
  // @@protoc_insertion_point(field_set:IOV.iov_data)
}
inline std::string* IOV::mutable_iov_data() {
  // @@protoc_insertion_point(field_mutable:IOV.iov_data)
  return _internal_mutable_iov_data();
}
inline const std::string& IOV::_internal_iov_data() const {
  return iov_data_.Get();
}
inline void IOV::_internal_set_iov_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  iov_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IOV::set_iov_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  iov_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IOV.iov_data)
}
inline void IOV::set_iov_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  iov_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IOV.iov_data)
}
inline void IOV::set_iov_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  iov_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IOV.iov_data)
}
inline std::string* IOV::_internal_mutable_iov_data() {
  _has_bits_[0] |= 0x00000001u;
  return iov_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IOV::release_iov_data() {
  // @@protoc_insertion_point(field_release:IOV.iov_data)
  if (!_internal_has_iov_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return iov_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IOV::set_allocated_iov_data(std::string* iov_data) {
  if (iov_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iov_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iov_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IOV.iov_data)
}

// -------------------------------------------------------------------

// Endpoints

// required .IfIdx sae_srcif = 1;
inline bool Endpoints::_internal_has_sae_srcif() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Endpoints::has_sae_srcif() const {
  return _internal_has_sae_srcif();
}
inline void Endpoints::clear_sae_srcif() {
  sae_srcif_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::IfIdx Endpoints::_internal_sae_srcif() const {
  return static_cast< ::IfIdx >(sae_srcif_);
}
inline ::IfIdx Endpoints::sae_srcif() const {
  // @@protoc_insertion_point(field_get:Endpoints.sae_srcif)
  return _internal_sae_srcif();
}
inline void Endpoints::_internal_set_sae_srcif(::IfIdx value) {
  assert(::IfIdx_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  sae_srcif_ = value;
}
inline void Endpoints::set_sae_srcif(::IfIdx value) {
  _internal_set_sae_srcif(value);
  // @@protoc_insertion_point(field_set:Endpoints.sae_srcif)
}

// optional .SockAddr sae_srcaddr = 2;
inline bool Endpoints::_internal_has_sae_srcaddr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sae_srcaddr_ != nullptr);
  return value;
}
inline bool Endpoints::has_sae_srcaddr() const {
  return _internal_has_sae_srcaddr();
}
inline void Endpoints::clear_sae_srcaddr() {
  if (sae_srcaddr_ != nullptr) sae_srcaddr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& Endpoints::_internal_sae_srcaddr() const {
  const ::SockAddr* p = sae_srcaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Endpoints::sae_srcaddr() const {
  // @@protoc_insertion_point(field_get:Endpoints.sae_srcaddr)
  return _internal_sae_srcaddr();
}
inline void Endpoints::unsafe_arena_set_allocated_sae_srcaddr(
    ::SockAddr* sae_srcaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sae_srcaddr_);
  }
  sae_srcaddr_ = sae_srcaddr;
  if (sae_srcaddr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Endpoints.sae_srcaddr)
}
inline ::SockAddr* Endpoints::release_sae_srcaddr() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sae_srcaddr_;
  sae_srcaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Endpoints::unsafe_arena_release_sae_srcaddr() {
  // @@protoc_insertion_point(field_release:Endpoints.sae_srcaddr)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sae_srcaddr_;
  sae_srcaddr_ = nullptr;
  return temp;
}
inline ::SockAddr* Endpoints::_internal_mutable_sae_srcaddr() {
  _has_bits_[0] |= 0x00000001u;
  if (sae_srcaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    sae_srcaddr_ = p;
  }
  return sae_srcaddr_;
}
inline ::SockAddr* Endpoints::mutable_sae_srcaddr() {
  // @@protoc_insertion_point(field_mutable:Endpoints.sae_srcaddr)
  return _internal_mutable_sae_srcaddr();
}
inline void Endpoints::set_allocated_sae_srcaddr(::SockAddr* sae_srcaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sae_srcaddr_;
  }
  if (sae_srcaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sae_srcaddr);
    if (message_arena != submessage_arena) {
      sae_srcaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sae_srcaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sae_srcaddr_ = sae_srcaddr;
  // @@protoc_insertion_point(field_set_allocated:Endpoints.sae_srcaddr)
}

// required .SockAddr sae_dstaddr = 3;
inline bool Endpoints::_internal_has_sae_dstaddr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sae_dstaddr_ != nullptr);
  return value;
}
inline bool Endpoints::has_sae_dstaddr() const {
  return _internal_has_sae_dstaddr();
}
inline void Endpoints::clear_sae_dstaddr() {
  if (sae_dstaddr_ != nullptr) sae_dstaddr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SockAddr& Endpoints::_internal_sae_dstaddr() const {
  const ::SockAddr* p = sae_dstaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Endpoints::sae_dstaddr() const {
  // @@protoc_insertion_point(field_get:Endpoints.sae_dstaddr)
  return _internal_sae_dstaddr();
}
inline void Endpoints::unsafe_arena_set_allocated_sae_dstaddr(
    ::SockAddr* sae_dstaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sae_dstaddr_);
  }
  sae_dstaddr_ = sae_dstaddr;
  if (sae_dstaddr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Endpoints.sae_dstaddr)
}
inline ::SockAddr* Endpoints::release_sae_dstaddr() {
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = sae_dstaddr_;
  sae_dstaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Endpoints::unsafe_arena_release_sae_dstaddr() {
  // @@protoc_insertion_point(field_release:Endpoints.sae_dstaddr)
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = sae_dstaddr_;
  sae_dstaddr_ = nullptr;
  return temp;
}
inline ::SockAddr* Endpoints::_internal_mutable_sae_dstaddr() {
  _has_bits_[0] |= 0x00000002u;
  if (sae_dstaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    sae_dstaddr_ = p;
  }
  return sae_dstaddr_;
}
inline ::SockAddr* Endpoints::mutable_sae_dstaddr() {
  // @@protoc_insertion_point(field_mutable:Endpoints.sae_dstaddr)
  return _internal_mutable_sae_dstaddr();
}
inline void Endpoints::set_allocated_sae_dstaddr(::SockAddr* sae_dstaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sae_dstaddr_;
  }
  if (sae_dstaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sae_dstaddr);
    if (message_arena != submessage_arena) {
      sae_dstaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sae_dstaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sae_dstaddr_ = sae_dstaddr;
  // @@protoc_insertion_point(field_set_allocated:Endpoints.sae_dstaddr)
}

// -------------------------------------------------------------------

// SockAddr

// .SockAddrGeneric sockaddr_generic = 1;
inline bool SockAddr::_internal_has_sockaddr_generic() const {
  return sockaddr_case() == kSockaddrGeneric;
}
inline bool SockAddr::has_sockaddr_generic() const {
  return _internal_has_sockaddr_generic();
}
inline void SockAddr::set_has_sockaddr_generic() {
  _oneof_case_[0] = kSockaddrGeneric;
}
inline void SockAddr::clear_sockaddr_generic() {
  if (_internal_has_sockaddr_generic()) {
    if (GetArena() == nullptr) {
      delete sockaddr_.sockaddr_generic_;
    }
    clear_has_sockaddr();
  }
}
inline ::SockAddrGeneric* SockAddr::release_sockaddr_generic() {
  // @@protoc_insertion_point(field_release:SockAddr.sockaddr_generic)
  if (_internal_has_sockaddr_generic()) {
    clear_has_sockaddr();
      ::SockAddrGeneric* temp = sockaddr_.sockaddr_generic_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sockaddr_.sockaddr_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SockAddrGeneric& SockAddr::_internal_sockaddr_generic() const {
  return _internal_has_sockaddr_generic()
      ? *sockaddr_.sockaddr_generic_
      : reinterpret_cast< ::SockAddrGeneric&>(::_SockAddrGeneric_default_instance_);
}
inline const ::SockAddrGeneric& SockAddr::sockaddr_generic() const {
  // @@protoc_insertion_point(field_get:SockAddr.sockaddr_generic)
  return _internal_sockaddr_generic();
}
inline ::SockAddrGeneric* SockAddr::unsafe_arena_release_sockaddr_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SockAddr.sockaddr_generic)
  if (_internal_has_sockaddr_generic()) {
    clear_has_sockaddr();
    ::SockAddrGeneric* temp = sockaddr_.sockaddr_generic_;
    sockaddr_.sockaddr_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SockAddr::unsafe_arena_set_allocated_sockaddr_generic(::SockAddrGeneric* sockaddr_generic) {
  clear_sockaddr();
  if (sockaddr_generic) {
    set_has_sockaddr_generic();
    sockaddr_.sockaddr_generic_ = sockaddr_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SockAddr.sockaddr_generic)
}
inline ::SockAddrGeneric* SockAddr::_internal_mutable_sockaddr_generic() {
  if (!_internal_has_sockaddr_generic()) {
    clear_sockaddr();
    set_has_sockaddr_generic();
    sockaddr_.sockaddr_generic_ = CreateMaybeMessage< ::SockAddrGeneric >(GetArena());
  }
  return sockaddr_.sockaddr_generic_;
}
inline ::SockAddrGeneric* SockAddr::mutable_sockaddr_generic() {
  // @@protoc_insertion_point(field_mutable:SockAddr.sockaddr_generic)
  return _internal_mutable_sockaddr_generic();
}

// .SockAddr4 sockaddr4 = 2;
inline bool SockAddr::_internal_has_sockaddr4() const {
  return sockaddr_case() == kSockaddr4;
}
inline bool SockAddr::has_sockaddr4() const {
  return _internal_has_sockaddr4();
}
inline void SockAddr::set_has_sockaddr4() {
  _oneof_case_[0] = kSockaddr4;
}
inline void SockAddr::clear_sockaddr4() {
  if (_internal_has_sockaddr4()) {
    if (GetArena() == nullptr) {
      delete sockaddr_.sockaddr4_;
    }
    clear_has_sockaddr();
  }
}
inline ::SockAddr4* SockAddr::release_sockaddr4() {
  // @@protoc_insertion_point(field_release:SockAddr.sockaddr4)
  if (_internal_has_sockaddr4()) {
    clear_has_sockaddr();
      ::SockAddr4* temp = sockaddr_.sockaddr4_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sockaddr_.sockaddr4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SockAddr4& SockAddr::_internal_sockaddr4() const {
  return _internal_has_sockaddr4()
      ? *sockaddr_.sockaddr4_
      : reinterpret_cast< ::SockAddr4&>(::_SockAddr4_default_instance_);
}
inline const ::SockAddr4& SockAddr::sockaddr4() const {
  // @@protoc_insertion_point(field_get:SockAddr.sockaddr4)
  return _internal_sockaddr4();
}
inline ::SockAddr4* SockAddr::unsafe_arena_release_sockaddr4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SockAddr.sockaddr4)
  if (_internal_has_sockaddr4()) {
    clear_has_sockaddr();
    ::SockAddr4* temp = sockaddr_.sockaddr4_;
    sockaddr_.sockaddr4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SockAddr::unsafe_arena_set_allocated_sockaddr4(::SockAddr4* sockaddr4) {
  clear_sockaddr();
  if (sockaddr4) {
    set_has_sockaddr4();
    sockaddr_.sockaddr4_ = sockaddr4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SockAddr.sockaddr4)
}
inline ::SockAddr4* SockAddr::_internal_mutable_sockaddr4() {
  if (!_internal_has_sockaddr4()) {
    clear_sockaddr();
    set_has_sockaddr4();
    sockaddr_.sockaddr4_ = CreateMaybeMessage< ::SockAddr4 >(GetArena());
  }
  return sockaddr_.sockaddr4_;
}
inline ::SockAddr4* SockAddr::mutable_sockaddr4() {
  // @@protoc_insertion_point(field_mutable:SockAddr.sockaddr4)
  return _internal_mutable_sockaddr4();
}

// .SockAddr6 sockaddr6 = 3;
inline bool SockAddr::_internal_has_sockaddr6() const {
  return sockaddr_case() == kSockaddr6;
}
inline bool SockAddr::has_sockaddr6() const {
  return _internal_has_sockaddr6();
}
inline void SockAddr::set_has_sockaddr6() {
  _oneof_case_[0] = kSockaddr6;
}
inline void SockAddr::clear_sockaddr6() {
  if (_internal_has_sockaddr6()) {
    if (GetArena() == nullptr) {
      delete sockaddr_.sockaddr6_;
    }
    clear_has_sockaddr();
  }
}
inline ::SockAddr6* SockAddr::release_sockaddr6() {
  // @@protoc_insertion_point(field_release:SockAddr.sockaddr6)
  if (_internal_has_sockaddr6()) {
    clear_has_sockaddr();
      ::SockAddr6* temp = sockaddr_.sockaddr6_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sockaddr_.sockaddr6_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SockAddr6& SockAddr::_internal_sockaddr6() const {
  return _internal_has_sockaddr6()
      ? *sockaddr_.sockaddr6_
      : reinterpret_cast< ::SockAddr6&>(::_SockAddr6_default_instance_);
}
inline const ::SockAddr6& SockAddr::sockaddr6() const {
  // @@protoc_insertion_point(field_get:SockAddr.sockaddr6)
  return _internal_sockaddr6();
}
inline ::SockAddr6* SockAddr::unsafe_arena_release_sockaddr6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SockAddr.sockaddr6)
  if (_internal_has_sockaddr6()) {
    clear_has_sockaddr();
    ::SockAddr6* temp = sockaddr_.sockaddr6_;
    sockaddr_.sockaddr6_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SockAddr::unsafe_arena_set_allocated_sockaddr6(::SockAddr6* sockaddr6) {
  clear_sockaddr();
  if (sockaddr6) {
    set_has_sockaddr6();
    sockaddr_.sockaddr6_ = sockaddr6;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SockAddr.sockaddr6)
}
inline ::SockAddr6* SockAddr::_internal_mutable_sockaddr6() {
  if (!_internal_has_sockaddr6()) {
    clear_sockaddr();
    set_has_sockaddr6();
    sockaddr_.sockaddr6_ = CreateMaybeMessage< ::SockAddr6 >(GetArena());
  }
  return sockaddr_.sockaddr6_;
}
inline ::SockAddr6* SockAddr::mutable_sockaddr6() {
  // @@protoc_insertion_point(field_mutable:SockAddr.sockaddr6)
  return _internal_mutable_sockaddr6();
}

inline bool SockAddr::has_sockaddr() const {
  return sockaddr_case() != SOCKADDR_NOT_SET;
}
inline void SockAddr::clear_has_sockaddr() {
  _oneof_case_[0] = SOCKADDR_NOT_SET;
}
inline SockAddr::SockaddrCase SockAddr::sockaddr_case() const {
  return SockAddr::SockaddrCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SockAddrGeneric

// required .Domain sa_family = 1;
inline bool SockAddrGeneric::_internal_has_sa_family() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SockAddrGeneric::has_sa_family() const {
  return _internal_has_sa_family();
}
inline void SockAddrGeneric::clear_sa_family() {
  sa_family_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Domain SockAddrGeneric::_internal_sa_family() const {
  return static_cast< ::Domain >(sa_family_);
}
inline ::Domain SockAddrGeneric::sa_family() const {
  // @@protoc_insertion_point(field_get:SockAddrGeneric.sa_family)
  return _internal_sa_family();
}
inline void SockAddrGeneric::_internal_set_sa_family(::Domain value) {
  assert(::Domain_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  sa_family_ = value;
}
inline void SockAddrGeneric::set_sa_family(::Domain value) {
  _internal_set_sa_family(value);
  // @@protoc_insertion_point(field_set:SockAddrGeneric.sa_family)
}

// required bytes sa_data = 2;
inline bool SockAddrGeneric::_internal_has_sa_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SockAddrGeneric::has_sa_data() const {
  return _internal_has_sa_data();
}
inline void SockAddrGeneric::clear_sa_data() {
  sa_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SockAddrGeneric::sa_data() const {
  // @@protoc_insertion_point(field_get:SockAddrGeneric.sa_data)
  return _internal_sa_data();
}
inline void SockAddrGeneric::set_sa_data(const std::string& value) {
  _internal_set_sa_data(value);
  // @@protoc_insertion_point(field_set:SockAddrGeneric.sa_data)
}
inline std::string* SockAddrGeneric::mutable_sa_data() {
  // @@protoc_insertion_point(field_mutable:SockAddrGeneric.sa_data)
  return _internal_mutable_sa_data();
}
inline const std::string& SockAddrGeneric::_internal_sa_data() const {
  return sa_data_.Get();
}
inline void SockAddrGeneric::_internal_set_sa_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sa_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SockAddrGeneric::set_sa_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sa_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SockAddrGeneric.sa_data)
}
inline void SockAddrGeneric::set_sa_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sa_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SockAddrGeneric.sa_data)
}
inline void SockAddrGeneric::set_sa_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sa_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SockAddrGeneric.sa_data)
}
inline std::string* SockAddrGeneric::_internal_mutable_sa_data() {
  _has_bits_[0] |= 0x00000001u;
  return sa_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SockAddrGeneric::release_sa_data() {
  // @@protoc_insertion_point(field_release:SockAddrGeneric.sa_data)
  if (!_internal_has_sa_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sa_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SockAddrGeneric::set_allocated_sa_data(std::string* sa_data) {
  if (sa_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sa_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sa_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SockAddrGeneric.sa_data)
}

// -------------------------------------------------------------------

// SockAddr4

// required .Domain sin_family = 1;
inline bool SockAddr4::_internal_has_sin_family() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SockAddr4::has_sin_family() const {
  return _internal_has_sin_family();
}
inline void SockAddr4::clear_sin_family() {
  sin_family_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Domain SockAddr4::_internal_sin_family() const {
  return static_cast< ::Domain >(sin_family_);
}
inline ::Domain SockAddr4::sin_family() const {
  // @@protoc_insertion_point(field_get:SockAddr4.sin_family)
  return _internal_sin_family();
}
inline void SockAddr4::_internal_set_sin_family(::Domain value) {
  assert(::Domain_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  sin_family_ = value;
}
inline void SockAddr4::set_sin_family(::Domain value) {
  _internal_set_sin_family(value);
  // @@protoc_insertion_point(field_set:SockAddr4.sin_family)
}

// required .Port sin_port = 2;
inline bool SockAddr4::_internal_has_sin_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SockAddr4::has_sin_port() const {
  return _internal_has_sin_port();
}
inline void SockAddr4::clear_sin_port() {
  sin_port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Port SockAddr4::_internal_sin_port() const {
  return static_cast< ::Port >(sin_port_);
}
inline ::Port SockAddr4::sin_port() const {
  // @@protoc_insertion_point(field_get:SockAddr4.sin_port)
  return _internal_sin_port();
}
inline void SockAddr4::_internal_set_sin_port(::Port value) {
  assert(::Port_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  sin_port_ = value;
}
inline void SockAddr4::set_sin_port(::Port value) {
  _internal_set_sin_port(value);
  // @@protoc_insertion_point(field_set:SockAddr4.sin_port)
}

// required .InAddr sin_addr = 3;
inline bool SockAddr4::_internal_has_sin_addr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SockAddr4::has_sin_addr() const {
  return _internal_has_sin_addr();
}
inline void SockAddr4::clear_sin_addr() {
  sin_addr_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::InAddr SockAddr4::_internal_sin_addr() const {
  return static_cast< ::InAddr >(sin_addr_);
}
inline ::InAddr SockAddr4::sin_addr() const {
  // @@protoc_insertion_point(field_get:SockAddr4.sin_addr)
  return _internal_sin_addr();
}
inline void SockAddr4::_internal_set_sin_addr(::InAddr value) {
  assert(::InAddr_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  sin_addr_ = value;
}
inline void SockAddr4::set_sin_addr(::InAddr value) {
  _internal_set_sin_addr(value);
  // @@protoc_insertion_point(field_set:SockAddr4.sin_addr)
}

// -------------------------------------------------------------------

// SockAddr6

// required .Domain family = 1;
inline bool SockAddr6::_internal_has_family() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SockAddr6::has_family() const {
  return _internal_has_family();
}
inline void SockAddr6::clear_family() {
  family_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Domain SockAddr6::_internal_family() const {
  return static_cast< ::Domain >(family_);
}
inline ::Domain SockAddr6::family() const {
  // @@protoc_insertion_point(field_get:SockAddr6.family)
  return _internal_family();
}
inline void SockAddr6::_internal_set_family(::Domain value) {
  assert(::Domain_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  family_ = value;
}
inline void SockAddr6::set_family(::Domain value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:SockAddr6.family)
}

// required .Port port = 2;
inline bool SockAddr6::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SockAddr6::has_port() const {
  return _internal_has_port();
}
inline void SockAddr6::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Port SockAddr6::_internal_port() const {
  return static_cast< ::Port >(port_);
}
inline ::Port SockAddr6::port() const {
  // @@protoc_insertion_point(field_get:SockAddr6.port)
  return _internal_port();
}
inline void SockAddr6::_internal_set_port(::Port value) {
  assert(::Port_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void SockAddr6::set_port(::Port value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:SockAddr6.port)
}

// required .FlowInfo flow_info = 3;
inline bool SockAddr6::_internal_has_flow_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SockAddr6::has_flow_info() const {
  return _internal_has_flow_info();
}
inline void SockAddr6::clear_flow_info() {
  flow_info_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FlowInfo SockAddr6::_internal_flow_info() const {
  return static_cast< ::FlowInfo >(flow_info_);
}
inline ::FlowInfo SockAddr6::flow_info() const {
  // @@protoc_insertion_point(field_get:SockAddr6.flow_info)
  return _internal_flow_info();
}
inline void SockAddr6::_internal_set_flow_info(::FlowInfo value) {
  assert(::FlowInfo_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  flow_info_ = value;
}
inline void SockAddr6::set_flow_info(::FlowInfo value) {
  _internal_set_flow_info(value);
  // @@protoc_insertion_point(field_set:SockAddr6.flow_info)
}

// required .In6Addr sin6_addr = 4;
inline bool SockAddr6::_internal_has_sin6_addr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SockAddr6::has_sin6_addr() const {
  return _internal_has_sin6_addr();
}
inline void SockAddr6::clear_sin6_addr() {
  sin6_addr_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::In6Addr SockAddr6::_internal_sin6_addr() const {
  return static_cast< ::In6Addr >(sin6_addr_);
}
inline ::In6Addr SockAddr6::sin6_addr() const {
  // @@protoc_insertion_point(field_get:SockAddr6.sin6_addr)
  return _internal_sin6_addr();
}
inline void SockAddr6::_internal_set_sin6_addr(::In6Addr value) {
  assert(::In6Addr_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  sin6_addr_ = value;
}
inline void SockAddr6::set_sin6_addr(::In6Addr value) {
  _internal_set_sin6_addr(value);
  // @@protoc_insertion_point(field_set:SockAddr6.sin6_addr)
}

// required .ScopeId sin6_scope_id = 5;
inline bool SockAddr6::_internal_has_sin6_scope_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SockAddr6::has_sin6_scope_id() const {
  return _internal_has_sin6_scope_id();
}
inline void SockAddr6::clear_sin6_scope_id() {
  sin6_scope_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ScopeId SockAddr6::_internal_sin6_scope_id() const {
  return static_cast< ::ScopeId >(sin6_scope_id_);
}
inline ::ScopeId SockAddr6::sin6_scope_id() const {
  // @@protoc_insertion_point(field_get:SockAddr6.sin6_scope_id)
  return _internal_sin6_scope_id();
}
inline void SockAddr6::_internal_set_sin6_scope_id(::ScopeId value) {
  assert(::ScopeId_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  sin6_scope_id_ = value;
}
inline void SockAddr6::set_sin6_scope_id(::ScopeId value) {
  _internal_set_sin6_scope_id(value);
  // @@protoc_insertion_point(field_set:SockAddr6.sin6_scope_id)
}

// -------------------------------------------------------------------

// Command

// .Packet ip_input = 1;
inline bool Command::_internal_has_ip_input() const {
  return command_case() == kIpInput;
}
inline bool Command::has_ip_input() const {
  return _internal_has_ip_input();
}
inline void Command::set_has_ip_input() {
  _oneof_case_[0] = kIpInput;
}
inline void Command::clear_ip_input() {
  if (_internal_has_ip_input()) {
    if (GetArena() == nullptr) {
      delete command_.ip_input_;
    }
    clear_has_command();
  }
}
inline ::Packet* Command::release_ip_input() {
  // @@protoc_insertion_point(field_release:Command.ip_input)
  if (_internal_has_ip_input()) {
    clear_has_command();
      ::Packet* temp = command_.ip_input_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.ip_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Packet& Command::_internal_ip_input() const {
  return _internal_has_ip_input()
      ? *command_.ip_input_
      : reinterpret_cast< ::Packet&>(::_Packet_default_instance_);
}
inline const ::Packet& Command::ip_input() const {
  // @@protoc_insertion_point(field_get:Command.ip_input)
  return _internal_ip_input();
}
inline ::Packet* Command::unsafe_arena_release_ip_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.ip_input)
  if (_internal_has_ip_input()) {
    clear_has_command();
    ::Packet* temp = command_.ip_input_;
    command_.ip_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_ip_input(::Packet* ip_input) {
  clear_command();
  if (ip_input) {
    set_has_ip_input();
    command_.ip_input_ = ip_input;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.ip_input)
}
inline ::Packet* Command::_internal_mutable_ip_input() {
  if (!_internal_has_ip_input()) {
    clear_command();
    set_has_ip_input();
    command_.ip_input_ = CreateMaybeMessage< ::Packet >(GetArena());
  }
  return command_.ip_input_;
}
inline ::Packet* Command::mutable_ip_input() {
  // @@protoc_insertion_point(field_mutable:Command.ip_input)
  return _internal_mutable_ip_input();
}

// .Ioctl ioctl = 3;
inline bool Command::_internal_has_ioctl() const {
  return command_case() == kIoctl;
}
inline bool Command::has_ioctl() const {
  return _internal_has_ioctl();
}
inline void Command::set_has_ioctl() {
  _oneof_case_[0] = kIoctl;
}
inline void Command::clear_ioctl() {
  if (_internal_has_ioctl()) {
    if (GetArena() == nullptr) {
      delete command_.ioctl_;
    }
    clear_has_command();
  }
}
inline ::Ioctl* Command::release_ioctl() {
  // @@protoc_insertion_point(field_release:Command.ioctl)
  if (_internal_has_ioctl()) {
    clear_has_command();
      ::Ioctl* temp = command_.ioctl_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.ioctl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Ioctl& Command::_internal_ioctl() const {
  return _internal_has_ioctl()
      ? *command_.ioctl_
      : reinterpret_cast< ::Ioctl&>(::_Ioctl_default_instance_);
}
inline const ::Ioctl& Command::ioctl() const {
  // @@protoc_insertion_point(field_get:Command.ioctl)
  return _internal_ioctl();
}
inline ::Ioctl* Command::unsafe_arena_release_ioctl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.ioctl)
  if (_internal_has_ioctl()) {
    clear_has_command();
    ::Ioctl* temp = command_.ioctl_;
    command_.ioctl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_ioctl(::Ioctl* ioctl) {
  clear_command();
  if (ioctl) {
    set_has_ioctl();
    command_.ioctl_ = ioctl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.ioctl)
}
inline ::Ioctl* Command::_internal_mutable_ioctl() {
  if (!_internal_has_ioctl()) {
    clear_command();
    set_has_ioctl();
    command_.ioctl_ = CreateMaybeMessage< ::Ioctl >(GetArena());
  }
  return command_.ioctl_;
}
inline ::Ioctl* Command::mutable_ioctl() {
  // @@protoc_insertion_point(field_mutable:Command.ioctl)
  return _internal_mutable_ioctl();
}

// .SetSocketOpt set_sock_opt = 4;
inline bool Command::_internal_has_set_sock_opt() const {
  return command_case() == kSetSockOpt;
}
inline bool Command::has_set_sock_opt() const {
  return _internal_has_set_sock_opt();
}
inline void Command::set_has_set_sock_opt() {
  _oneof_case_[0] = kSetSockOpt;
}
inline void Command::clear_set_sock_opt() {
  if (_internal_has_set_sock_opt()) {
    if (GetArena() == nullptr) {
      delete command_.set_sock_opt_;
    }
    clear_has_command();
  }
}
inline ::SetSocketOpt* Command::release_set_sock_opt() {
  // @@protoc_insertion_point(field_release:Command.set_sock_opt)
  if (_internal_has_set_sock_opt()) {
    clear_has_command();
      ::SetSocketOpt* temp = command_.set_sock_opt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.set_sock_opt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SetSocketOpt& Command::_internal_set_sock_opt() const {
  return _internal_has_set_sock_opt()
      ? *command_.set_sock_opt_
      : reinterpret_cast< ::SetSocketOpt&>(::_SetSocketOpt_default_instance_);
}
inline const ::SetSocketOpt& Command::set_sock_opt() const {
  // @@protoc_insertion_point(field_get:Command.set_sock_opt)
  return _internal_set_sock_opt();
}
inline ::SetSocketOpt* Command::unsafe_arena_release_set_sock_opt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.set_sock_opt)
  if (_internal_has_set_sock_opt()) {
    clear_has_command();
    ::SetSocketOpt* temp = command_.set_sock_opt_;
    command_.set_sock_opt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_set_sock_opt(::SetSocketOpt* set_sock_opt) {
  clear_command();
  if (set_sock_opt) {
    set_has_set_sock_opt();
    command_.set_sock_opt_ = set_sock_opt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.set_sock_opt)
}
inline ::SetSocketOpt* Command::_internal_mutable_set_sock_opt() {
  if (!_internal_has_set_sock_opt()) {
    clear_command();
    set_has_set_sock_opt();
    command_.set_sock_opt_ = CreateMaybeMessage< ::SetSocketOpt >(GetArena());
  }
  return command_.set_sock_opt_;
}
inline ::SetSocketOpt* Command::mutable_set_sock_opt() {
  // @@protoc_insertion_point(field_mutable:Command.set_sock_opt)
  return _internal_mutable_set_sock_opt();
}

// .IoctlReal ioctl_real = 5;
inline bool Command::_internal_has_ioctl_real() const {
  return command_case() == kIoctlReal;
}
inline bool Command::has_ioctl_real() const {
  return _internal_has_ioctl_real();
}
inline void Command::set_has_ioctl_real() {
  _oneof_case_[0] = kIoctlReal;
}
inline void Command::clear_ioctl_real() {
  if (_internal_has_ioctl_real()) {
    if (GetArena() == nullptr) {
      delete command_.ioctl_real_;
    }
    clear_has_command();
  }
}
inline ::IoctlReal* Command::release_ioctl_real() {
  // @@protoc_insertion_point(field_release:Command.ioctl_real)
  if (_internal_has_ioctl_real()) {
    clear_has_command();
      ::IoctlReal* temp = command_.ioctl_real_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.ioctl_real_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IoctlReal& Command::_internal_ioctl_real() const {
  return _internal_has_ioctl_real()
      ? *command_.ioctl_real_
      : reinterpret_cast< ::IoctlReal&>(::_IoctlReal_default_instance_);
}
inline const ::IoctlReal& Command::ioctl_real() const {
  // @@protoc_insertion_point(field_get:Command.ioctl_real)
  return _internal_ioctl_real();
}
inline ::IoctlReal* Command::unsafe_arena_release_ioctl_real() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.ioctl_real)
  if (_internal_has_ioctl_real()) {
    clear_has_command();
    ::IoctlReal* temp = command_.ioctl_real_;
    command_.ioctl_real_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_ioctl_real(::IoctlReal* ioctl_real) {
  clear_command();
  if (ioctl_real) {
    set_has_ioctl_real();
    command_.ioctl_real_ = ioctl_real;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.ioctl_real)
}
inline ::IoctlReal* Command::_internal_mutable_ioctl_real() {
  if (!_internal_has_ioctl_real()) {
    clear_command();
    set_has_ioctl_real();
    command_.ioctl_real_ = CreateMaybeMessage< ::IoctlReal >(GetArena());
  }
  return command_.ioctl_real_;
}
inline ::IoctlReal* Command::mutable_ioctl_real() {
  // @@protoc_insertion_point(field_mutable:Command.ioctl_real)
  return _internal_mutable_ioctl_real();
}

// .ConnectX connectx = 6;
inline bool Command::_internal_has_connectx() const {
  return command_case() == kConnectx;
}
inline bool Command::has_connectx() const {
  return _internal_has_connectx();
}
inline void Command::set_has_connectx() {
  _oneof_case_[0] = kConnectx;
}
inline void Command::clear_connectx() {
  if (_internal_has_connectx()) {
    if (GetArena() == nullptr) {
      delete command_.connectx_;
    }
    clear_has_command();
  }
}
inline ::ConnectX* Command::release_connectx() {
  // @@protoc_insertion_point(field_release:Command.connectx)
  if (_internal_has_connectx()) {
    clear_has_command();
      ::ConnectX* temp = command_.connectx_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.connectx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ConnectX& Command::_internal_connectx() const {
  return _internal_has_connectx()
      ? *command_.connectx_
      : reinterpret_cast< ::ConnectX&>(::_ConnectX_default_instance_);
}
inline const ::ConnectX& Command::connectx() const {
  // @@protoc_insertion_point(field_get:Command.connectx)
  return _internal_connectx();
}
inline ::ConnectX* Command::unsafe_arena_release_connectx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.connectx)
  if (_internal_has_connectx()) {
    clear_has_command();
    ::ConnectX* temp = command_.connectx_;
    command_.connectx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_connectx(::ConnectX* connectx) {
  clear_command();
  if (connectx) {
    set_has_connectx();
    command_.connectx_ = connectx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.connectx)
}
inline ::ConnectX* Command::_internal_mutable_connectx() {
  if (!_internal_has_connectx()) {
    clear_command();
    set_has_connectx();
    command_.connectx_ = CreateMaybeMessage< ::ConnectX >(GetArena());
  }
  return command_.connectx_;
}
inline ::ConnectX* Command::mutable_connectx() {
  // @@protoc_insertion_point(field_mutable:Command.connectx)
  return _internal_mutable_connectx();
}

// .Connect connect = 7;
inline bool Command::_internal_has_connect() const {
  return command_case() == kConnect;
}
inline bool Command::has_connect() const {
  return _internal_has_connect();
}
inline void Command::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void Command::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArena() == nullptr) {
      delete command_.connect_;
    }
    clear_has_command();
  }
}
inline ::Connect* Command::release_connect() {
  // @@protoc_insertion_point(field_release:Command.connect)
  if (_internal_has_connect()) {
    clear_has_command();
      ::Connect* temp = command_.connect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Connect& Command::_internal_connect() const {
  return _internal_has_connect()
      ? *command_.connect_
      : reinterpret_cast< ::Connect&>(::_Connect_default_instance_);
}
inline const ::Connect& Command::connect() const {
  // @@protoc_insertion_point(field_get:Command.connect)
  return _internal_connect();
}
inline ::Connect* Command::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.connect)
  if (_internal_has_connect()) {
    clear_has_command();
    ::Connect* temp = command_.connect_;
    command_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_connect(::Connect* connect) {
  clear_command();
  if (connect) {
    set_has_connect();
    command_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.connect)
}
inline ::Connect* Command::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_command();
    set_has_connect();
    command_.connect_ = CreateMaybeMessage< ::Connect >(GetArena());
  }
  return command_.connect_;
}
inline ::Connect* Command::mutable_connect() {
  // @@protoc_insertion_point(field_mutable:Command.connect)
  return _internal_mutable_connect();
}

// .Listen listen = 8;
inline bool Command::_internal_has_listen() const {
  return command_case() == kListen;
}
inline bool Command::has_listen() const {
  return _internal_has_listen();
}
inline void Command::set_has_listen() {
  _oneof_case_[0] = kListen;
}
inline void Command::clear_listen() {
  if (_internal_has_listen()) {
    if (GetArena() == nullptr) {
      delete command_.listen_;
    }
    clear_has_command();
  }
}
inline ::Listen* Command::release_listen() {
  // @@protoc_insertion_point(field_release:Command.listen)
  if (_internal_has_listen()) {
    clear_has_command();
      ::Listen* temp = command_.listen_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.listen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Listen& Command::_internal_listen() const {
  return _internal_has_listen()
      ? *command_.listen_
      : reinterpret_cast< ::Listen&>(::_Listen_default_instance_);
}
inline const ::Listen& Command::listen() const {
  // @@protoc_insertion_point(field_get:Command.listen)
  return _internal_listen();
}
inline ::Listen* Command::unsafe_arena_release_listen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.listen)
  if (_internal_has_listen()) {
    clear_has_command();
    ::Listen* temp = command_.listen_;
    command_.listen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_listen(::Listen* listen) {
  clear_command();
  if (listen) {
    set_has_listen();
    command_.listen_ = listen;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.listen)
}
inline ::Listen* Command::_internal_mutable_listen() {
  if (!_internal_has_listen()) {
    clear_command();
    set_has_listen();
    command_.listen_ = CreateMaybeMessage< ::Listen >(GetArena());
  }
  return command_.listen_;
}
inline ::Listen* Command::mutable_listen() {
  // @@protoc_insertion_point(field_mutable:Command.listen)
  return _internal_mutable_listen();
}

// .DisconnectX disconnectx = 9;
inline bool Command::_internal_has_disconnectx() const {
  return command_case() == kDisconnectx;
}
inline bool Command::has_disconnectx() const {
  return _internal_has_disconnectx();
}
inline void Command::set_has_disconnectx() {
  _oneof_case_[0] = kDisconnectx;
}
inline void Command::clear_disconnectx() {
  if (_internal_has_disconnectx()) {
    if (GetArena() == nullptr) {
      delete command_.disconnectx_;
    }
    clear_has_command();
  }
}
inline ::DisconnectX* Command::release_disconnectx() {
  // @@protoc_insertion_point(field_release:Command.disconnectx)
  if (_internal_has_disconnectx()) {
    clear_has_command();
      ::DisconnectX* temp = command_.disconnectx_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.disconnectx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DisconnectX& Command::_internal_disconnectx() const {
  return _internal_has_disconnectx()
      ? *command_.disconnectx_
      : reinterpret_cast< ::DisconnectX&>(::_DisconnectX_default_instance_);
}
inline const ::DisconnectX& Command::disconnectx() const {
  // @@protoc_insertion_point(field_get:Command.disconnectx)
  return _internal_disconnectx();
}
inline ::DisconnectX* Command::unsafe_arena_release_disconnectx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.disconnectx)
  if (_internal_has_disconnectx()) {
    clear_has_command();
    ::DisconnectX* temp = command_.disconnectx_;
    command_.disconnectx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_disconnectx(::DisconnectX* disconnectx) {
  clear_command();
  if (disconnectx) {
    set_has_disconnectx();
    command_.disconnectx_ = disconnectx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.disconnectx)
}
inline ::DisconnectX* Command::_internal_mutable_disconnectx() {
  if (!_internal_has_disconnectx()) {
    clear_command();
    set_has_disconnectx();
    command_.disconnectx_ = CreateMaybeMessage< ::DisconnectX >(GetArena());
  }
  return command_.disconnectx_;
}
inline ::DisconnectX* Command::mutable_disconnectx() {
  // @@protoc_insertion_point(field_mutable:Command.disconnectx)
  return _internal_mutable_disconnectx();
}

// .GetSocketOpt get_sock_opt = 10;
inline bool Command::_internal_has_get_sock_opt() const {
  return command_case() == kGetSockOpt;
}
inline bool Command::has_get_sock_opt() const {
  return _internal_has_get_sock_opt();
}
inline void Command::set_has_get_sock_opt() {
  _oneof_case_[0] = kGetSockOpt;
}
inline void Command::clear_get_sock_opt() {
  if (_internal_has_get_sock_opt()) {
    if (GetArena() == nullptr) {
      delete command_.get_sock_opt_;
    }
    clear_has_command();
  }
}
inline ::GetSocketOpt* Command::release_get_sock_opt() {
  // @@protoc_insertion_point(field_release:Command.get_sock_opt)
  if (_internal_has_get_sock_opt()) {
    clear_has_command();
      ::GetSocketOpt* temp = command_.get_sock_opt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.get_sock_opt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GetSocketOpt& Command::_internal_get_sock_opt() const {
  return _internal_has_get_sock_opt()
      ? *command_.get_sock_opt_
      : reinterpret_cast< ::GetSocketOpt&>(::_GetSocketOpt_default_instance_);
}
inline const ::GetSocketOpt& Command::get_sock_opt() const {
  // @@protoc_insertion_point(field_get:Command.get_sock_opt)
  return _internal_get_sock_opt();
}
inline ::GetSocketOpt* Command::unsafe_arena_release_get_sock_opt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.get_sock_opt)
  if (_internal_has_get_sock_opt()) {
    clear_has_command();
    ::GetSocketOpt* temp = command_.get_sock_opt_;
    command_.get_sock_opt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_get_sock_opt(::GetSocketOpt* get_sock_opt) {
  clear_command();
  if (get_sock_opt) {
    set_has_get_sock_opt();
    command_.get_sock_opt_ = get_sock_opt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.get_sock_opt)
}
inline ::GetSocketOpt* Command::_internal_mutable_get_sock_opt() {
  if (!_internal_has_get_sock_opt()) {
    clear_command();
    set_has_get_sock_opt();
    command_.get_sock_opt_ = CreateMaybeMessage< ::GetSocketOpt >(GetArena());
  }
  return command_.get_sock_opt_;
}
inline ::GetSocketOpt* Command::mutable_get_sock_opt() {
  // @@protoc_insertion_point(field_mutable:Command.get_sock_opt)
  return _internal_mutable_get_sock_opt();
}

// .Bind bind = 11;
inline bool Command::_internal_has_bind() const {
  return command_case() == kBind;
}
inline bool Command::has_bind() const {
  return _internal_has_bind();
}
inline void Command::set_has_bind() {
  _oneof_case_[0] = kBind;
}
inline void Command::clear_bind() {
  if (_internal_has_bind()) {
    if (GetArena() == nullptr) {
      delete command_.bind_;
    }
    clear_has_command();
  }
}
inline ::Bind* Command::release_bind() {
  // @@protoc_insertion_point(field_release:Command.bind)
  if (_internal_has_bind()) {
    clear_has_command();
      ::Bind* temp = command_.bind_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.bind_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Bind& Command::_internal_bind() const {
  return _internal_has_bind()
      ? *command_.bind_
      : reinterpret_cast< ::Bind&>(::_Bind_default_instance_);
}
inline const ::Bind& Command::bind() const {
  // @@protoc_insertion_point(field_get:Command.bind)
  return _internal_bind();
}
inline ::Bind* Command::unsafe_arena_release_bind() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.bind)
  if (_internal_has_bind()) {
    clear_has_command();
    ::Bind* temp = command_.bind_;
    command_.bind_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_bind(::Bind* bind) {
  clear_command();
  if (bind) {
    set_has_bind();
    command_.bind_ = bind;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.bind)
}
inline ::Bind* Command::_internal_mutable_bind() {
  if (!_internal_has_bind()) {
    clear_command();
    set_has_bind();
    command_.bind_ = CreateMaybeMessage< ::Bind >(GetArena());
  }
  return command_.bind_;
}
inline ::Bind* Command::mutable_bind() {
  // @@protoc_insertion_point(field_mutable:Command.bind)
  return _internal_mutable_bind();
}

// .Accept accept = 12;
inline bool Command::_internal_has_accept() const {
  return command_case() == kAccept;
}
inline bool Command::has_accept() const {
  return _internal_has_accept();
}
inline void Command::set_has_accept() {
  _oneof_case_[0] = kAccept;
}
inline void Command::clear_accept() {
  if (_internal_has_accept()) {
    if (GetArena() == nullptr) {
      delete command_.accept_;
    }
    clear_has_command();
  }
}
inline ::Accept* Command::release_accept() {
  // @@protoc_insertion_point(field_release:Command.accept)
  if (_internal_has_accept()) {
    clear_has_command();
      ::Accept* temp = command_.accept_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Accept& Command::_internal_accept() const {
  return _internal_has_accept()
      ? *command_.accept_
      : reinterpret_cast< ::Accept&>(::_Accept_default_instance_);
}
inline const ::Accept& Command::accept() const {
  // @@protoc_insertion_point(field_get:Command.accept)
  return _internal_accept();
}
inline ::Accept* Command::unsafe_arena_release_accept() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.accept)
  if (_internal_has_accept()) {
    clear_has_command();
    ::Accept* temp = command_.accept_;
    command_.accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_accept(::Accept* accept) {
  clear_command();
  if (accept) {
    set_has_accept();
    command_.accept_ = accept;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.accept)
}
inline ::Accept* Command::_internal_mutable_accept() {
  if (!_internal_has_accept()) {
    clear_command();
    set_has_accept();
    command_.accept_ = CreateMaybeMessage< ::Accept >(GetArena());
  }
  return command_.accept_;
}
inline ::Accept* Command::mutable_accept() {
  // @@protoc_insertion_point(field_mutable:Command.accept)
  return _internal_mutable_accept();
}

// .Socket socket = 13;
inline bool Command::_internal_has_socket() const {
  return command_case() == kSocket;
}
inline bool Command::has_socket() const {
  return _internal_has_socket();
}
inline void Command::set_has_socket() {
  _oneof_case_[0] = kSocket;
}
inline void Command::clear_socket() {
  if (_internal_has_socket()) {
    if (GetArena() == nullptr) {
      delete command_.socket_;
    }
    clear_has_command();
  }
}
inline ::Socket* Command::release_socket() {
  // @@protoc_insertion_point(field_release:Command.socket)
  if (_internal_has_socket()) {
    clear_has_command();
      ::Socket* temp = command_.socket_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.socket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Socket& Command::_internal_socket() const {
  return _internal_has_socket()
      ? *command_.socket_
      : reinterpret_cast< ::Socket&>(::_Socket_default_instance_);
}
inline const ::Socket& Command::socket() const {
  // @@protoc_insertion_point(field_get:Command.socket)
  return _internal_socket();
}
inline ::Socket* Command::unsafe_arena_release_socket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.socket)
  if (_internal_has_socket()) {
    clear_has_command();
    ::Socket* temp = command_.socket_;
    command_.socket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_socket(::Socket* socket) {
  clear_command();
  if (socket) {
    set_has_socket();
    command_.socket_ = socket;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.socket)
}
inline ::Socket* Command::_internal_mutable_socket() {
  if (!_internal_has_socket()) {
    clear_command();
    set_has_socket();
    command_.socket_ = CreateMaybeMessage< ::Socket >(GetArena());
  }
  return command_.socket_;
}
inline ::Socket* Command::mutable_socket() {
  // @@protoc_insertion_point(field_mutable:Command.socket)
  return _internal_mutable_socket();
}

// .Close close = 14;
inline bool Command::_internal_has_close() const {
  return command_case() == kClose;
}
inline bool Command::has_close() const {
  return _internal_has_close();
}
inline void Command::set_has_close() {
  _oneof_case_[0] = kClose;
}
inline void Command::clear_close() {
  if (_internal_has_close()) {
    if (GetArena() == nullptr) {
      delete command_.close_;
    }
    clear_has_command();
  }
}
inline ::Close* Command::release_close() {
  // @@protoc_insertion_point(field_release:Command.close)
  if (_internal_has_close()) {
    clear_has_command();
      ::Close* temp = command_.close_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Close& Command::_internal_close() const {
  return _internal_has_close()
      ? *command_.close_
      : reinterpret_cast< ::Close&>(::_Close_default_instance_);
}
inline const ::Close& Command::close() const {
  // @@protoc_insertion_point(field_get:Command.close)
  return _internal_close();
}
inline ::Close* Command::unsafe_arena_release_close() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.close)
  if (_internal_has_close()) {
    clear_has_command();
    ::Close* temp = command_.close_;
    command_.close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_close(::Close* close) {
  clear_command();
  if (close) {
    set_has_close();
    command_.close_ = close;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.close)
}
inline ::Close* Command::_internal_mutable_close() {
  if (!_internal_has_close()) {
    clear_command();
    set_has_close();
    command_.close_ = CreateMaybeMessage< ::Close >(GetArena());
  }
  return command_.close_;
}
inline ::Close* Command::mutable_close() {
  // @@protoc_insertion_point(field_mutable:Command.close)
  return _internal_mutable_close();
}

// .ClearAll clear_all = 15;
inline bool Command::_internal_has_clear_all() const {
  return command_case() == kClearAll;
}
inline bool Command::has_clear_all() const {
  return _internal_has_clear_all();
}
inline void Command::set_has_clear_all() {
  _oneof_case_[0] = kClearAll;
}
inline void Command::clear_clear_all() {
  if (_internal_has_clear_all()) {
    if (GetArena() == nullptr) {
      delete command_.clear_all_;
    }
    clear_has_command();
  }
}
inline ::ClearAll* Command::release_clear_all() {
  // @@protoc_insertion_point(field_release:Command.clear_all)
  if (_internal_has_clear_all()) {
    clear_has_command();
      ::ClearAll* temp = command_.clear_all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.clear_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClearAll& Command::_internal_clear_all() const {
  return _internal_has_clear_all()
      ? *command_.clear_all_
      : reinterpret_cast< ::ClearAll&>(::_ClearAll_default_instance_);
}
inline const ::ClearAll& Command::clear_all() const {
  // @@protoc_insertion_point(field_get:Command.clear_all)
  return _internal_clear_all();
}
inline ::ClearAll* Command::unsafe_arena_release_clear_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.clear_all)
  if (_internal_has_clear_all()) {
    clear_has_command();
    ::ClearAll* temp = command_.clear_all_;
    command_.clear_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_clear_all(::ClearAll* clear_all) {
  clear_command();
  if (clear_all) {
    set_has_clear_all();
    command_.clear_all_ = clear_all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.clear_all)
}
inline ::ClearAll* Command::_internal_mutable_clear_all() {
  if (!_internal_has_clear_all()) {
    clear_command();
    set_has_clear_all();
    command_.clear_all_ = CreateMaybeMessage< ::ClearAll >(GetArena());
  }
  return command_.clear_all_;
}
inline ::ClearAll* Command::mutable_clear_all() {
  // @@protoc_insertion_point(field_mutable:Command.clear_all)
  return _internal_mutable_clear_all();
}

// .NecpMatchPolicy necp_match_policy = 16;
inline bool Command::_internal_has_necp_match_policy() const {
  return command_case() == kNecpMatchPolicy;
}
inline bool Command::has_necp_match_policy() const {
  return _internal_has_necp_match_policy();
}
inline void Command::set_has_necp_match_policy() {
  _oneof_case_[0] = kNecpMatchPolicy;
}
inline void Command::clear_necp_match_policy() {
  if (_internal_has_necp_match_policy()) {
    if (GetArena() == nullptr) {
      delete command_.necp_match_policy_;
    }
    clear_has_command();
  }
}
inline ::NecpMatchPolicy* Command::release_necp_match_policy() {
  // @@protoc_insertion_point(field_release:Command.necp_match_policy)
  if (_internal_has_necp_match_policy()) {
    clear_has_command();
      ::NecpMatchPolicy* temp = command_.necp_match_policy_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.necp_match_policy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpMatchPolicy& Command::_internal_necp_match_policy() const {
  return _internal_has_necp_match_policy()
      ? *command_.necp_match_policy_
      : reinterpret_cast< ::NecpMatchPolicy&>(::_NecpMatchPolicy_default_instance_);
}
inline const ::NecpMatchPolicy& Command::necp_match_policy() const {
  // @@protoc_insertion_point(field_get:Command.necp_match_policy)
  return _internal_necp_match_policy();
}
inline ::NecpMatchPolicy* Command::unsafe_arena_release_necp_match_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.necp_match_policy)
  if (_internal_has_necp_match_policy()) {
    clear_has_command();
    ::NecpMatchPolicy* temp = command_.necp_match_policy_;
    command_.necp_match_policy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_necp_match_policy(::NecpMatchPolicy* necp_match_policy) {
  clear_command();
  if (necp_match_policy) {
    set_has_necp_match_policy();
    command_.necp_match_policy_ = necp_match_policy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.necp_match_policy)
}
inline ::NecpMatchPolicy* Command::_internal_mutable_necp_match_policy() {
  if (!_internal_has_necp_match_policy()) {
    clear_command();
    set_has_necp_match_policy();
    command_.necp_match_policy_ = CreateMaybeMessage< ::NecpMatchPolicy >(GetArena());
  }
  return command_.necp_match_policy_;
}
inline ::NecpMatchPolicy* Command::mutable_necp_match_policy() {
  // @@protoc_insertion_point(field_mutable:Command.necp_match_policy)
  return _internal_mutable_necp_match_policy();
}

// .NecpOpen necp_open = 17;
inline bool Command::_internal_has_necp_open() const {
  return command_case() == kNecpOpen;
}
inline bool Command::has_necp_open() const {
  return _internal_has_necp_open();
}
inline void Command::set_has_necp_open() {
  _oneof_case_[0] = kNecpOpen;
}
inline void Command::clear_necp_open() {
  if (_internal_has_necp_open()) {
    if (GetArena() == nullptr) {
      delete command_.necp_open_;
    }
    clear_has_command();
  }
}
inline ::NecpOpen* Command::release_necp_open() {
  // @@protoc_insertion_point(field_release:Command.necp_open)
  if (_internal_has_necp_open()) {
    clear_has_command();
      ::NecpOpen* temp = command_.necp_open_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.necp_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpOpen& Command::_internal_necp_open() const {
  return _internal_has_necp_open()
      ? *command_.necp_open_
      : reinterpret_cast< ::NecpOpen&>(::_NecpOpen_default_instance_);
}
inline const ::NecpOpen& Command::necp_open() const {
  // @@protoc_insertion_point(field_get:Command.necp_open)
  return _internal_necp_open();
}
inline ::NecpOpen* Command::unsafe_arena_release_necp_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.necp_open)
  if (_internal_has_necp_open()) {
    clear_has_command();
    ::NecpOpen* temp = command_.necp_open_;
    command_.necp_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_necp_open(::NecpOpen* necp_open) {
  clear_command();
  if (necp_open) {
    set_has_necp_open();
    command_.necp_open_ = necp_open;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.necp_open)
}
inline ::NecpOpen* Command::_internal_mutable_necp_open() {
  if (!_internal_has_necp_open()) {
    clear_command();
    set_has_necp_open();
    command_.necp_open_ = CreateMaybeMessage< ::NecpOpen >(GetArena());
  }
  return command_.necp_open_;
}
inline ::NecpOpen* Command::mutable_necp_open() {
  // @@protoc_insertion_point(field_mutable:Command.necp_open)
  return _internal_mutable_necp_open();
}

// .NecpClientAction necp_client_action = 18;
inline bool Command::_internal_has_necp_client_action() const {
  return command_case() == kNecpClientAction;
}
inline bool Command::has_necp_client_action() const {
  return _internal_has_necp_client_action();
}
inline void Command::set_has_necp_client_action() {
  _oneof_case_[0] = kNecpClientAction;
}
inline void Command::clear_necp_client_action() {
  if (_internal_has_necp_client_action()) {
    if (GetArena() == nullptr) {
      delete command_.necp_client_action_;
    }
    clear_has_command();
  }
}
inline ::NecpClientAction* Command::release_necp_client_action() {
  // @@protoc_insertion_point(field_release:Command.necp_client_action)
  if (_internal_has_necp_client_action()) {
    clear_has_command();
      ::NecpClientAction* temp = command_.necp_client_action_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.necp_client_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpClientAction& Command::_internal_necp_client_action() const {
  return _internal_has_necp_client_action()
      ? *command_.necp_client_action_
      : reinterpret_cast< ::NecpClientAction&>(::_NecpClientAction_default_instance_);
}
inline const ::NecpClientAction& Command::necp_client_action() const {
  // @@protoc_insertion_point(field_get:Command.necp_client_action)
  return _internal_necp_client_action();
}
inline ::NecpClientAction* Command::unsafe_arena_release_necp_client_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.necp_client_action)
  if (_internal_has_necp_client_action()) {
    clear_has_command();
    ::NecpClientAction* temp = command_.necp_client_action_;
    command_.necp_client_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_necp_client_action(::NecpClientAction* necp_client_action) {
  clear_command();
  if (necp_client_action) {
    set_has_necp_client_action();
    command_.necp_client_action_ = necp_client_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.necp_client_action)
}
inline ::NecpClientAction* Command::_internal_mutable_necp_client_action() {
  if (!_internal_has_necp_client_action()) {
    clear_command();
    set_has_necp_client_action();
    command_.necp_client_action_ = CreateMaybeMessage< ::NecpClientAction >(GetArena());
  }
  return command_.necp_client_action_;
}
inline ::NecpClientAction* Command::mutable_necp_client_action() {
  // @@protoc_insertion_point(field_mutable:Command.necp_client_action)
  return _internal_mutable_necp_client_action();
}

// .NecpSessionOpen necp_session_open = 19;
inline bool Command::_internal_has_necp_session_open() const {
  return command_case() == kNecpSessionOpen;
}
inline bool Command::has_necp_session_open() const {
  return _internal_has_necp_session_open();
}
inline void Command::set_has_necp_session_open() {
  _oneof_case_[0] = kNecpSessionOpen;
}
inline void Command::clear_necp_session_open() {
  if (_internal_has_necp_session_open()) {
    if (GetArena() == nullptr) {
      delete command_.necp_session_open_;
    }
    clear_has_command();
  }
}
inline ::NecpSessionOpen* Command::release_necp_session_open() {
  // @@protoc_insertion_point(field_release:Command.necp_session_open)
  if (_internal_has_necp_session_open()) {
    clear_has_command();
      ::NecpSessionOpen* temp = command_.necp_session_open_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.necp_session_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpSessionOpen& Command::_internal_necp_session_open() const {
  return _internal_has_necp_session_open()
      ? *command_.necp_session_open_
      : reinterpret_cast< ::NecpSessionOpen&>(::_NecpSessionOpen_default_instance_);
}
inline const ::NecpSessionOpen& Command::necp_session_open() const {
  // @@protoc_insertion_point(field_get:Command.necp_session_open)
  return _internal_necp_session_open();
}
inline ::NecpSessionOpen* Command::unsafe_arena_release_necp_session_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.necp_session_open)
  if (_internal_has_necp_session_open()) {
    clear_has_command();
    ::NecpSessionOpen* temp = command_.necp_session_open_;
    command_.necp_session_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_necp_session_open(::NecpSessionOpen* necp_session_open) {
  clear_command();
  if (necp_session_open) {
    set_has_necp_session_open();
    command_.necp_session_open_ = necp_session_open;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.necp_session_open)
}
inline ::NecpSessionOpen* Command::_internal_mutable_necp_session_open() {
  if (!_internal_has_necp_session_open()) {
    clear_command();
    set_has_necp_session_open();
    command_.necp_session_open_ = CreateMaybeMessage< ::NecpSessionOpen >(GetArena());
  }
  return command_.necp_session_open_;
}
inline ::NecpSessionOpen* Command::mutable_necp_session_open() {
  // @@protoc_insertion_point(field_mutable:Command.necp_session_open)
  return _internal_mutable_necp_session_open();
}

// .NecpSessionAction necp_session_action = 20;
inline bool Command::_internal_has_necp_session_action() const {
  return command_case() == kNecpSessionAction;
}
inline bool Command::has_necp_session_action() const {
  return _internal_has_necp_session_action();
}
inline void Command::set_has_necp_session_action() {
  _oneof_case_[0] = kNecpSessionAction;
}
inline void Command::clear_necp_session_action() {
  if (_internal_has_necp_session_action()) {
    if (GetArena() == nullptr) {
      delete command_.necp_session_action_;
    }
    clear_has_command();
  }
}
inline ::NecpSessionAction* Command::release_necp_session_action() {
  // @@protoc_insertion_point(field_release:Command.necp_session_action)
  if (_internal_has_necp_session_action()) {
    clear_has_command();
      ::NecpSessionAction* temp = command_.necp_session_action_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.necp_session_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpSessionAction& Command::_internal_necp_session_action() const {
  return _internal_has_necp_session_action()
      ? *command_.necp_session_action_
      : reinterpret_cast< ::NecpSessionAction&>(::_NecpSessionAction_default_instance_);
}
inline const ::NecpSessionAction& Command::necp_session_action() const {
  // @@protoc_insertion_point(field_get:Command.necp_session_action)
  return _internal_necp_session_action();
}
inline ::NecpSessionAction* Command::unsafe_arena_release_necp_session_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.necp_session_action)
  if (_internal_has_necp_session_action()) {
    clear_has_command();
    ::NecpSessionAction* temp = command_.necp_session_action_;
    command_.necp_session_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_necp_session_action(::NecpSessionAction* necp_session_action) {
  clear_command();
  if (necp_session_action) {
    set_has_necp_session_action();
    command_.necp_session_action_ = necp_session_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.necp_session_action)
}
inline ::NecpSessionAction* Command::_internal_mutable_necp_session_action() {
  if (!_internal_has_necp_session_action()) {
    clear_command();
    set_has_necp_session_action();
    command_.necp_session_action_ = CreateMaybeMessage< ::NecpSessionAction >(GetArena());
  }
  return command_.necp_session_action_;
}
inline ::NecpSessionAction* Command::mutable_necp_session_action() {
  // @@protoc_insertion_point(field_mutable:Command.necp_session_action)
  return _internal_mutable_necp_session_action();
}

// .AcceptNocancel accept_nocancel = 21;
inline bool Command::_internal_has_accept_nocancel() const {
  return command_case() == kAcceptNocancel;
}
inline bool Command::has_accept_nocancel() const {
  return _internal_has_accept_nocancel();
}
inline void Command::set_has_accept_nocancel() {
  _oneof_case_[0] = kAcceptNocancel;
}
inline void Command::clear_accept_nocancel() {
  if (_internal_has_accept_nocancel()) {
    if (GetArena() == nullptr) {
      delete command_.accept_nocancel_;
    }
    clear_has_command();
  }
}
inline ::AcceptNocancel* Command::release_accept_nocancel() {
  // @@protoc_insertion_point(field_release:Command.accept_nocancel)
  if (_internal_has_accept_nocancel()) {
    clear_has_command();
      ::AcceptNocancel* temp = command_.accept_nocancel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.accept_nocancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcceptNocancel& Command::_internal_accept_nocancel() const {
  return _internal_has_accept_nocancel()
      ? *command_.accept_nocancel_
      : reinterpret_cast< ::AcceptNocancel&>(::_AcceptNocancel_default_instance_);
}
inline const ::AcceptNocancel& Command::accept_nocancel() const {
  // @@protoc_insertion_point(field_get:Command.accept_nocancel)
  return _internal_accept_nocancel();
}
inline ::AcceptNocancel* Command::unsafe_arena_release_accept_nocancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.accept_nocancel)
  if (_internal_has_accept_nocancel()) {
    clear_has_command();
    ::AcceptNocancel* temp = command_.accept_nocancel_;
    command_.accept_nocancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_accept_nocancel(::AcceptNocancel* accept_nocancel) {
  clear_command();
  if (accept_nocancel) {
    set_has_accept_nocancel();
    command_.accept_nocancel_ = accept_nocancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.accept_nocancel)
}
inline ::AcceptNocancel* Command::_internal_mutable_accept_nocancel() {
  if (!_internal_has_accept_nocancel()) {
    clear_command();
    set_has_accept_nocancel();
    command_.accept_nocancel_ = CreateMaybeMessage< ::AcceptNocancel >(GetArena());
  }
  return command_.accept_nocancel_;
}
inline ::AcceptNocancel* Command::mutable_accept_nocancel() {
  // @@protoc_insertion_point(field_mutable:Command.accept_nocancel)
  return _internal_mutable_accept_nocancel();
}

// .ConnectNocancel connect_nocancel = 22;
inline bool Command::_internal_has_connect_nocancel() const {
  return command_case() == kConnectNocancel;
}
inline bool Command::has_connect_nocancel() const {
  return _internal_has_connect_nocancel();
}
inline void Command::set_has_connect_nocancel() {
  _oneof_case_[0] = kConnectNocancel;
}
inline void Command::clear_connect_nocancel() {
  if (_internal_has_connect_nocancel()) {
    if (GetArena() == nullptr) {
      delete command_.connect_nocancel_;
    }
    clear_has_command();
  }
}
inline ::ConnectNocancel* Command::release_connect_nocancel() {
  // @@protoc_insertion_point(field_release:Command.connect_nocancel)
  if (_internal_has_connect_nocancel()) {
    clear_has_command();
      ::ConnectNocancel* temp = command_.connect_nocancel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.connect_nocancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ConnectNocancel& Command::_internal_connect_nocancel() const {
  return _internal_has_connect_nocancel()
      ? *command_.connect_nocancel_
      : reinterpret_cast< ::ConnectNocancel&>(::_ConnectNocancel_default_instance_);
}
inline const ::ConnectNocancel& Command::connect_nocancel() const {
  // @@protoc_insertion_point(field_get:Command.connect_nocancel)
  return _internal_connect_nocancel();
}
inline ::ConnectNocancel* Command::unsafe_arena_release_connect_nocancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.connect_nocancel)
  if (_internal_has_connect_nocancel()) {
    clear_has_command();
    ::ConnectNocancel* temp = command_.connect_nocancel_;
    command_.connect_nocancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_connect_nocancel(::ConnectNocancel* connect_nocancel) {
  clear_command();
  if (connect_nocancel) {
    set_has_connect_nocancel();
    command_.connect_nocancel_ = connect_nocancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.connect_nocancel)
}
inline ::ConnectNocancel* Command::_internal_mutable_connect_nocancel() {
  if (!_internal_has_connect_nocancel()) {
    clear_command();
    set_has_connect_nocancel();
    command_.connect_nocancel_ = CreateMaybeMessage< ::ConnectNocancel >(GetArena());
  }
  return command_.connect_nocancel_;
}
inline ::ConnectNocancel* Command::mutable_connect_nocancel() {
  // @@protoc_insertion_point(field_mutable:Command.connect_nocancel)
  return _internal_mutable_connect_nocancel();
}

// .Getpeername getpeername = 23;
inline bool Command::_internal_has_getpeername() const {
  return command_case() == kGetpeername;
}
inline bool Command::has_getpeername() const {
  return _internal_has_getpeername();
}
inline void Command::set_has_getpeername() {
  _oneof_case_[0] = kGetpeername;
}
inline void Command::clear_getpeername() {
  if (_internal_has_getpeername()) {
    if (GetArena() == nullptr) {
      delete command_.getpeername_;
    }
    clear_has_command();
  }
}
inline ::Getpeername* Command::release_getpeername() {
  // @@protoc_insertion_point(field_release:Command.getpeername)
  if (_internal_has_getpeername()) {
    clear_has_command();
      ::Getpeername* temp = command_.getpeername_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.getpeername_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Getpeername& Command::_internal_getpeername() const {
  return _internal_has_getpeername()
      ? *command_.getpeername_
      : reinterpret_cast< ::Getpeername&>(::_Getpeername_default_instance_);
}
inline const ::Getpeername& Command::getpeername() const {
  // @@protoc_insertion_point(field_get:Command.getpeername)
  return _internal_getpeername();
}
inline ::Getpeername* Command::unsafe_arena_release_getpeername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.getpeername)
  if (_internal_has_getpeername()) {
    clear_has_command();
    ::Getpeername* temp = command_.getpeername_;
    command_.getpeername_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_getpeername(::Getpeername* getpeername) {
  clear_command();
  if (getpeername) {
    set_has_getpeername();
    command_.getpeername_ = getpeername;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.getpeername)
}
inline ::Getpeername* Command::_internal_mutable_getpeername() {
  if (!_internal_has_getpeername()) {
    clear_command();
    set_has_getpeername();
    command_.getpeername_ = CreateMaybeMessage< ::Getpeername >(GetArena());
  }
  return command_.getpeername_;
}
inline ::Getpeername* Command::mutable_getpeername() {
  // @@protoc_insertion_point(field_mutable:Command.getpeername)
  return _internal_mutable_getpeername();
}

// .Getsockname getsockname = 24;
inline bool Command::_internal_has_getsockname() const {
  return command_case() == kGetsockname;
}
inline bool Command::has_getsockname() const {
  return _internal_has_getsockname();
}
inline void Command::set_has_getsockname() {
  _oneof_case_[0] = kGetsockname;
}
inline void Command::clear_getsockname() {
  if (_internal_has_getsockname()) {
    if (GetArena() == nullptr) {
      delete command_.getsockname_;
    }
    clear_has_command();
  }
}
inline ::Getsockname* Command::release_getsockname() {
  // @@protoc_insertion_point(field_release:Command.getsockname)
  if (_internal_has_getsockname()) {
    clear_has_command();
      ::Getsockname* temp = command_.getsockname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.getsockname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Getsockname& Command::_internal_getsockname() const {
  return _internal_has_getsockname()
      ? *command_.getsockname_
      : reinterpret_cast< ::Getsockname&>(::_Getsockname_default_instance_);
}
inline const ::Getsockname& Command::getsockname() const {
  // @@protoc_insertion_point(field_get:Command.getsockname)
  return _internal_getsockname();
}
inline ::Getsockname* Command::unsafe_arena_release_getsockname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.getsockname)
  if (_internal_has_getsockname()) {
    clear_has_command();
    ::Getsockname* temp = command_.getsockname_;
    command_.getsockname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_getsockname(::Getsockname* getsockname) {
  clear_command();
  if (getsockname) {
    set_has_getsockname();
    command_.getsockname_ = getsockname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.getsockname)
}
inline ::Getsockname* Command::_internal_mutable_getsockname() {
  if (!_internal_has_getsockname()) {
    clear_command();
    set_has_getsockname();
    command_.getsockname_ = CreateMaybeMessage< ::Getsockname >(GetArena());
  }
  return command_.getsockname_;
}
inline ::Getsockname* Command::mutable_getsockname() {
  // @@protoc_insertion_point(field_mutable:Command.getsockname)
  return _internal_mutable_getsockname();
}

// .Peeloff peeloff = 25;
inline bool Command::_internal_has_peeloff() const {
  return command_case() == kPeeloff;
}
inline bool Command::has_peeloff() const {
  return _internal_has_peeloff();
}
inline void Command::set_has_peeloff() {
  _oneof_case_[0] = kPeeloff;
}
inline void Command::clear_peeloff() {
  if (_internal_has_peeloff()) {
    if (GetArena() == nullptr) {
      delete command_.peeloff_;
    }
    clear_has_command();
  }
}
inline ::Peeloff* Command::release_peeloff() {
  // @@protoc_insertion_point(field_release:Command.peeloff)
  if (_internal_has_peeloff()) {
    clear_has_command();
      ::Peeloff* temp = command_.peeloff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.peeloff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Peeloff& Command::_internal_peeloff() const {
  return _internal_has_peeloff()
      ? *command_.peeloff_
      : reinterpret_cast< ::Peeloff&>(::_Peeloff_default_instance_);
}
inline const ::Peeloff& Command::peeloff() const {
  // @@protoc_insertion_point(field_get:Command.peeloff)
  return _internal_peeloff();
}
inline ::Peeloff* Command::unsafe_arena_release_peeloff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.peeloff)
  if (_internal_has_peeloff()) {
    clear_has_command();
    ::Peeloff* temp = command_.peeloff_;
    command_.peeloff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_peeloff(::Peeloff* peeloff) {
  clear_command();
  if (peeloff) {
    set_has_peeloff();
    command_.peeloff_ = peeloff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.peeloff)
}
inline ::Peeloff* Command::_internal_mutable_peeloff() {
  if (!_internal_has_peeloff()) {
    clear_command();
    set_has_peeloff();
    command_.peeloff_ = CreateMaybeMessage< ::Peeloff >(GetArena());
  }
  return command_.peeloff_;
}
inline ::Peeloff* Command::mutable_peeloff() {
  // @@protoc_insertion_point(field_mutable:Command.peeloff)
  return _internal_mutable_peeloff();
}

// .Recvfrom recvfrom = 26;
inline bool Command::_internal_has_recvfrom() const {
  return command_case() == kRecvfrom;
}
inline bool Command::has_recvfrom() const {
  return _internal_has_recvfrom();
}
inline void Command::set_has_recvfrom() {
  _oneof_case_[0] = kRecvfrom;
}
inline void Command::clear_recvfrom() {
  if (_internal_has_recvfrom()) {
    if (GetArena() == nullptr) {
      delete command_.recvfrom_;
    }
    clear_has_command();
  }
}
inline ::Recvfrom* Command::release_recvfrom() {
  // @@protoc_insertion_point(field_release:Command.recvfrom)
  if (_internal_has_recvfrom()) {
    clear_has_command();
      ::Recvfrom* temp = command_.recvfrom_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.recvfrom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Recvfrom& Command::_internal_recvfrom() const {
  return _internal_has_recvfrom()
      ? *command_.recvfrom_
      : reinterpret_cast< ::Recvfrom&>(::_Recvfrom_default_instance_);
}
inline const ::Recvfrom& Command::recvfrom() const {
  // @@protoc_insertion_point(field_get:Command.recvfrom)
  return _internal_recvfrom();
}
inline ::Recvfrom* Command::unsafe_arena_release_recvfrom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.recvfrom)
  if (_internal_has_recvfrom()) {
    clear_has_command();
    ::Recvfrom* temp = command_.recvfrom_;
    command_.recvfrom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_recvfrom(::Recvfrom* recvfrom) {
  clear_command();
  if (recvfrom) {
    set_has_recvfrom();
    command_.recvfrom_ = recvfrom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.recvfrom)
}
inline ::Recvfrom* Command::_internal_mutable_recvfrom() {
  if (!_internal_has_recvfrom()) {
    clear_command();
    set_has_recvfrom();
    command_.recvfrom_ = CreateMaybeMessage< ::Recvfrom >(GetArena());
  }
  return command_.recvfrom_;
}
inline ::Recvfrom* Command::mutable_recvfrom() {
  // @@protoc_insertion_point(field_mutable:Command.recvfrom)
  return _internal_mutable_recvfrom();
}

// .RecvfromNocancel recvfrom_nocancel = 27;
inline bool Command::_internal_has_recvfrom_nocancel() const {
  return command_case() == kRecvfromNocancel;
}
inline bool Command::has_recvfrom_nocancel() const {
  return _internal_has_recvfrom_nocancel();
}
inline void Command::set_has_recvfrom_nocancel() {
  _oneof_case_[0] = kRecvfromNocancel;
}
inline void Command::clear_recvfrom_nocancel() {
  if (_internal_has_recvfrom_nocancel()) {
    if (GetArena() == nullptr) {
      delete command_.recvfrom_nocancel_;
    }
    clear_has_command();
  }
}
inline ::RecvfromNocancel* Command::release_recvfrom_nocancel() {
  // @@protoc_insertion_point(field_release:Command.recvfrom_nocancel)
  if (_internal_has_recvfrom_nocancel()) {
    clear_has_command();
      ::RecvfromNocancel* temp = command_.recvfrom_nocancel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.recvfrom_nocancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RecvfromNocancel& Command::_internal_recvfrom_nocancel() const {
  return _internal_has_recvfrom_nocancel()
      ? *command_.recvfrom_nocancel_
      : reinterpret_cast< ::RecvfromNocancel&>(::_RecvfromNocancel_default_instance_);
}
inline const ::RecvfromNocancel& Command::recvfrom_nocancel() const {
  // @@protoc_insertion_point(field_get:Command.recvfrom_nocancel)
  return _internal_recvfrom_nocancel();
}
inline ::RecvfromNocancel* Command::unsafe_arena_release_recvfrom_nocancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.recvfrom_nocancel)
  if (_internal_has_recvfrom_nocancel()) {
    clear_has_command();
    ::RecvfromNocancel* temp = command_.recvfrom_nocancel_;
    command_.recvfrom_nocancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_recvfrom_nocancel(::RecvfromNocancel* recvfrom_nocancel) {
  clear_command();
  if (recvfrom_nocancel) {
    set_has_recvfrom_nocancel();
    command_.recvfrom_nocancel_ = recvfrom_nocancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.recvfrom_nocancel)
}
inline ::RecvfromNocancel* Command::_internal_mutable_recvfrom_nocancel() {
  if (!_internal_has_recvfrom_nocancel()) {
    clear_command();
    set_has_recvfrom_nocancel();
    command_.recvfrom_nocancel_ = CreateMaybeMessage< ::RecvfromNocancel >(GetArena());
  }
  return command_.recvfrom_nocancel_;
}
inline ::RecvfromNocancel* Command::mutable_recvfrom_nocancel() {
  // @@protoc_insertion_point(field_mutable:Command.recvfrom_nocancel)
  return _internal_mutable_recvfrom_nocancel();
}

// .Recvmsg recvmsg = 28;
inline bool Command::_internal_has_recvmsg() const {
  return command_case() == kRecvmsg;
}
inline bool Command::has_recvmsg() const {
  return _internal_has_recvmsg();
}
inline void Command::set_has_recvmsg() {
  _oneof_case_[0] = kRecvmsg;
}
inline void Command::clear_recvmsg() {
  if (_internal_has_recvmsg()) {
    if (GetArena() == nullptr) {
      delete command_.recvmsg_;
    }
    clear_has_command();
  }
}
inline ::Recvmsg* Command::release_recvmsg() {
  // @@protoc_insertion_point(field_release:Command.recvmsg)
  if (_internal_has_recvmsg()) {
    clear_has_command();
      ::Recvmsg* temp = command_.recvmsg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.recvmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Recvmsg& Command::_internal_recvmsg() const {
  return _internal_has_recvmsg()
      ? *command_.recvmsg_
      : reinterpret_cast< ::Recvmsg&>(::_Recvmsg_default_instance_);
}
inline const ::Recvmsg& Command::recvmsg() const {
  // @@protoc_insertion_point(field_get:Command.recvmsg)
  return _internal_recvmsg();
}
inline ::Recvmsg* Command::unsafe_arena_release_recvmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.recvmsg)
  if (_internal_has_recvmsg()) {
    clear_has_command();
    ::Recvmsg* temp = command_.recvmsg_;
    command_.recvmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_recvmsg(::Recvmsg* recvmsg) {
  clear_command();
  if (recvmsg) {
    set_has_recvmsg();
    command_.recvmsg_ = recvmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.recvmsg)
}
inline ::Recvmsg* Command::_internal_mutable_recvmsg() {
  if (!_internal_has_recvmsg()) {
    clear_command();
    set_has_recvmsg();
    command_.recvmsg_ = CreateMaybeMessage< ::Recvmsg >(GetArena());
  }
  return command_.recvmsg_;
}
inline ::Recvmsg* Command::mutable_recvmsg() {
  // @@protoc_insertion_point(field_mutable:Command.recvmsg)
  return _internal_mutable_recvmsg();
}

// .Sendto sendto = 34;
inline bool Command::_internal_has_sendto() const {
  return command_case() == kSendto;
}
inline bool Command::has_sendto() const {
  return _internal_has_sendto();
}
inline void Command::set_has_sendto() {
  _oneof_case_[0] = kSendto;
}
inline void Command::clear_sendto() {
  if (_internal_has_sendto()) {
    if (GetArena() == nullptr) {
      delete command_.sendto_;
    }
    clear_has_command();
  }
}
inline ::Sendto* Command::release_sendto() {
  // @@protoc_insertion_point(field_release:Command.sendto)
  if (_internal_has_sendto()) {
    clear_has_command();
      ::Sendto* temp = command_.sendto_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.sendto_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Sendto& Command::_internal_sendto() const {
  return _internal_has_sendto()
      ? *command_.sendto_
      : reinterpret_cast< ::Sendto&>(::_Sendto_default_instance_);
}
inline const ::Sendto& Command::sendto() const {
  // @@protoc_insertion_point(field_get:Command.sendto)
  return _internal_sendto();
}
inline ::Sendto* Command::unsafe_arena_release_sendto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sendto)
  if (_internal_has_sendto()) {
    clear_has_command();
    ::Sendto* temp = command_.sendto_;
    command_.sendto_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sendto(::Sendto* sendto) {
  clear_command();
  if (sendto) {
    set_has_sendto();
    command_.sendto_ = sendto;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sendto)
}
inline ::Sendto* Command::_internal_mutable_sendto() {
  if (!_internal_has_sendto()) {
    clear_command();
    set_has_sendto();
    command_.sendto_ = CreateMaybeMessage< ::Sendto >(GetArena());
  }
  return command_.sendto_;
}
inline ::Sendto* Command::mutable_sendto() {
  // @@protoc_insertion_point(field_mutable:Command.sendto)
  return _internal_mutable_sendto();
}

// .Socketpair socketpair = 38;
inline bool Command::_internal_has_socketpair() const {
  return command_case() == kSocketpair;
}
inline bool Command::has_socketpair() const {
  return _internal_has_socketpair();
}
inline void Command::set_has_socketpair() {
  _oneof_case_[0] = kSocketpair;
}
inline void Command::clear_socketpair() {
  if (_internal_has_socketpair()) {
    if (GetArena() == nullptr) {
      delete command_.socketpair_;
    }
    clear_has_command();
  }
}
inline ::Socketpair* Command::release_socketpair() {
  // @@protoc_insertion_point(field_release:Command.socketpair)
  if (_internal_has_socketpair()) {
    clear_has_command();
      ::Socketpair* temp = command_.socketpair_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.socketpair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Socketpair& Command::_internal_socketpair() const {
  return _internal_has_socketpair()
      ? *command_.socketpair_
      : reinterpret_cast< ::Socketpair&>(::_Socketpair_default_instance_);
}
inline const ::Socketpair& Command::socketpair() const {
  // @@protoc_insertion_point(field_get:Command.socketpair)
  return _internal_socketpair();
}
inline ::Socketpair* Command::unsafe_arena_release_socketpair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.socketpair)
  if (_internal_has_socketpair()) {
    clear_has_command();
    ::Socketpair* temp = command_.socketpair_;
    command_.socketpair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_socketpair(::Socketpair* socketpair) {
  clear_command();
  if (socketpair) {
    set_has_socketpair();
    command_.socketpair_ = socketpair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.socketpair)
}
inline ::Socketpair* Command::_internal_mutable_socketpair() {
  if (!_internal_has_socketpair()) {
    clear_command();
    set_has_socketpair();
    command_.socketpair_ = CreateMaybeMessage< ::Socketpair >(GetArena());
  }
  return command_.socketpair_;
}
inline ::Socketpair* Command::mutable_socketpair() {
  // @@protoc_insertion_point(field_mutable:Command.socketpair)
  return _internal_mutable_socketpair();
}

// .Pipe pipe = 39;
inline bool Command::_internal_has_pipe() const {
  return command_case() == kPipe;
}
inline bool Command::has_pipe() const {
  return _internal_has_pipe();
}
inline void Command::set_has_pipe() {
  _oneof_case_[0] = kPipe;
}
inline void Command::clear_pipe() {
  if (_internal_has_pipe()) {
    if (GetArena() == nullptr) {
      delete command_.pipe_;
    }
    clear_has_command();
  }
}
inline ::Pipe* Command::release_pipe() {
  // @@protoc_insertion_point(field_release:Command.pipe)
  if (_internal_has_pipe()) {
    clear_has_command();
      ::Pipe* temp = command_.pipe_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.pipe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Pipe& Command::_internal_pipe() const {
  return _internal_has_pipe()
      ? *command_.pipe_
      : reinterpret_cast< ::Pipe&>(::_Pipe_default_instance_);
}
inline const ::Pipe& Command::pipe() const {
  // @@protoc_insertion_point(field_get:Command.pipe)
  return _internal_pipe();
}
inline ::Pipe* Command::unsafe_arena_release_pipe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.pipe)
  if (_internal_has_pipe()) {
    clear_has_command();
    ::Pipe* temp = command_.pipe_;
    command_.pipe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_pipe(::Pipe* pipe) {
  clear_command();
  if (pipe) {
    set_has_pipe();
    command_.pipe_ = pipe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.pipe)
}
inline ::Pipe* Command::_internal_mutable_pipe() {
  if (!_internal_has_pipe()) {
    clear_command();
    set_has_pipe();
    command_.pipe_ = CreateMaybeMessage< ::Pipe >(GetArena());
  }
  return command_.pipe_;
}
inline ::Pipe* Command::mutable_pipe() {
  // @@protoc_insertion_point(field_mutable:Command.pipe)
  return _internal_mutable_pipe();
}

// .Shutdown shutdown = 40;
inline bool Command::_internal_has_shutdown() const {
  return command_case() == kShutdown;
}
inline bool Command::has_shutdown() const {
  return _internal_has_shutdown();
}
inline void Command::set_has_shutdown() {
  _oneof_case_[0] = kShutdown;
}
inline void Command::clear_shutdown() {
  if (_internal_has_shutdown()) {
    if (GetArena() == nullptr) {
      delete command_.shutdown_;
    }
    clear_has_command();
  }
}
inline ::Shutdown* Command::release_shutdown() {
  // @@protoc_insertion_point(field_release:Command.shutdown)
  if (_internal_has_shutdown()) {
    clear_has_command();
      ::Shutdown* temp = command_.shutdown_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Shutdown& Command::_internal_shutdown() const {
  return _internal_has_shutdown()
      ? *command_.shutdown_
      : reinterpret_cast< ::Shutdown&>(::_Shutdown_default_instance_);
}
inline const ::Shutdown& Command::shutdown() const {
  // @@protoc_insertion_point(field_get:Command.shutdown)
  return _internal_shutdown();
}
inline ::Shutdown* Command::unsafe_arena_release_shutdown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.shutdown)
  if (_internal_has_shutdown()) {
    clear_has_command();
    ::Shutdown* temp = command_.shutdown_;
    command_.shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_shutdown(::Shutdown* shutdown) {
  clear_command();
  if (shutdown) {
    set_has_shutdown();
    command_.shutdown_ = shutdown;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.shutdown)
}
inline ::Shutdown* Command::_internal_mutable_shutdown() {
  if (!_internal_has_shutdown()) {
    clear_command();
    set_has_shutdown();
    command_.shutdown_ = CreateMaybeMessage< ::Shutdown >(GetArena());
  }
  return command_.shutdown_;
}
inline ::Shutdown* Command::mutable_shutdown() {
  // @@protoc_insertion_point(field_mutable:Command.shutdown)
  return _internal_mutable_shutdown();
}

inline bool Command::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void Command::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline Command::CommandCase Command::command_case() const {
  return Command::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AcceptNocancel

// optional .FileDescriptor s = 1;
inline bool AcceptNocancel::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AcceptNocancel::has_s() const {
  return _internal_has_s();
}
inline void AcceptNocancel::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor AcceptNocancel::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor AcceptNocancel::s() const {
  // @@protoc_insertion_point(field_get:AcceptNocancel.s)
  return _internal_s();
}
inline void AcceptNocancel::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  s_ = value;
}
inline void AcceptNocancel::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:AcceptNocancel.s)
}

// optional .SockAddr name = 2;
inline bool AcceptNocancel::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool AcceptNocancel::has_name() const {
  return _internal_has_name();
}
inline void AcceptNocancel::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& AcceptNocancel::_internal_name() const {
  const ::SockAddr* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& AcceptNocancel::name() const {
  // @@protoc_insertion_point(field_get:AcceptNocancel.name)
  return _internal_name();
}
inline void AcceptNocancel::unsafe_arena_set_allocated_name(
    ::SockAddr* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcceptNocancel.name)
}
inline ::SockAddr* AcceptNocancel::release_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* AcceptNocancel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:AcceptNocancel.name)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::SockAddr* AcceptNocancel::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::SockAddr* AcceptNocancel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:AcceptNocancel.name)
  return _internal_mutable_name();
}
inline void AcceptNocancel::set_allocated_name(::SockAddr* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:AcceptNocancel.name)
}

// -------------------------------------------------------------------

// ConnectNocancel

// optional .FileDescriptor s = 1;
inline bool ConnectNocancel::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConnectNocancel::has_s() const {
  return _internal_has_s();
}
inline void ConnectNocancel::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor ConnectNocancel::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor ConnectNocancel::s() const {
  // @@protoc_insertion_point(field_get:ConnectNocancel.s)
  return _internal_s();
}
inline void ConnectNocancel::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  s_ = value;
}
inline void ConnectNocancel::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:ConnectNocancel.s)
}

// optional .SockAddr name = 2;
inline bool ConnectNocancel::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool ConnectNocancel::has_name() const {
  return _internal_has_name();
}
inline void ConnectNocancel::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& ConnectNocancel::_internal_name() const {
  const ::SockAddr* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& ConnectNocancel::name() const {
  // @@protoc_insertion_point(field_get:ConnectNocancel.name)
  return _internal_name();
}
inline void ConnectNocancel::unsafe_arena_set_allocated_name(
    ::SockAddr* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectNocancel.name)
}
inline ::SockAddr* ConnectNocancel::release_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* ConnectNocancel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:ConnectNocancel.name)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::SockAddr* ConnectNocancel::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::SockAddr* ConnectNocancel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ConnectNocancel.name)
  return _internal_mutable_name();
}
inline void ConnectNocancel::set_allocated_name(::SockAddr* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:ConnectNocancel.name)
}

// -------------------------------------------------------------------

// Getpeername

// optional .FileDescriptor fdes = 1;
inline bool Getpeername::_internal_has_fdes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Getpeername::has_fdes() const {
  return _internal_has_fdes();
}
inline void Getpeername::clear_fdes() {
  fdes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor Getpeername::_internal_fdes() const {
  return static_cast< ::FileDescriptor >(fdes_);
}
inline ::FileDescriptor Getpeername::fdes() const {
  // @@protoc_insertion_point(field_get:Getpeername.fdes)
  return _internal_fdes();
}
inline void Getpeername::_internal_set_fdes(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fdes_ = value;
}
inline void Getpeername::set_fdes(::FileDescriptor value) {
  _internal_set_fdes(value);
  // @@protoc_insertion_point(field_set:Getpeername.fdes)
}

// optional .SockAddr asa = 2;
inline bool Getpeername::_internal_has_asa() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || asa_ != nullptr);
  return value;
}
inline bool Getpeername::has_asa() const {
  return _internal_has_asa();
}
inline void Getpeername::clear_asa() {
  if (asa_ != nullptr) asa_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& Getpeername::_internal_asa() const {
  const ::SockAddr* p = asa_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Getpeername::asa() const {
  // @@protoc_insertion_point(field_get:Getpeername.asa)
  return _internal_asa();
}
inline void Getpeername::unsafe_arena_set_allocated_asa(
    ::SockAddr* asa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asa_);
  }
  asa_ = asa;
  if (asa) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Getpeername.asa)
}
inline ::SockAddr* Getpeername::release_asa() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = asa_;
  asa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Getpeername::unsafe_arena_release_asa() {
  // @@protoc_insertion_point(field_release:Getpeername.asa)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = asa_;
  asa_ = nullptr;
  return temp;
}
inline ::SockAddr* Getpeername::_internal_mutable_asa() {
  _has_bits_[0] |= 0x00000001u;
  if (asa_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    asa_ = p;
  }
  return asa_;
}
inline ::SockAddr* Getpeername::mutable_asa() {
  // @@protoc_insertion_point(field_mutable:Getpeername.asa)
  return _internal_mutable_asa();
}
inline void Getpeername::set_allocated_asa(::SockAddr* asa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asa_;
  }
  if (asa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asa);
    if (message_arena != submessage_arena) {
      asa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asa, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  asa_ = asa;
  // @@protoc_insertion_point(field_set_allocated:Getpeername.asa)
}

// -------------------------------------------------------------------

// Getsockname

// optional .FileDescriptor fdes = 1;
inline bool Getsockname::_internal_has_fdes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Getsockname::has_fdes() const {
  return _internal_has_fdes();
}
inline void Getsockname::clear_fdes() {
  fdes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor Getsockname::_internal_fdes() const {
  return static_cast< ::FileDescriptor >(fdes_);
}
inline ::FileDescriptor Getsockname::fdes() const {
  // @@protoc_insertion_point(field_get:Getsockname.fdes)
  return _internal_fdes();
}
inline void Getsockname::_internal_set_fdes(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fdes_ = value;
}
inline void Getsockname::set_fdes(::FileDescriptor value) {
  _internal_set_fdes(value);
  // @@protoc_insertion_point(field_set:Getsockname.fdes)
}

// optional .SockAddr asa = 2;
inline bool Getsockname::_internal_has_asa() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || asa_ != nullptr);
  return value;
}
inline bool Getsockname::has_asa() const {
  return _internal_has_asa();
}
inline void Getsockname::clear_asa() {
  if (asa_ != nullptr) asa_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& Getsockname::_internal_asa() const {
  const ::SockAddr* p = asa_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Getsockname::asa() const {
  // @@protoc_insertion_point(field_get:Getsockname.asa)
  return _internal_asa();
}
inline void Getsockname::unsafe_arena_set_allocated_asa(
    ::SockAddr* asa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asa_);
  }
  asa_ = asa;
  if (asa) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Getsockname.asa)
}
inline ::SockAddr* Getsockname::release_asa() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = asa_;
  asa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Getsockname::unsafe_arena_release_asa() {
  // @@protoc_insertion_point(field_release:Getsockname.asa)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = asa_;
  asa_ = nullptr;
  return temp;
}
inline ::SockAddr* Getsockname::_internal_mutable_asa() {
  _has_bits_[0] |= 0x00000001u;
  if (asa_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    asa_ = p;
  }
  return asa_;
}
inline ::SockAddr* Getsockname::mutable_asa() {
  // @@protoc_insertion_point(field_mutable:Getsockname.asa)
  return _internal_mutable_asa();
}
inline void Getsockname::set_allocated_asa(::SockAddr* asa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asa_;
  }
  if (asa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asa);
    if (message_arena != submessage_arena) {
      asa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asa, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  asa_ = asa;
  // @@protoc_insertion_point(field_set_allocated:Getsockname.asa)
}

// -------------------------------------------------------------------

// Peeloff

// optional .FileDescriptor s = 1;
inline bool Peeloff::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Peeloff::has_s() const {
  return _internal_has_s();
}
inline void Peeloff::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor Peeloff::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor Peeloff::s() const {
  // @@protoc_insertion_point(field_get:Peeloff.s)
  return _internal_s();
}
inline void Peeloff::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  s_ = value;
}
inline void Peeloff::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Peeloff.s)
}

// optional .SaeAssocID aid = 2;
inline bool Peeloff::_internal_has_aid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Peeloff::has_aid() const {
  return _internal_has_aid();
}
inline void Peeloff::clear_aid() {
  aid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::SaeAssocID Peeloff::_internal_aid() const {
  return static_cast< ::SaeAssocID >(aid_);
}
inline ::SaeAssocID Peeloff::aid() const {
  // @@protoc_insertion_point(field_get:Peeloff.aid)
  return _internal_aid();
}
inline void Peeloff::_internal_set_aid(::SaeAssocID value) {
  assert(::SaeAssocID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  aid_ = value;
}
inline void Peeloff::set_aid(::SaeAssocID value) {
  _internal_set_aid(value);
  // @@protoc_insertion_point(field_set:Peeloff.aid)
}

// -------------------------------------------------------------------

// Pipe

// -------------------------------------------------------------------

// Shutdown

// optional .FileDescriptor s = 1;
inline bool Shutdown::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Shutdown::has_s() const {
  return _internal_has_s();
}
inline void Shutdown::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor Shutdown::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor Shutdown::s() const {
  // @@protoc_insertion_point(field_get:Shutdown.s)
  return _internal_s();
}
inline void Shutdown::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  s_ = value;
}
inline void Shutdown::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Shutdown.s)
}

// optional .ShutdownHow how = 2;
inline bool Shutdown::_internal_has_how() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Shutdown::has_how() const {
  return _internal_has_how();
}
inline void Shutdown::clear_how() {
  how_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ShutdownHow Shutdown::_internal_how() const {
  return static_cast< ::ShutdownHow >(how_);
}
inline ::ShutdownHow Shutdown::how() const {
  // @@protoc_insertion_point(field_get:Shutdown.how)
  return _internal_how();
}
inline void Shutdown::_internal_set_how(::ShutdownHow value) {
  assert(::ShutdownHow_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  how_ = value;
}
inline void Shutdown::set_how(::ShutdownHow value) {
  _internal_set_how(value);
  // @@protoc_insertion_point(field_set:Shutdown.how)
}

// -------------------------------------------------------------------

// Recvfrom

// optional .FileDescriptor s = 1;
inline bool Recvfrom::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Recvfrom::has_s() const {
  return _internal_has_s();
}
inline void Recvfrom::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FileDescriptor Recvfrom::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor Recvfrom::s() const {
  // @@protoc_insertion_point(field_get:Recvfrom.s)
  return _internal_s();
}
inline void Recvfrom::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  s_ = value;
}
inline void Recvfrom::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Recvfrom.s)
}

// optional bytes buf = 2;
inline bool Recvfrom::_internal_has_buf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Recvfrom::has_buf() const {
  return _internal_has_buf();
}
inline void Recvfrom::clear_buf() {
  buf_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Recvfrom::buf() const {
  // @@protoc_insertion_point(field_get:Recvfrom.buf)
  return _internal_buf();
}
inline void Recvfrom::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:Recvfrom.buf)
}
inline std::string* Recvfrom::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:Recvfrom.buf)
  return _internal_mutable_buf();
}
inline const std::string& Recvfrom::_internal_buf() const {
  return buf_.Get();
}
inline void Recvfrom::_internal_set_buf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Recvfrom::set_buf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Recvfrom.buf)
}
inline void Recvfrom::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Recvfrom.buf)
}
inline void Recvfrom::set_buf(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Recvfrom.buf)
}
inline std::string* Recvfrom::_internal_mutable_buf() {
  _has_bits_[0] |= 0x00000001u;
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Recvfrom::release_buf() {
  // @@protoc_insertion_point(field_release:Recvfrom.buf)
  if (!_internal_has_buf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buf_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Recvfrom::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Recvfrom.buf)
}

// optional int32 flags = 3;
inline bool Recvfrom::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Recvfrom::has_flags() const {
  return _internal_has_flags();
}
inline void Recvfrom::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Recvfrom::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Recvfrom::flags() const {
  // @@protoc_insertion_point(field_get:Recvfrom.flags)
  return _internal_flags();
}
inline void Recvfrom::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void Recvfrom::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Recvfrom.flags)
}

// optional .SockAddr from = 4;
inline bool Recvfrom::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || from_ != nullptr);
  return value;
}
inline bool Recvfrom::has_from() const {
  return _internal_has_from();
}
inline void Recvfrom::clear_from() {
  if (from_ != nullptr) from_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SockAddr& Recvfrom::_internal_from() const {
  const ::SockAddr* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Recvfrom::from() const {
  // @@protoc_insertion_point(field_get:Recvfrom.from)
  return _internal_from();
}
inline void Recvfrom::unsafe_arena_set_allocated_from(
    ::SockAddr* from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Recvfrom.from)
}
inline ::SockAddr* Recvfrom::release_from() {
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = from_;
  from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Recvfrom::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Recvfrom.from)
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::SockAddr* Recvfrom::_internal_mutable_from() {
  _has_bits_[0] |= 0x00000002u;
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    from_ = p;
  }
  return from_;
}
inline ::SockAddr* Recvfrom::mutable_from() {
  // @@protoc_insertion_point(field_mutable:Recvfrom.from)
  return _internal_mutable_from();
}
inline void Recvfrom::set_allocated_from(::SockAddr* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Recvfrom.from)
}

// -------------------------------------------------------------------

// RecvfromNocancel

// optional .FileDescriptor s = 1;
inline bool RecvfromNocancel::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecvfromNocancel::has_s() const {
  return _internal_has_s();
}
inline void RecvfromNocancel::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FileDescriptor RecvfromNocancel::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor RecvfromNocancel::s() const {
  // @@protoc_insertion_point(field_get:RecvfromNocancel.s)
  return _internal_s();
}
inline void RecvfromNocancel::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  s_ = value;
}
inline void RecvfromNocancel::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:RecvfromNocancel.s)
}

// optional bytes buf = 2;
inline bool RecvfromNocancel::_internal_has_buf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecvfromNocancel::has_buf() const {
  return _internal_has_buf();
}
inline void RecvfromNocancel::clear_buf() {
  buf_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecvfromNocancel::buf() const {
  // @@protoc_insertion_point(field_get:RecvfromNocancel.buf)
  return _internal_buf();
}
inline void RecvfromNocancel::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:RecvfromNocancel.buf)
}
inline std::string* RecvfromNocancel::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:RecvfromNocancel.buf)
  return _internal_mutable_buf();
}
inline const std::string& RecvfromNocancel::_internal_buf() const {
  return buf_.Get();
}
inline void RecvfromNocancel::_internal_set_buf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecvfromNocancel::set_buf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RecvfromNocancel.buf)
}
inline void RecvfromNocancel::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RecvfromNocancel.buf)
}
inline void RecvfromNocancel::set_buf(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RecvfromNocancel.buf)
}
inline std::string* RecvfromNocancel::_internal_mutable_buf() {
  _has_bits_[0] |= 0x00000001u;
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecvfromNocancel::release_buf() {
  // @@protoc_insertion_point(field_release:RecvfromNocancel.buf)
  if (!_internal_has_buf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buf_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecvfromNocancel::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RecvfromNocancel.buf)
}

// optional int32 flags = 3;
inline bool RecvfromNocancel::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecvfromNocancel::has_flags() const {
  return _internal_has_flags();
}
inline void RecvfromNocancel::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecvfromNocancel::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecvfromNocancel::flags() const {
  // @@protoc_insertion_point(field_get:RecvfromNocancel.flags)
  return _internal_flags();
}
inline void RecvfromNocancel::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void RecvfromNocancel::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:RecvfromNocancel.flags)
}

// optional .SockAddr from = 4;
inline bool RecvfromNocancel::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || from_ != nullptr);
  return value;
}
inline bool RecvfromNocancel::has_from() const {
  return _internal_has_from();
}
inline void RecvfromNocancel::clear_from() {
  if (from_ != nullptr) from_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SockAddr& RecvfromNocancel::_internal_from() const {
  const ::SockAddr* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& RecvfromNocancel::from() const {
  // @@protoc_insertion_point(field_get:RecvfromNocancel.from)
  return _internal_from();
}
inline void RecvfromNocancel::unsafe_arena_set_allocated_from(
    ::SockAddr* from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RecvfromNocancel.from)
}
inline ::SockAddr* RecvfromNocancel::release_from() {
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = from_;
  from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* RecvfromNocancel::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:RecvfromNocancel.from)
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::SockAddr* RecvfromNocancel::_internal_mutable_from() {
  _has_bits_[0] |= 0x00000002u;
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    from_ = p;
  }
  return from_;
}
inline ::SockAddr* RecvfromNocancel::mutable_from() {
  // @@protoc_insertion_point(field_mutable:RecvfromNocancel.from)
  return _internal_mutable_from();
}
inline void RecvfromNocancel::set_allocated_from(::SockAddr* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:RecvfromNocancel.from)
}

// -------------------------------------------------------------------

// Recvmsg

// optional .FileDescriptor s = 1;
inline bool Recvmsg::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Recvmsg::has_s() const {
  return _internal_has_s();
}
inline void Recvmsg::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor Recvmsg::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor Recvmsg::s() const {
  // @@protoc_insertion_point(field_get:Recvmsg.s)
  return _internal_s();
}
inline void Recvmsg::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  s_ = value;
}
inline void Recvmsg::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Recvmsg.s)
}

// optional uint32 flags = 2;
inline bool Recvmsg::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Recvmsg::has_flags() const {
  return _internal_has_flags();
}
inline void Recvmsg::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Recvmsg::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Recvmsg::flags() const {
  // @@protoc_insertion_point(field_get:Recvmsg.flags)
  return _internal_flags();
}
inline void Recvmsg::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
}
inline void Recvmsg::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Recvmsg.flags)
}

// -------------------------------------------------------------------

// Sendmsg

// optional .FileDescriptor s = 1;
inline bool Sendmsg::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sendmsg::has_s() const {
  return _internal_has_s();
}
inline void Sendmsg::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor Sendmsg::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor Sendmsg::s() const {
  // @@protoc_insertion_point(field_get:Sendmsg.s)
  return _internal_s();
}
inline void Sendmsg::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  s_ = value;
}
inline void Sendmsg::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Sendmsg.s)
}

// optional bytes msg = 2;
inline bool Sendmsg::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sendmsg::has_msg() const {
  return _internal_has_msg();
}
inline void Sendmsg::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sendmsg::msg() const {
  // @@protoc_insertion_point(field_get:Sendmsg.msg)
  return _internal_msg();
}
inline void Sendmsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Sendmsg.msg)
}
inline std::string* Sendmsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Sendmsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& Sendmsg::_internal_msg() const {
  return msg_.Get();
}
inline void Sendmsg::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Sendmsg::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Sendmsg.msg)
}
inline void Sendmsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Sendmsg.msg)
}
inline void Sendmsg::set_msg(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Sendmsg.msg)
}
inline std::string* Sendmsg::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Sendmsg::release_msg() {
  // @@protoc_insertion_point(field_release:Sendmsg.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sendmsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Sendmsg.msg)
}

// optional uint32 flags = 3;
inline bool Sendmsg::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sendmsg::has_flags() const {
  return _internal_has_flags();
}
inline void Sendmsg::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sendmsg::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sendmsg::flags() const {
  // @@protoc_insertion_point(field_get:Sendmsg.flags)
  return _internal_flags();
}
inline void Sendmsg::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
}
inline void Sendmsg::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Sendmsg.flags)
}

// -------------------------------------------------------------------

// Sendto

// optional .FileDescriptor s = 1;
inline bool Sendto::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sendto::has_s() const {
  return _internal_has_s();
}
inline void Sendto::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FileDescriptor Sendto::_internal_s() const {
  return static_cast< ::FileDescriptor >(s_);
}
inline ::FileDescriptor Sendto::s() const {
  // @@protoc_insertion_point(field_get:Sendto.s)
  return _internal_s();
}
inline void Sendto::_internal_set_s(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  s_ = value;
}
inline void Sendto::set_s(::FileDescriptor value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Sendto.s)
}

// optional bytes buf = 2;
inline bool Sendto::_internal_has_buf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sendto::has_buf() const {
  return _internal_has_buf();
}
inline void Sendto::clear_buf() {
  buf_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sendto::buf() const {
  // @@protoc_insertion_point(field_get:Sendto.buf)
  return _internal_buf();
}
inline void Sendto::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:Sendto.buf)
}
inline std::string* Sendto::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:Sendto.buf)
  return _internal_mutable_buf();
}
inline const std::string& Sendto::_internal_buf() const {
  return buf_.Get();
}
inline void Sendto::_internal_set_buf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Sendto::set_buf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Sendto.buf)
}
inline void Sendto::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Sendto.buf)
}
inline void Sendto::set_buf(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Sendto.buf)
}
inline std::string* Sendto::_internal_mutable_buf() {
  _has_bits_[0] |= 0x00000001u;
  return buf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Sendto::release_buf() {
  // @@protoc_insertion_point(field_release:Sendto.buf)
  if (!_internal_has_buf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buf_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sendto::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Sendto.buf)
}

// optional int32 flags = 3;
inline bool Sendto::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sendto::has_flags() const {
  return _internal_has_flags();
}
inline void Sendto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sendto::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sendto::flags() const {
  // @@protoc_insertion_point(field_get:Sendto.flags)
  return _internal_flags();
}
inline void Sendto::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void Sendto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Sendto.flags)
}

// optional .SockAddr to = 4;
inline bool Sendto::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || to_ != nullptr);
  return value;
}
inline bool Sendto::has_to() const {
  return _internal_has_to();
}
inline void Sendto::clear_to() {
  if (to_ != nullptr) to_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SockAddr& Sendto::_internal_to() const {
  const ::SockAddr* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Sendto::to() const {
  // @@protoc_insertion_point(field_get:Sendto.to)
  return _internal_to();
}
inline void Sendto::unsafe_arena_set_allocated_to(
    ::SockAddr* to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Sendto.to)
}
inline ::SockAddr* Sendto::release_to() {
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = to_;
  to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Sendto::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Sendto.to)
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::SockAddr* Sendto::_internal_mutable_to() {
  _has_bits_[0] |= 0x00000002u;
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    to_ = p;
  }
  return to_;
}
inline ::SockAddr* Sendto::mutable_to() {
  // @@protoc_insertion_point(field_mutable:Sendto.to)
  return _internal_mutable_to();
}
inline void Sendto::set_allocated_to(::SockAddr* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Sendto.to)
}

// -------------------------------------------------------------------

// Socketpair

// optional .Domain domain = 1;
inline bool Socketpair::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Socketpair::has_domain() const {
  return _internal_has_domain();
}
inline void Socketpair::clear_domain() {
  domain_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Domain Socketpair::_internal_domain() const {
  return static_cast< ::Domain >(domain_);
}
inline ::Domain Socketpair::domain() const {
  // @@protoc_insertion_point(field_get:Socketpair.domain)
  return _internal_domain();
}
inline void Socketpair::_internal_set_domain(::Domain value) {
  assert(::Domain_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  domain_ = value;
}
inline void Socketpair::set_domain(::Domain value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:Socketpair.domain)
}

// optional .SoType type = 2;
inline bool Socketpair::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Socketpair::has_type() const {
  return _internal_has_type();
}
inline void Socketpair::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::SoType Socketpair::_internal_type() const {
  return static_cast< ::SoType >(type_);
}
inline ::SoType Socketpair::type() const {
  // @@protoc_insertion_point(field_get:Socketpair.type)
  return _internal_type();
}
inline void Socketpair::_internal_set_type(::SoType value) {
  assert(::SoType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Socketpair::set_type(::SoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Socketpair.type)
}

// optional .Protocol protocol = 3;
inline bool Socketpair::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Socketpair::has_protocol() const {
  return _internal_has_protocol();
}
inline void Socketpair::clear_protocol() {
  protocol_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Protocol Socketpair::_internal_protocol() const {
  return static_cast< ::Protocol >(protocol_);
}
inline ::Protocol Socketpair::protocol() const {
  // @@protoc_insertion_point(field_get:Socketpair.protocol)
  return _internal_protocol();
}
inline void Socketpair::_internal_set_protocol(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  protocol_ = value;
}
inline void Socketpair::set_protocol(::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:Socketpair.protocol)
}

// -------------------------------------------------------------------

// NecpSessionOpen

// -------------------------------------------------------------------

// NecpSessionAction

// optional .FileDescriptor necp_fd = 1;
inline bool NecpSessionAction::_internal_has_necp_fd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NecpSessionAction::has_necp_fd() const {
  return _internal_has_necp_fd();
}
inline void NecpSessionAction::clear_necp_fd() {
  necp_fd_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor NecpSessionAction::_internal_necp_fd() const {
  return static_cast< ::FileDescriptor >(necp_fd_);
}
inline ::FileDescriptor NecpSessionAction::necp_fd() const {
  // @@protoc_insertion_point(field_get:NecpSessionAction.necp_fd)
  return _internal_necp_fd();
}
inline void NecpSessionAction::_internal_set_necp_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  necp_fd_ = value;
}
inline void NecpSessionAction::set_necp_fd(::FileDescriptor value) {
  _internal_set_necp_fd(value);
  // @@protoc_insertion_point(field_set:NecpSessionAction.necp_fd)
}

// optional .NecpSessionActionNumber action = 2;
inline bool NecpSessionAction::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NecpSessionAction::has_action() const {
  return _internal_has_action();
}
inline void NecpSessionAction::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::NecpSessionActionNumber NecpSessionAction::_internal_action() const {
  return static_cast< ::NecpSessionActionNumber >(action_);
}
inline ::NecpSessionActionNumber NecpSessionAction::action() const {
  // @@protoc_insertion_point(field_get:NecpSessionAction.action)
  return _internal_action();
}
inline void NecpSessionAction::_internal_set_action(::NecpSessionActionNumber value) {
  assert(::NecpSessionActionNumber_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
}
inline void NecpSessionAction::set_action(::NecpSessionActionNumber value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:NecpSessionAction.action)
}

// optional bytes in_buffer = 3;
inline bool NecpSessionAction::_internal_has_in_buffer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NecpSessionAction::has_in_buffer() const {
  return _internal_has_in_buffer();
}
inline void NecpSessionAction::clear_in_buffer() {
  in_buffer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NecpSessionAction::in_buffer() const {
  // @@protoc_insertion_point(field_get:NecpSessionAction.in_buffer)
  return _internal_in_buffer();
}
inline void NecpSessionAction::set_in_buffer(const std::string& value) {
  _internal_set_in_buffer(value);
  // @@protoc_insertion_point(field_set:NecpSessionAction.in_buffer)
}
inline std::string* NecpSessionAction::mutable_in_buffer() {
  // @@protoc_insertion_point(field_mutable:NecpSessionAction.in_buffer)
  return _internal_mutable_in_buffer();
}
inline const std::string& NecpSessionAction::_internal_in_buffer() const {
  return in_buffer_.Get();
}
inline void NecpSessionAction::_internal_set_in_buffer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  in_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NecpSessionAction::set_in_buffer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  in_buffer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NecpSessionAction.in_buffer)
}
inline void NecpSessionAction::set_in_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  in_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NecpSessionAction.in_buffer)
}
inline void NecpSessionAction::set_in_buffer(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  in_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NecpSessionAction.in_buffer)
}
inline std::string* NecpSessionAction::_internal_mutable_in_buffer() {
  _has_bits_[0] |= 0x00000001u;
  return in_buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NecpSessionAction::release_in_buffer() {
  // @@protoc_insertion_point(field_release:NecpSessionAction.in_buffer)
  if (!_internal_has_in_buffer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return in_buffer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NecpSessionAction::set_allocated_in_buffer(std::string* in_buffer) {
  if (in_buffer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  in_buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), in_buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NecpSessionAction.in_buffer)
}

// optional uint32 out_buffer_size = 4;
inline bool NecpSessionAction::_internal_has_out_buffer_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NecpSessionAction::has_out_buffer_size() const {
  return _internal_has_out_buffer_size();
}
inline void NecpSessionAction::clear_out_buffer_size() {
  out_buffer_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NecpSessionAction::_internal_out_buffer_size() const {
  return out_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NecpSessionAction::out_buffer_size() const {
  // @@protoc_insertion_point(field_get:NecpSessionAction.out_buffer_size)
  return _internal_out_buffer_size();
}
inline void NecpSessionAction::_internal_set_out_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  out_buffer_size_ = value;
}
inline void NecpSessionAction::set_out_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_out_buffer_size(value);
  // @@protoc_insertion_point(field_set:NecpSessionAction.out_buffer_size)
}

// -------------------------------------------------------------------

// NecpMatchPolicy

// optional bytes parameters = 1;
inline bool NecpMatchPolicy::_internal_has_parameters() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NecpMatchPolicy::has_parameters() const {
  return _internal_has_parameters();
}
inline void NecpMatchPolicy::clear_parameters() {
  parameters_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NecpMatchPolicy::parameters() const {
  // @@protoc_insertion_point(field_get:NecpMatchPolicy.parameters)
  return _internal_parameters();
}
inline void NecpMatchPolicy::set_parameters(const std::string& value) {
  _internal_set_parameters(value);
  // @@protoc_insertion_point(field_set:NecpMatchPolicy.parameters)
}
inline std::string* NecpMatchPolicy::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:NecpMatchPolicy.parameters)
  return _internal_mutable_parameters();
}
inline const std::string& NecpMatchPolicy::_internal_parameters() const {
  return parameters_.Get();
}
inline void NecpMatchPolicy::_internal_set_parameters(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NecpMatchPolicy::set_parameters(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  parameters_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NecpMatchPolicy.parameters)
}
inline void NecpMatchPolicy::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NecpMatchPolicy.parameters)
}
inline void NecpMatchPolicy::set_parameters(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NecpMatchPolicy.parameters)
}
inline std::string* NecpMatchPolicy::_internal_mutable_parameters() {
  _has_bits_[0] |= 0x00000001u;
  return parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NecpMatchPolicy::release_parameters() {
  // @@protoc_insertion_point(field_release:NecpMatchPolicy.parameters)
  if (!_internal_has_parameters()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return parameters_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NecpMatchPolicy::set_allocated_parameters(std::string* parameters) {
  if (parameters != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NecpMatchPolicy.parameters)
}

// -------------------------------------------------------------------

// NecpOpen

// repeated .NecpOpenFlag flags = 1;
inline int NecpOpen::_internal_flags_size() const {
  return flags_.size();
}
inline int NecpOpen::flags_size() const {
  return _internal_flags_size();
}
inline void NecpOpen::clear_flags() {
  flags_.Clear();
}
inline ::NecpOpenFlag NecpOpen::_internal_flags(int index) const {
  return static_cast< ::NecpOpenFlag >(flags_.Get(index));
}
inline ::NecpOpenFlag NecpOpen::flags(int index) const {
  // @@protoc_insertion_point(field_get:NecpOpen.flags)
  return _internal_flags(index);
}
inline void NecpOpen::set_flags(int index, ::NecpOpenFlag value) {
  assert(::NecpOpenFlag_IsValid(value));
  flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:NecpOpen.flags)
}
inline void NecpOpen::_internal_add_flags(::NecpOpenFlag value) {
  assert(::NecpOpenFlag_IsValid(value));
  flags_.Add(value);
}
inline void NecpOpen::add_flags(::NecpOpenFlag value) {
  // @@protoc_insertion_point(field_add:NecpOpen.flags)
  _internal_add_flags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
NecpOpen::flags() const {
  // @@protoc_insertion_point(field_list:NecpOpen.flags)
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NecpOpen::_internal_mutable_flags() {
  return &flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NecpOpen::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:NecpOpen.flags)
  return _internal_mutable_flags();
}

// -------------------------------------------------------------------

// NecpClientAction

// optional .FileDescriptor necp_fd = 1;
inline bool NecpClientAction::_internal_has_necp_fd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NecpClientAction::has_necp_fd() const {
  return _internal_has_necp_fd();
}
inline void NecpClientAction::clear_necp_fd() {
  necp_fd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor NecpClientAction::_internal_necp_fd() const {
  return static_cast< ::FileDescriptor >(necp_fd_);
}
inline ::FileDescriptor NecpClientAction::necp_fd() const {
  // @@protoc_insertion_point(field_get:NecpClientAction.necp_fd)
  return _internal_necp_fd();
}
inline void NecpClientAction::_internal_set_necp_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  necp_fd_ = value;
}
inline void NecpClientAction::set_necp_fd(::FileDescriptor value) {
  _internal_set_necp_fd(value);
  // @@protoc_insertion_point(field_set:NecpClientAction.necp_fd)
}

// optional .NecpClientId client_id = 3;
inline bool NecpClientAction::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NecpClientAction::has_client_id() const {
  return _internal_has_client_id();
}
inline void NecpClientAction::clear_client_id() {
  client_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::NecpClientId NecpClientAction::_internal_client_id() const {
  return static_cast< ::NecpClientId >(client_id_);
}
inline ::NecpClientId NecpClientAction::client_id() const {
  // @@protoc_insertion_point(field_get:NecpClientAction.client_id)
  return _internal_client_id();
}
inline void NecpClientAction::_internal_set_client_id(::NecpClientId value) {
  assert(::NecpClientId_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  client_id_ = value;
}
inline void NecpClientAction::set_client_id(::NecpClientId value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:NecpClientAction.client_id)
}

// .NecpClientActionAdd add = 5;
inline bool NecpClientAction::_internal_has_add() const {
  return action_case() == kAdd;
}
inline bool NecpClientAction::has_add() const {
  return _internal_has_add();
}
inline void NecpClientAction::set_has_add() {
  _oneof_case_[0] = kAdd;
}
inline void NecpClientAction::clear_add() {
  if (_internal_has_add()) {
    if (GetArena() == nullptr) {
      delete action_.add_;
    }
    clear_has_action();
  }
}
inline ::NecpClientActionAdd* NecpClientAction::release_add() {
  // @@protoc_insertion_point(field_release:NecpClientAction.add)
  if (_internal_has_add()) {
    clear_has_action();
      ::NecpClientActionAdd* temp = action_.add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpClientActionAdd& NecpClientAction::_internal_add() const {
  return _internal_has_add()
      ? *action_.add_
      : reinterpret_cast< ::NecpClientActionAdd&>(::_NecpClientActionAdd_default_instance_);
}
inline const ::NecpClientActionAdd& NecpClientAction::add() const {
  // @@protoc_insertion_point(field_get:NecpClientAction.add)
  return _internal_add();
}
inline ::NecpClientActionAdd* NecpClientAction::unsafe_arena_release_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NecpClientAction.add)
  if (_internal_has_add()) {
    clear_has_action();
    ::NecpClientActionAdd* temp = action_.add_;
    action_.add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NecpClientAction::unsafe_arena_set_allocated_add(::NecpClientActionAdd* add) {
  clear_action();
  if (add) {
    set_has_add();
    action_.add_ = add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NecpClientAction.add)
}
inline ::NecpClientActionAdd* NecpClientAction::_internal_mutable_add() {
  if (!_internal_has_add()) {
    clear_action();
    set_has_add();
    action_.add_ = CreateMaybeMessage< ::NecpClientActionAdd >(GetArena());
  }
  return action_.add_;
}
inline ::NecpClientActionAdd* NecpClientAction::mutable_add() {
  // @@protoc_insertion_point(field_mutable:NecpClientAction.add)
  return _internal_mutable_add();
}

// .NecpClientActionRemove remove = 6;
inline bool NecpClientAction::_internal_has_remove() const {
  return action_case() == kRemove;
}
inline bool NecpClientAction::has_remove() const {
  return _internal_has_remove();
}
inline void NecpClientAction::set_has_remove() {
  _oneof_case_[0] = kRemove;
}
inline void NecpClientAction::clear_remove() {
  if (_internal_has_remove()) {
    if (GetArena() == nullptr) {
      delete action_.remove_;
    }
    clear_has_action();
  }
}
inline ::NecpClientActionRemove* NecpClientAction::release_remove() {
  // @@protoc_insertion_point(field_release:NecpClientAction.remove)
  if (_internal_has_remove()) {
    clear_has_action();
      ::NecpClientActionRemove* temp = action_.remove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpClientActionRemove& NecpClientAction::_internal_remove() const {
  return _internal_has_remove()
      ? *action_.remove_
      : reinterpret_cast< ::NecpClientActionRemove&>(::_NecpClientActionRemove_default_instance_);
}
inline const ::NecpClientActionRemove& NecpClientAction::remove() const {
  // @@protoc_insertion_point(field_get:NecpClientAction.remove)
  return _internal_remove();
}
inline ::NecpClientActionRemove* NecpClientAction::unsafe_arena_release_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NecpClientAction.remove)
  if (_internal_has_remove()) {
    clear_has_action();
    ::NecpClientActionRemove* temp = action_.remove_;
    action_.remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NecpClientAction::unsafe_arena_set_allocated_remove(::NecpClientActionRemove* remove) {
  clear_action();
  if (remove) {
    set_has_remove();
    action_.remove_ = remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NecpClientAction.remove)
}
inline ::NecpClientActionRemove* NecpClientAction::_internal_mutable_remove() {
  if (!_internal_has_remove()) {
    clear_action();
    set_has_remove();
    action_.remove_ = CreateMaybeMessage< ::NecpClientActionRemove >(GetArena());
  }
  return action_.remove_;
}
inline ::NecpClientActionRemove* NecpClientAction::mutable_remove() {
  // @@protoc_insertion_point(field_mutable:NecpClientAction.remove)
  return _internal_mutable_remove();
}

// .NecpClientActionCopyParameters copy_parameters = 7;
inline bool NecpClientAction::_internal_has_copy_parameters() const {
  return action_case() == kCopyParameters;
}
inline bool NecpClientAction::has_copy_parameters() const {
  return _internal_has_copy_parameters();
}
inline void NecpClientAction::set_has_copy_parameters() {
  _oneof_case_[0] = kCopyParameters;
}
inline void NecpClientAction::clear_copy_parameters() {
  if (_internal_has_copy_parameters()) {
    if (GetArena() == nullptr) {
      delete action_.copy_parameters_;
    }
    clear_has_action();
  }
}
inline ::NecpClientActionCopyParameters* NecpClientAction::release_copy_parameters() {
  // @@protoc_insertion_point(field_release:NecpClientAction.copy_parameters)
  if (_internal_has_copy_parameters()) {
    clear_has_action();
      ::NecpClientActionCopyParameters* temp = action_.copy_parameters_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.copy_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpClientActionCopyParameters& NecpClientAction::_internal_copy_parameters() const {
  return _internal_has_copy_parameters()
      ? *action_.copy_parameters_
      : reinterpret_cast< ::NecpClientActionCopyParameters&>(::_NecpClientActionCopyParameters_default_instance_);
}
inline const ::NecpClientActionCopyParameters& NecpClientAction::copy_parameters() const {
  // @@protoc_insertion_point(field_get:NecpClientAction.copy_parameters)
  return _internal_copy_parameters();
}
inline ::NecpClientActionCopyParameters* NecpClientAction::unsafe_arena_release_copy_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NecpClientAction.copy_parameters)
  if (_internal_has_copy_parameters()) {
    clear_has_action();
    ::NecpClientActionCopyParameters* temp = action_.copy_parameters_;
    action_.copy_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NecpClientAction::unsafe_arena_set_allocated_copy_parameters(::NecpClientActionCopyParameters* copy_parameters) {
  clear_action();
  if (copy_parameters) {
    set_has_copy_parameters();
    action_.copy_parameters_ = copy_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NecpClientAction.copy_parameters)
}
inline ::NecpClientActionCopyParameters* NecpClientAction::_internal_mutable_copy_parameters() {
  if (!_internal_has_copy_parameters()) {
    clear_action();
    set_has_copy_parameters();
    action_.copy_parameters_ = CreateMaybeMessage< ::NecpClientActionCopyParameters >(GetArena());
  }
  return action_.copy_parameters_;
}
inline ::NecpClientActionCopyParameters* NecpClientAction::mutable_copy_parameters() {
  // @@protoc_insertion_point(field_mutable:NecpClientAction.copy_parameters)
  return _internal_mutable_copy_parameters();
}

// .NecpClientActionAgent agent = 11;
inline bool NecpClientAction::_internal_has_agent() const {
  return action_case() == kAgent;
}
inline bool NecpClientAction::has_agent() const {
  return _internal_has_agent();
}
inline void NecpClientAction::set_has_agent() {
  _oneof_case_[0] = kAgent;
}
inline void NecpClientAction::clear_agent() {
  if (_internal_has_agent()) {
    if (GetArena() == nullptr) {
      delete action_.agent_;
    }
    clear_has_action();
  }
}
inline ::NecpClientActionAgent* NecpClientAction::release_agent() {
  // @@protoc_insertion_point(field_release:NecpClientAction.agent)
  if (_internal_has_agent()) {
    clear_has_action();
      ::NecpClientActionAgent* temp = action_.agent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.agent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NecpClientActionAgent& NecpClientAction::_internal_agent() const {
  return _internal_has_agent()
      ? *action_.agent_
      : reinterpret_cast< ::NecpClientActionAgent&>(::_NecpClientActionAgent_default_instance_);
}
inline const ::NecpClientActionAgent& NecpClientAction::agent() const {
  // @@protoc_insertion_point(field_get:NecpClientAction.agent)
  return _internal_agent();
}
inline ::NecpClientActionAgent* NecpClientAction::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NecpClientAction.agent)
  if (_internal_has_agent()) {
    clear_has_action();
    ::NecpClientActionAgent* temp = action_.agent_;
    action_.agent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NecpClientAction::unsafe_arena_set_allocated_agent(::NecpClientActionAgent* agent) {
  clear_action();
  if (agent) {
    set_has_agent();
    action_.agent_ = agent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NecpClientAction.agent)
}
inline ::NecpClientActionAgent* NecpClientAction::_internal_mutable_agent() {
  if (!_internal_has_agent()) {
    clear_action();
    set_has_agent();
    action_.agent_ = CreateMaybeMessage< ::NecpClientActionAgent >(GetArena());
  }
  return action_.agent_;
}
inline ::NecpClientActionAgent* NecpClientAction::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:NecpClientAction.agent)
  return _internal_mutable_agent();
}

inline bool NecpClientAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void NecpClientAction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline NecpClientAction::ActionCase NecpClientAction::action_case() const {
  return NecpClientAction::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NecpClientActionAdd

// optional bytes buffer = 1;
inline bool NecpClientActionAdd::_internal_has_buffer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NecpClientActionAdd::has_buffer() const {
  return _internal_has_buffer();
}
inline void NecpClientActionAdd::clear_buffer() {
  buffer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NecpClientActionAdd::buffer() const {
  // @@protoc_insertion_point(field_get:NecpClientActionAdd.buffer)
  return _internal_buffer();
}
inline void NecpClientActionAdd::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:NecpClientActionAdd.buffer)
}
inline std::string* NecpClientActionAdd::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:NecpClientActionAdd.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& NecpClientActionAdd::_internal_buffer() const {
  return buffer_.Get();
}
inline void NecpClientActionAdd::_internal_set_buffer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NecpClientActionAdd::set_buffer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NecpClientActionAdd.buffer)
}
inline void NecpClientActionAdd::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NecpClientActionAdd.buffer)
}
inline void NecpClientActionAdd::set_buffer(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NecpClientActionAdd.buffer)
}
inline std::string* NecpClientActionAdd::_internal_mutable_buffer() {
  _has_bits_[0] |= 0x00000001u;
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NecpClientActionAdd::release_buffer() {
  // @@protoc_insertion_point(field_release:NecpClientActionAdd.buffer)
  if (!_internal_has_buffer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buffer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NecpClientActionAdd::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NecpClientActionAdd.buffer)
}

// -------------------------------------------------------------------

// NecpClientActionRemove

// -------------------------------------------------------------------

// NecpClientActionCopyParameters

// optional uint32 copyout_size = 1;
inline bool NecpClientActionCopyParameters::_internal_has_copyout_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NecpClientActionCopyParameters::has_copyout_size() const {
  return _internal_has_copyout_size();
}
inline void NecpClientActionCopyParameters::clear_copyout_size() {
  copyout_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NecpClientActionCopyParameters::_internal_copyout_size() const {
  return copyout_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NecpClientActionCopyParameters::copyout_size() const {
  // @@protoc_insertion_point(field_get:NecpClientActionCopyParameters.copyout_size)
  return _internal_copyout_size();
}
inline void NecpClientActionCopyParameters::_internal_set_copyout_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copyout_size_ = value;
}
inline void NecpClientActionCopyParameters::set_copyout_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copyout_size(value);
  // @@protoc_insertion_point(field_set:NecpClientActionCopyParameters.copyout_size)
}

// -------------------------------------------------------------------

// NecpClientActionAgent

// repeated .NecpTlv necp_tlv = 1;
inline int NecpClientActionAgent::_internal_necp_tlv_size() const {
  return necp_tlv_.size();
}
inline int NecpClientActionAgent::necp_tlv_size() const {
  return _internal_necp_tlv_size();
}
inline void NecpClientActionAgent::clear_necp_tlv() {
  necp_tlv_.Clear();
}
inline ::NecpTlv* NecpClientActionAgent::mutable_necp_tlv(int index) {
  // @@protoc_insertion_point(field_mutable:NecpClientActionAgent.necp_tlv)
  return necp_tlv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NecpTlv >*
NecpClientActionAgent::mutable_necp_tlv() {
  // @@protoc_insertion_point(field_mutable_list:NecpClientActionAgent.necp_tlv)
  return &necp_tlv_;
}
inline const ::NecpTlv& NecpClientActionAgent::_internal_necp_tlv(int index) const {
  return necp_tlv_.Get(index);
}
inline const ::NecpTlv& NecpClientActionAgent::necp_tlv(int index) const {
  // @@protoc_insertion_point(field_get:NecpClientActionAgent.necp_tlv)
  return _internal_necp_tlv(index);
}
inline ::NecpTlv* NecpClientActionAgent::_internal_add_necp_tlv() {
  return necp_tlv_.Add();
}
inline ::NecpTlv* NecpClientActionAgent::add_necp_tlv() {
  // @@protoc_insertion_point(field_add:NecpClientActionAgent.necp_tlv)
  return _internal_add_necp_tlv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NecpTlv >&
NecpClientActionAgent::necp_tlv() const {
  // @@protoc_insertion_point(field_list:NecpClientActionAgent.necp_tlv)
  return necp_tlv_;
}

// -------------------------------------------------------------------

// NecpTlv

// optional uint32 necp_type = 1;
inline bool NecpTlv::_internal_has_necp_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NecpTlv::has_necp_type() const {
  return _internal_has_necp_type();
}
inline void NecpTlv::clear_necp_type() {
  necp_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NecpTlv::_internal_necp_type() const {
  return necp_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NecpTlv::necp_type() const {
  // @@protoc_insertion_point(field_get:NecpTlv.necp_type)
  return _internal_necp_type();
}
inline void NecpTlv::_internal_set_necp_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  necp_type_ = value;
}
inline void NecpTlv::set_necp_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_necp_type(value);
  // @@protoc_insertion_point(field_set:NecpTlv.necp_type)
}

// optional bytes data = 2;
inline bool NecpTlv::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NecpTlv::has_data() const {
  return _internal_has_data();
}
inline void NecpTlv::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NecpTlv::data() const {
  // @@protoc_insertion_point(field_get:NecpTlv.data)
  return _internal_data();
}
inline void NecpTlv::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NecpTlv.data)
}
inline std::string* NecpTlv::mutable_data() {
  // @@protoc_insertion_point(field_mutable:NecpTlv.data)
  return _internal_mutable_data();
}
inline const std::string& NecpTlv::_internal_data() const {
  return data_.Get();
}
inline void NecpTlv::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NecpTlv::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NecpTlv.data)
}
inline void NecpTlv::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NecpTlv.data)
}
inline void NecpTlv::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NecpTlv.data)
}
inline std::string* NecpTlv::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NecpTlv::release_data() {
  // @@protoc_insertion_point(field_release:NecpTlv.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NecpTlv::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NecpTlv.data)
}

// -------------------------------------------------------------------

// ClearAll

// -------------------------------------------------------------------

// Close

// required .FileDescriptor fd = 1;
inline bool Close::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Close::has_fd() const {
  return _internal_has_fd();
}
inline void Close::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor Close::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor Close::fd() const {
  // @@protoc_insertion_point(field_get:Close.fd)
  return _internal_fd();
}
inline void Close::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  fd_ = value;
}
inline void Close::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:Close.fd)
}

// -------------------------------------------------------------------

// Accept

// required .SockAddr sockaddr = 1;
inline bool Accept::_internal_has_sockaddr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sockaddr_ != nullptr);
  return value;
}
inline bool Accept::has_sockaddr() const {
  return _internal_has_sockaddr();
}
inline void Accept::clear_sockaddr() {
  if (sockaddr_ != nullptr) sockaddr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& Accept::_internal_sockaddr() const {
  const ::SockAddr* p = sockaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Accept::sockaddr() const {
  // @@protoc_insertion_point(field_get:Accept.sockaddr)
  return _internal_sockaddr();
}
inline void Accept::unsafe_arena_set_allocated_sockaddr(
    ::SockAddr* sockaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sockaddr_);
  }
  sockaddr_ = sockaddr;
  if (sockaddr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Accept.sockaddr)
}
inline ::SockAddr* Accept::release_sockaddr() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sockaddr_;
  sockaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Accept::unsafe_arena_release_sockaddr() {
  // @@protoc_insertion_point(field_release:Accept.sockaddr)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sockaddr_;
  sockaddr_ = nullptr;
  return temp;
}
inline ::SockAddr* Accept::_internal_mutable_sockaddr() {
  _has_bits_[0] |= 0x00000001u;
  if (sockaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    sockaddr_ = p;
  }
  return sockaddr_;
}
inline ::SockAddr* Accept::mutable_sockaddr() {
  // @@protoc_insertion_point(field_mutable:Accept.sockaddr)
  return _internal_mutable_sockaddr();
}
inline void Accept::set_allocated_sockaddr(::SockAddr* sockaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sockaddr_;
  }
  if (sockaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sockaddr);
    if (message_arena != submessage_arena) {
      sockaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sockaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sockaddr_ = sockaddr;
  // @@protoc_insertion_point(field_set_allocated:Accept.sockaddr)
}

// optional .FileDescriptor fd = 2;
inline bool Accept::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Accept::has_fd() const {
  return _internal_has_fd();
}
inline void Accept::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor Accept::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor Accept::fd() const {
  // @@protoc_insertion_point(field_get:Accept.fd)
  return _internal_fd();
}
inline void Accept::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fd_ = value;
}
inline void Accept::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:Accept.fd)
}

// -------------------------------------------------------------------

// Bind

// required .SockAddr sockaddr = 1;
inline bool Bind::_internal_has_sockaddr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sockaddr_ != nullptr);
  return value;
}
inline bool Bind::has_sockaddr() const {
  return _internal_has_sockaddr();
}
inline void Bind::clear_sockaddr() {
  if (sockaddr_ != nullptr) sockaddr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SockAddr& Bind::_internal_sockaddr() const {
  const ::SockAddr* p = sockaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr&>(
      ::_SockAddr_default_instance_);
}
inline const ::SockAddr& Bind::sockaddr() const {
  // @@protoc_insertion_point(field_get:Bind.sockaddr)
  return _internal_sockaddr();
}
inline void Bind::unsafe_arena_set_allocated_sockaddr(
    ::SockAddr* sockaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sockaddr_);
  }
  sockaddr_ = sockaddr;
  if (sockaddr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Bind.sockaddr)
}
inline ::SockAddr* Bind::release_sockaddr() {
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sockaddr_;
  sockaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr* Bind::unsafe_arena_release_sockaddr() {
  // @@protoc_insertion_point(field_release:Bind.sockaddr)
  _has_bits_[0] &= ~0x00000001u;
  ::SockAddr* temp = sockaddr_;
  sockaddr_ = nullptr;
  return temp;
}
inline ::SockAddr* Bind::_internal_mutable_sockaddr() {
  _has_bits_[0] |= 0x00000001u;
  if (sockaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr>(GetArena());
    sockaddr_ = p;
  }
  return sockaddr_;
}
inline ::SockAddr* Bind::mutable_sockaddr() {
  // @@protoc_insertion_point(field_mutable:Bind.sockaddr)
  return _internal_mutable_sockaddr();
}
inline void Bind::set_allocated_sockaddr(::SockAddr* sockaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sockaddr_;
  }
  if (sockaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sockaddr);
    if (message_arena != submessage_arena) {
      sockaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sockaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sockaddr_ = sockaddr;
  // @@protoc_insertion_point(field_set_allocated:Bind.sockaddr)
}

// optional .FileDescriptor fd = 2;
inline bool Bind::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bind::has_fd() const {
  return _internal_has_fd();
}
inline void Bind::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::FileDescriptor Bind::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor Bind::fd() const {
  // @@protoc_insertion_point(field_get:Bind.fd)
  return _internal_fd();
}
inline void Bind::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fd_ = value;
}
inline void Bind::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:Bind.fd)
}

// -------------------------------------------------------------------

// Listen

// required .FileDescriptor socket = 1;
inline bool Listen::_internal_has_socket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Listen::has_socket() const {
  return _internal_has_socket();
}
inline void Listen::clear_socket() {
  socket_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor Listen::_internal_socket() const {
  return static_cast< ::FileDescriptor >(socket_);
}
inline ::FileDescriptor Listen::socket() const {
  // @@protoc_insertion_point(field_get:Listen.socket)
  return _internal_socket();
}
inline void Listen::_internal_set_socket(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  socket_ = value;
}
inline void Listen::set_socket(::FileDescriptor value) {
  _internal_set_socket(value);
  // @@protoc_insertion_point(field_set:Listen.socket)
}

// optional int32 backlog = 2;
inline bool Listen::_internal_has_backlog() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Listen::has_backlog() const {
  return _internal_has_backlog();
}
inline void Listen::clear_backlog() {
  backlog_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Listen::_internal_backlog() const {
  return backlog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Listen::backlog() const {
  // @@protoc_insertion_point(field_get:Listen.backlog)
  return _internal_backlog();
}
inline void Listen::_internal_set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  backlog_ = value;
}
inline void Listen::set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_backlog(value);
  // @@protoc_insertion_point(field_set:Listen.backlog)
}

// -------------------------------------------------------------------

// IoctlReal

// .In6_AliasReq_64 siocaifaddr_in6_64 = 1;
inline bool IoctlReal::_internal_has_siocaifaddr_in6_64() const {
  return ioctl_case() == kSiocaifaddrIn664;
}
inline bool IoctlReal::has_siocaifaddr_in6_64() const {
  return _internal_has_siocaifaddr_in6_64();
}
inline void IoctlReal::set_has_siocaifaddr_in6_64() {
  _oneof_case_[0] = kSiocaifaddrIn664;
}
inline void IoctlReal::clear_siocaifaddr_in6_64() {
  if (_internal_has_siocaifaddr_in6_64()) {
    if (GetArena() == nullptr) {
      delete ioctl_.siocaifaddr_in6_64_;
    }
    clear_has_ioctl();
  }
}
inline ::In6_AliasReq_64* IoctlReal::release_siocaifaddr_in6_64() {
  // @@protoc_insertion_point(field_release:IoctlReal.siocaifaddr_in6_64)
  if (_internal_has_siocaifaddr_in6_64()) {
    clear_has_ioctl();
      ::In6_AliasReq_64* temp = ioctl_.siocaifaddr_in6_64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ioctl_.siocaifaddr_in6_64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::In6_AliasReq_64& IoctlReal::_internal_siocaifaddr_in6_64() const {
  return _internal_has_siocaifaddr_in6_64()
      ? *ioctl_.siocaifaddr_in6_64_
      : reinterpret_cast< ::In6_AliasReq_64&>(::_In6_AliasReq_64_default_instance_);
}
inline const ::In6_AliasReq_64& IoctlReal::siocaifaddr_in6_64() const {
  // @@protoc_insertion_point(field_get:IoctlReal.siocaifaddr_in6_64)
  return _internal_siocaifaddr_in6_64();
}
inline ::In6_AliasReq_64* IoctlReal::unsafe_arena_release_siocaifaddr_in6_64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IoctlReal.siocaifaddr_in6_64)
  if (_internal_has_siocaifaddr_in6_64()) {
    clear_has_ioctl();
    ::In6_AliasReq_64* temp = ioctl_.siocaifaddr_in6_64_;
    ioctl_.siocaifaddr_in6_64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IoctlReal::unsafe_arena_set_allocated_siocaifaddr_in6_64(::In6_AliasReq_64* siocaifaddr_in6_64) {
  clear_ioctl();
  if (siocaifaddr_in6_64) {
    set_has_siocaifaddr_in6_64();
    ioctl_.siocaifaddr_in6_64_ = siocaifaddr_in6_64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IoctlReal.siocaifaddr_in6_64)
}
inline ::In6_AliasReq_64* IoctlReal::_internal_mutable_siocaifaddr_in6_64() {
  if (!_internal_has_siocaifaddr_in6_64()) {
    clear_ioctl();
    set_has_siocaifaddr_in6_64();
    ioctl_.siocaifaddr_in6_64_ = CreateMaybeMessage< ::In6_AliasReq_64 >(GetArena());
  }
  return ioctl_.siocaifaddr_in6_64_;
}
inline ::In6_AliasReq_64* IoctlReal::mutable_siocaifaddr_in6_64() {
  // @@protoc_insertion_point(field_mutable:IoctlReal.siocaifaddr_in6_64)
  return _internal_mutable_siocaifaddr_in6_64();
}

// .IfReqFlags siocsifflags = 3;
inline bool IoctlReal::_internal_has_siocsifflags() const {
  return ioctl_case() == kSiocsifflags;
}
inline bool IoctlReal::has_siocsifflags() const {
  return _internal_has_siocsifflags();
}
inline void IoctlReal::set_has_siocsifflags() {
  _oneof_case_[0] = kSiocsifflags;
}
inline void IoctlReal::clear_siocsifflags() {
  if (_internal_has_siocsifflags()) {
    if (GetArena() == nullptr) {
      delete ioctl_.siocsifflags_;
    }
    clear_has_ioctl();
  }
}
inline ::IfReqFlags* IoctlReal::release_siocsifflags() {
  // @@protoc_insertion_point(field_release:IoctlReal.siocsifflags)
  if (_internal_has_siocsifflags()) {
    clear_has_ioctl();
      ::IfReqFlags* temp = ioctl_.siocsifflags_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ioctl_.siocsifflags_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IfReqFlags& IoctlReal::_internal_siocsifflags() const {
  return _internal_has_siocsifflags()
      ? *ioctl_.siocsifflags_
      : reinterpret_cast< ::IfReqFlags&>(::_IfReqFlags_default_instance_);
}
inline const ::IfReqFlags& IoctlReal::siocsifflags() const {
  // @@protoc_insertion_point(field_get:IoctlReal.siocsifflags)
  return _internal_siocsifflags();
}
inline ::IfReqFlags* IoctlReal::unsafe_arena_release_siocsifflags() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IoctlReal.siocsifflags)
  if (_internal_has_siocsifflags()) {
    clear_has_ioctl();
    ::IfReqFlags* temp = ioctl_.siocsifflags_;
    ioctl_.siocsifflags_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IoctlReal::unsafe_arena_set_allocated_siocsifflags(::IfReqFlags* siocsifflags) {
  clear_ioctl();
  if (siocsifflags) {
    set_has_siocsifflags();
    ioctl_.siocsifflags_ = siocsifflags;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IoctlReal.siocsifflags)
}
inline ::IfReqFlags* IoctlReal::_internal_mutable_siocsifflags() {
  if (!_internal_has_siocsifflags()) {
    clear_ioctl();
    set_has_siocsifflags();
    ioctl_.siocsifflags_ = CreateMaybeMessage< ::IfReqFlags >(GetArena());
  }
  return ioctl_.siocsifflags_;
}
inline ::IfReqFlags* IoctlReal::mutable_siocsifflags() {
  // @@protoc_insertion_point(field_mutable:IoctlReal.siocsifflags)
  return _internal_mutable_siocsifflags();
}

// optional .FileDescriptor fd = 2;
inline bool IoctlReal::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IoctlReal::has_fd() const {
  return _internal_has_fd();
}
inline void IoctlReal::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor IoctlReal::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor IoctlReal::fd() const {
  // @@protoc_insertion_point(field_get:IoctlReal.fd)
  return _internal_fd();
}
inline void IoctlReal::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  fd_ = value;
}
inline void IoctlReal::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:IoctlReal.fd)
}

inline bool IoctlReal::has_ioctl() const {
  return ioctl_case() != IOCTL_NOT_SET;
}
inline void IoctlReal::clear_has_ioctl() {
  _oneof_case_[0] = IOCTL_NOT_SET;
}
inline IoctlReal::IoctlCase IoctlReal::ioctl_case() const {
  return IoctlReal::IoctlCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IfReqFlags

// required .IfrName ifr_name = 1;
inline bool IfReqFlags::_internal_has_ifr_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IfReqFlags::has_ifr_name() const {
  return _internal_has_ifr_name();
}
inline void IfReqFlags::clear_ifr_name() {
  ifr_name_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::IfrName IfReqFlags::_internal_ifr_name() const {
  return static_cast< ::IfrName >(ifr_name_);
}
inline ::IfrName IfReqFlags::ifr_name() const {
  // @@protoc_insertion_point(field_get:IfReqFlags.ifr_name)
  return _internal_ifr_name();
}
inline void IfReqFlags::_internal_set_ifr_name(::IfrName value) {
  assert(::IfrName_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ifr_name_ = value;
}
inline void IfReqFlags::set_ifr_name(::IfrName value) {
  _internal_set_ifr_name(value);
  // @@protoc_insertion_point(field_set:IfReqFlags.ifr_name)
}

// repeated .IfruFlag flags = 2;
inline int IfReqFlags::_internal_flags_size() const {
  return flags_.size();
}
inline int IfReqFlags::flags_size() const {
  return _internal_flags_size();
}
inline void IfReqFlags::clear_flags() {
  flags_.Clear();
}
inline ::IfruFlag IfReqFlags::_internal_flags(int index) const {
  return static_cast< ::IfruFlag >(flags_.Get(index));
}
inline ::IfruFlag IfReqFlags::flags(int index) const {
  // @@protoc_insertion_point(field_get:IfReqFlags.flags)
  return _internal_flags(index);
}
inline void IfReqFlags::set_flags(int index, ::IfruFlag value) {
  assert(::IfruFlag_IsValid(value));
  flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:IfReqFlags.flags)
}
inline void IfReqFlags::_internal_add_flags(::IfruFlag value) {
  assert(::IfruFlag_IsValid(value));
  flags_.Add(value);
}
inline void IfReqFlags::add_flags(::IfruFlag value) {
  // @@protoc_insertion_point(field_add:IfReqFlags.flags)
  _internal_add_flags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
IfReqFlags::flags() const {
  // @@protoc_insertion_point(field_list:IfReqFlags.flags)
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
IfReqFlags::_internal_mutable_flags() {
  return &flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
IfReqFlags::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:IfReqFlags.flags)
  return _internal_mutable_flags();
}

// -------------------------------------------------------------------

// In6_AliasReq_64

// required bytes ifra_name = 1;
inline bool In6_AliasReq_64::_internal_has_ifra_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool In6_AliasReq_64::has_ifra_name() const {
  return _internal_has_ifra_name();
}
inline void In6_AliasReq_64::clear_ifra_name() {
  ifra_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& In6_AliasReq_64::ifra_name() const {
  // @@protoc_insertion_point(field_get:In6_AliasReq_64.ifra_name)
  return _internal_ifra_name();
}
inline void In6_AliasReq_64::set_ifra_name(const std::string& value) {
  _internal_set_ifra_name(value);
  // @@protoc_insertion_point(field_set:In6_AliasReq_64.ifra_name)
}
inline std::string* In6_AliasReq_64::mutable_ifra_name() {
  // @@protoc_insertion_point(field_mutable:In6_AliasReq_64.ifra_name)
  return _internal_mutable_ifra_name();
}
inline const std::string& In6_AliasReq_64::_internal_ifra_name() const {
  return ifra_name_.Get();
}
inline void In6_AliasReq_64::_internal_set_ifra_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ifra_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void In6_AliasReq_64::set_ifra_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ifra_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:In6_AliasReq_64.ifra_name)
}
inline void In6_AliasReq_64::set_ifra_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ifra_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:In6_AliasReq_64.ifra_name)
}
inline void In6_AliasReq_64::set_ifra_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ifra_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:In6_AliasReq_64.ifra_name)
}
inline std::string* In6_AliasReq_64::_internal_mutable_ifra_name() {
  _has_bits_[0] |= 0x00000001u;
  return ifra_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* In6_AliasReq_64::release_ifra_name() {
  // @@protoc_insertion_point(field_release:In6_AliasReq_64.ifra_name)
  if (!_internal_has_ifra_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ifra_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void In6_AliasReq_64::set_allocated_ifra_name(std::string* ifra_name) {
  if (ifra_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ifra_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ifra_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:In6_AliasReq_64.ifra_name)
}

// required .SockAddr6 ifra_addr = 2;
inline bool In6_AliasReq_64::_internal_has_ifra_addr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ifra_addr_ != nullptr);
  return value;
}
inline bool In6_AliasReq_64::has_ifra_addr() const {
  return _internal_has_ifra_addr();
}
inline void In6_AliasReq_64::clear_ifra_addr() {
  if (ifra_addr_ != nullptr) ifra_addr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SockAddr6& In6_AliasReq_64::_internal_ifra_addr() const {
  const ::SockAddr6* p = ifra_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr6&>(
      ::_SockAddr6_default_instance_);
}
inline const ::SockAddr6& In6_AliasReq_64::ifra_addr() const {
  // @@protoc_insertion_point(field_get:In6_AliasReq_64.ifra_addr)
  return _internal_ifra_addr();
}
inline void In6_AliasReq_64::unsafe_arena_set_allocated_ifra_addr(
    ::SockAddr6* ifra_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ifra_addr_);
  }
  ifra_addr_ = ifra_addr;
  if (ifra_addr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:In6_AliasReq_64.ifra_addr)
}
inline ::SockAddr6* In6_AliasReq_64::release_ifra_addr() {
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr6* temp = ifra_addr_;
  ifra_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr6* In6_AliasReq_64::unsafe_arena_release_ifra_addr() {
  // @@protoc_insertion_point(field_release:In6_AliasReq_64.ifra_addr)
  _has_bits_[0] &= ~0x00000002u;
  ::SockAddr6* temp = ifra_addr_;
  ifra_addr_ = nullptr;
  return temp;
}
inline ::SockAddr6* In6_AliasReq_64::_internal_mutable_ifra_addr() {
  _has_bits_[0] |= 0x00000002u;
  if (ifra_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr6>(GetArena());
    ifra_addr_ = p;
  }
  return ifra_addr_;
}
inline ::SockAddr6* In6_AliasReq_64::mutable_ifra_addr() {
  // @@protoc_insertion_point(field_mutable:In6_AliasReq_64.ifra_addr)
  return _internal_mutable_ifra_addr();
}
inline void In6_AliasReq_64::set_allocated_ifra_addr(::SockAddr6* ifra_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ifra_addr_;
  }
  if (ifra_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ifra_addr);
    if (message_arena != submessage_arena) {
      ifra_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ifra_addr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ifra_addr_ = ifra_addr;
  // @@protoc_insertion_point(field_set_allocated:In6_AliasReq_64.ifra_addr)
}

// required .SockAddr6 ifra_dstaddr = 3;
inline bool In6_AliasReq_64::_internal_has_ifra_dstaddr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ifra_dstaddr_ != nullptr);
  return value;
}
inline bool In6_AliasReq_64::has_ifra_dstaddr() const {
  return _internal_has_ifra_dstaddr();
}
inline void In6_AliasReq_64::clear_ifra_dstaddr() {
  if (ifra_dstaddr_ != nullptr) ifra_dstaddr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SockAddr6& In6_AliasReq_64::_internal_ifra_dstaddr() const {
  const ::SockAddr6* p = ifra_dstaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr6&>(
      ::_SockAddr6_default_instance_);
}
inline const ::SockAddr6& In6_AliasReq_64::ifra_dstaddr() const {
  // @@protoc_insertion_point(field_get:In6_AliasReq_64.ifra_dstaddr)
  return _internal_ifra_dstaddr();
}
inline void In6_AliasReq_64::unsafe_arena_set_allocated_ifra_dstaddr(
    ::SockAddr6* ifra_dstaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ifra_dstaddr_);
  }
  ifra_dstaddr_ = ifra_dstaddr;
  if (ifra_dstaddr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:In6_AliasReq_64.ifra_dstaddr)
}
inline ::SockAddr6* In6_AliasReq_64::release_ifra_dstaddr() {
  _has_bits_[0] &= ~0x00000004u;
  ::SockAddr6* temp = ifra_dstaddr_;
  ifra_dstaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr6* In6_AliasReq_64::unsafe_arena_release_ifra_dstaddr() {
  // @@protoc_insertion_point(field_release:In6_AliasReq_64.ifra_dstaddr)
  _has_bits_[0] &= ~0x00000004u;
  ::SockAddr6* temp = ifra_dstaddr_;
  ifra_dstaddr_ = nullptr;
  return temp;
}
inline ::SockAddr6* In6_AliasReq_64::_internal_mutable_ifra_dstaddr() {
  _has_bits_[0] |= 0x00000004u;
  if (ifra_dstaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr6>(GetArena());
    ifra_dstaddr_ = p;
  }
  return ifra_dstaddr_;
}
inline ::SockAddr6* In6_AliasReq_64::mutable_ifra_dstaddr() {
  // @@protoc_insertion_point(field_mutable:In6_AliasReq_64.ifra_dstaddr)
  return _internal_mutable_ifra_dstaddr();
}
inline void In6_AliasReq_64::set_allocated_ifra_dstaddr(::SockAddr6* ifra_dstaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ifra_dstaddr_;
  }
  if (ifra_dstaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ifra_dstaddr);
    if (message_arena != submessage_arena) {
      ifra_dstaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ifra_dstaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ifra_dstaddr_ = ifra_dstaddr;
  // @@protoc_insertion_point(field_set_allocated:In6_AliasReq_64.ifra_dstaddr)
}

// required .SockAddr6 ifra_prefixmask = 4;
inline bool In6_AliasReq_64::_internal_has_ifra_prefixmask() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ifra_prefixmask_ != nullptr);
  return value;
}
inline bool In6_AliasReq_64::has_ifra_prefixmask() const {
  return _internal_has_ifra_prefixmask();
}
inline void In6_AliasReq_64::clear_ifra_prefixmask() {
  if (ifra_prefixmask_ != nullptr) ifra_prefixmask_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::SockAddr6& In6_AliasReq_64::_internal_ifra_prefixmask() const {
  const ::SockAddr6* p = ifra_prefixmask_;
  return p != nullptr ? *p : reinterpret_cast<const ::SockAddr6&>(
      ::_SockAddr6_default_instance_);
}
inline const ::SockAddr6& In6_AliasReq_64::ifra_prefixmask() const {
  // @@protoc_insertion_point(field_get:In6_AliasReq_64.ifra_prefixmask)
  return _internal_ifra_prefixmask();
}
inline void In6_AliasReq_64::unsafe_arena_set_allocated_ifra_prefixmask(
    ::SockAddr6* ifra_prefixmask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ifra_prefixmask_);
  }
  ifra_prefixmask_ = ifra_prefixmask;
  if (ifra_prefixmask) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:In6_AliasReq_64.ifra_prefixmask)
}
inline ::SockAddr6* In6_AliasReq_64::release_ifra_prefixmask() {
  _has_bits_[0] &= ~0x00000008u;
  ::SockAddr6* temp = ifra_prefixmask_;
  ifra_prefixmask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SockAddr6* In6_AliasReq_64::unsafe_arena_release_ifra_prefixmask() {
  // @@protoc_insertion_point(field_release:In6_AliasReq_64.ifra_prefixmask)
  _has_bits_[0] &= ~0x00000008u;
  ::SockAddr6* temp = ifra_prefixmask_;
  ifra_prefixmask_ = nullptr;
  return temp;
}
inline ::SockAddr6* In6_AliasReq_64::_internal_mutable_ifra_prefixmask() {
  _has_bits_[0] |= 0x00000008u;
  if (ifra_prefixmask_ == nullptr) {
    auto* p = CreateMaybeMessage<::SockAddr6>(GetArena());
    ifra_prefixmask_ = p;
  }
  return ifra_prefixmask_;
}
inline ::SockAddr6* In6_AliasReq_64::mutable_ifra_prefixmask() {
  // @@protoc_insertion_point(field_mutable:In6_AliasReq_64.ifra_prefixmask)
  return _internal_mutable_ifra_prefixmask();
}
inline void In6_AliasReq_64::set_allocated_ifra_prefixmask(::SockAddr6* ifra_prefixmask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ifra_prefixmask_;
  }
  if (ifra_prefixmask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ifra_prefixmask);
    if (message_arena != submessage_arena) {
      ifra_prefixmask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ifra_prefixmask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ifra_prefixmask_ = ifra_prefixmask;
  // @@protoc_insertion_point(field_set_allocated:In6_AliasReq_64.ifra_prefixmask)
}

// repeated .IfraFlag ifra_flags = 5;
inline int In6_AliasReq_64::_internal_ifra_flags_size() const {
  return ifra_flags_.size();
}
inline int In6_AliasReq_64::ifra_flags_size() const {
  return _internal_ifra_flags_size();
}
inline void In6_AliasReq_64::clear_ifra_flags() {
  ifra_flags_.Clear();
}
inline ::IfraFlag In6_AliasReq_64::_internal_ifra_flags(int index) const {
  return static_cast< ::IfraFlag >(ifra_flags_.Get(index));
}
inline ::IfraFlag In6_AliasReq_64::ifra_flags(int index) const {
  // @@protoc_insertion_point(field_get:In6_AliasReq_64.ifra_flags)
  return _internal_ifra_flags(index);
}
inline void In6_AliasReq_64::set_ifra_flags(int index, ::IfraFlag value) {
  assert(::IfraFlag_IsValid(value));
  ifra_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:In6_AliasReq_64.ifra_flags)
}
inline void In6_AliasReq_64::_internal_add_ifra_flags(::IfraFlag value) {
  assert(::IfraFlag_IsValid(value));
  ifra_flags_.Add(value);
}
inline void In6_AliasReq_64::add_ifra_flags(::IfraFlag value) {
  // @@protoc_insertion_point(field_add:In6_AliasReq_64.ifra_flags)
  _internal_add_ifra_flags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
In6_AliasReq_64::ifra_flags() const {
  // @@protoc_insertion_point(field_list:In6_AliasReq_64.ifra_flags)
  return ifra_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
In6_AliasReq_64::_internal_mutable_ifra_flags() {
  return &ifra_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
In6_AliasReq_64::mutable_ifra_flags() {
  // @@protoc_insertion_point(field_mutable_list:In6_AliasReq_64.ifra_flags)
  return _internal_mutable_ifra_flags();
}

// required .In6AddrLifetime_64 ifra_lifetime = 6;
inline bool In6_AliasReq_64::_internal_has_ifra_lifetime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ifra_lifetime_ != nullptr);
  return value;
}
inline bool In6_AliasReq_64::has_ifra_lifetime() const {
  return _internal_has_ifra_lifetime();
}
inline void In6_AliasReq_64::clear_ifra_lifetime() {
  if (ifra_lifetime_ != nullptr) ifra_lifetime_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::In6AddrLifetime_64& In6_AliasReq_64::_internal_ifra_lifetime() const {
  const ::In6AddrLifetime_64* p = ifra_lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::In6AddrLifetime_64&>(
      ::_In6AddrLifetime_64_default_instance_);
}
inline const ::In6AddrLifetime_64& In6_AliasReq_64::ifra_lifetime() const {
  // @@protoc_insertion_point(field_get:In6_AliasReq_64.ifra_lifetime)
  return _internal_ifra_lifetime();
}
inline void In6_AliasReq_64::unsafe_arena_set_allocated_ifra_lifetime(
    ::In6AddrLifetime_64* ifra_lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ifra_lifetime_);
  }
  ifra_lifetime_ = ifra_lifetime;
  if (ifra_lifetime) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:In6_AliasReq_64.ifra_lifetime)
}
inline ::In6AddrLifetime_64* In6_AliasReq_64::release_ifra_lifetime() {
  _has_bits_[0] &= ~0x00000010u;
  ::In6AddrLifetime_64* temp = ifra_lifetime_;
  ifra_lifetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::In6AddrLifetime_64* In6_AliasReq_64::unsafe_arena_release_ifra_lifetime() {
  // @@protoc_insertion_point(field_release:In6_AliasReq_64.ifra_lifetime)
  _has_bits_[0] &= ~0x00000010u;
  ::In6AddrLifetime_64* temp = ifra_lifetime_;
  ifra_lifetime_ = nullptr;
  return temp;
}
inline ::In6AddrLifetime_64* In6_AliasReq_64::_internal_mutable_ifra_lifetime() {
  _has_bits_[0] |= 0x00000010u;
  if (ifra_lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::In6AddrLifetime_64>(GetArena());
    ifra_lifetime_ = p;
  }
  return ifra_lifetime_;
}
inline ::In6AddrLifetime_64* In6_AliasReq_64::mutable_ifra_lifetime() {
  // @@protoc_insertion_point(field_mutable:In6_AliasReq_64.ifra_lifetime)
  return _internal_mutable_ifra_lifetime();
}
inline void In6_AliasReq_64::set_allocated_ifra_lifetime(::In6AddrLifetime_64* ifra_lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ifra_lifetime_;
  }
  if (ifra_lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ifra_lifetime);
    if (message_arena != submessage_arena) {
      ifra_lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ifra_lifetime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ifra_lifetime_ = ifra_lifetime;
  // @@protoc_insertion_point(field_set_allocated:In6_AliasReq_64.ifra_lifetime)
}

// -------------------------------------------------------------------

// In6AddrLifetime_64

// required uint64 ia6t_expire = 1;
inline bool In6AddrLifetime_64::_internal_has_ia6t_expire() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool In6AddrLifetime_64::has_ia6t_expire() const {
  return _internal_has_ia6t_expire();
}
inline void In6AddrLifetime_64::clear_ia6t_expire() {
  ia6t_expire_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 In6AddrLifetime_64::_internal_ia6t_expire() const {
  return ia6t_expire_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 In6AddrLifetime_64::ia6t_expire() const {
  // @@protoc_insertion_point(field_get:In6AddrLifetime_64.ia6t_expire)
  return _internal_ia6t_expire();
}
inline void In6AddrLifetime_64::_internal_set_ia6t_expire(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ia6t_expire_ = value;
}
inline void In6AddrLifetime_64::set_ia6t_expire(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ia6t_expire(value);
  // @@protoc_insertion_point(field_set:In6AddrLifetime_64.ia6t_expire)
}

// required uint64 ia6t_preferred = 2;
inline bool In6AddrLifetime_64::_internal_has_ia6t_preferred() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool In6AddrLifetime_64::has_ia6t_preferred() const {
  return _internal_has_ia6t_preferred();
}
inline void In6AddrLifetime_64::clear_ia6t_preferred() {
  ia6t_preferred_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 In6AddrLifetime_64::_internal_ia6t_preferred() const {
  return ia6t_preferred_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 In6AddrLifetime_64::ia6t_preferred() const {
  // @@protoc_insertion_point(field_get:In6AddrLifetime_64.ia6t_preferred)
  return _internal_ia6t_preferred();
}
inline void In6AddrLifetime_64::_internal_set_ia6t_preferred(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ia6t_preferred_ = value;
}
inline void In6AddrLifetime_64::set_ia6t_preferred(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ia6t_preferred(value);
  // @@protoc_insertion_point(field_set:In6AddrLifetime_64.ia6t_preferred)
}

// required uint32 ia6t_vltime = 3;
inline bool In6AddrLifetime_64::_internal_has_ia6t_vltime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool In6AddrLifetime_64::has_ia6t_vltime() const {
  return _internal_has_ia6t_vltime();
}
inline void In6AddrLifetime_64::clear_ia6t_vltime() {
  ia6t_vltime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In6AddrLifetime_64::_internal_ia6t_vltime() const {
  return ia6t_vltime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In6AddrLifetime_64::ia6t_vltime() const {
  // @@protoc_insertion_point(field_get:In6AddrLifetime_64.ia6t_vltime)
  return _internal_ia6t_vltime();
}
inline void In6AddrLifetime_64::_internal_set_ia6t_vltime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ia6t_vltime_ = value;
}
inline void In6AddrLifetime_64::set_ia6t_vltime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ia6t_vltime(value);
  // @@protoc_insertion_point(field_set:In6AddrLifetime_64.ia6t_vltime)
}

// required uint32 ia6t_pltime = 4;
inline bool In6AddrLifetime_64::_internal_has_ia6t_pltime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool In6AddrLifetime_64::has_ia6t_pltime() const {
  return _internal_has_ia6t_pltime();
}
inline void In6AddrLifetime_64::clear_ia6t_pltime() {
  ia6t_pltime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In6AddrLifetime_64::_internal_ia6t_pltime() const {
  return ia6t_pltime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In6AddrLifetime_64::ia6t_pltime() const {
  // @@protoc_insertion_point(field_get:In6AddrLifetime_64.ia6t_pltime)
  return _internal_ia6t_pltime();
}
inline void In6AddrLifetime_64::_internal_set_ia6t_pltime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ia6t_pltime_ = value;
}
inline void In6AddrLifetime_64::set_ia6t_pltime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ia6t_pltime(value);
  // @@protoc_insertion_point(field_set:In6AddrLifetime_64.ia6t_pltime)
}

// -------------------------------------------------------------------

// Packet

// .TcpPacket tcp_packet = 1;
inline bool Packet::_internal_has_tcp_packet() const {
  return packet_case() == kTcpPacket;
}
inline bool Packet::has_tcp_packet() const {
  return _internal_has_tcp_packet();
}
inline void Packet::set_has_tcp_packet() {
  _oneof_case_[0] = kTcpPacket;
}
inline void Packet::clear_tcp_packet() {
  if (_internal_has_tcp_packet()) {
    if (GetArena() == nullptr) {
      delete packet_.tcp_packet_;
    }
    clear_has_packet();
  }
}
inline ::TcpPacket* Packet::release_tcp_packet() {
  // @@protoc_insertion_point(field_release:Packet.tcp_packet)
  if (_internal_has_tcp_packet()) {
    clear_has_packet();
      ::TcpPacket* temp = packet_.tcp_packet_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.tcp_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TcpPacket& Packet::_internal_tcp_packet() const {
  return _internal_has_tcp_packet()
      ? *packet_.tcp_packet_
      : reinterpret_cast< ::TcpPacket&>(::_TcpPacket_default_instance_);
}
inline const ::TcpPacket& Packet::tcp_packet() const {
  // @@protoc_insertion_point(field_get:Packet.tcp_packet)
  return _internal_tcp_packet();
}
inline ::TcpPacket* Packet::unsafe_arena_release_tcp_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.tcp_packet)
  if (_internal_has_tcp_packet()) {
    clear_has_packet();
    ::TcpPacket* temp = packet_.tcp_packet_;
    packet_.tcp_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_tcp_packet(::TcpPacket* tcp_packet) {
  clear_packet();
  if (tcp_packet) {
    set_has_tcp_packet();
    packet_.tcp_packet_ = tcp_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.tcp_packet)
}
inline ::TcpPacket* Packet::_internal_mutable_tcp_packet() {
  if (!_internal_has_tcp_packet()) {
    clear_packet();
    set_has_tcp_packet();
    packet_.tcp_packet_ = CreateMaybeMessage< ::TcpPacket >(GetArena());
  }
  return packet_.tcp_packet_;
}
inline ::TcpPacket* Packet::mutable_tcp_packet() {
  // @@protoc_insertion_point(field_mutable:Packet.tcp_packet)
  return _internal_mutable_tcp_packet();
}

// .Tcp6Packet tcp6_packet = 2;
inline bool Packet::_internal_has_tcp6_packet() const {
  return packet_case() == kTcp6Packet;
}
inline bool Packet::has_tcp6_packet() const {
  return _internal_has_tcp6_packet();
}
inline void Packet::set_has_tcp6_packet() {
  _oneof_case_[0] = kTcp6Packet;
}
inline void Packet::clear_tcp6_packet() {
  if (_internal_has_tcp6_packet()) {
    if (GetArena() == nullptr) {
      delete packet_.tcp6_packet_;
    }
    clear_has_packet();
  }
}
inline ::Tcp6Packet* Packet::release_tcp6_packet() {
  // @@protoc_insertion_point(field_release:Packet.tcp6_packet)
  if (_internal_has_tcp6_packet()) {
    clear_has_packet();
      ::Tcp6Packet* temp = packet_.tcp6_packet_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.tcp6_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tcp6Packet& Packet::_internal_tcp6_packet() const {
  return _internal_has_tcp6_packet()
      ? *packet_.tcp6_packet_
      : reinterpret_cast< ::Tcp6Packet&>(::_Tcp6Packet_default_instance_);
}
inline const ::Tcp6Packet& Packet::tcp6_packet() const {
  // @@protoc_insertion_point(field_get:Packet.tcp6_packet)
  return _internal_tcp6_packet();
}
inline ::Tcp6Packet* Packet::unsafe_arena_release_tcp6_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.tcp6_packet)
  if (_internal_has_tcp6_packet()) {
    clear_has_packet();
    ::Tcp6Packet* temp = packet_.tcp6_packet_;
    packet_.tcp6_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_tcp6_packet(::Tcp6Packet* tcp6_packet) {
  clear_packet();
  if (tcp6_packet) {
    set_has_tcp6_packet();
    packet_.tcp6_packet_ = tcp6_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.tcp6_packet)
}
inline ::Tcp6Packet* Packet::_internal_mutable_tcp6_packet() {
  if (!_internal_has_tcp6_packet()) {
    clear_packet();
    set_has_tcp6_packet();
    packet_.tcp6_packet_ = CreateMaybeMessage< ::Tcp6Packet >(GetArena());
  }
  return packet_.tcp6_packet_;
}
inline ::Tcp6Packet* Packet::mutable_tcp6_packet() {
  // @@protoc_insertion_point(field_mutable:Packet.tcp6_packet)
  return _internal_mutable_tcp6_packet();
}

// .Ip4Packet ip4_packet = 3;
inline bool Packet::_internal_has_ip4_packet() const {
  return packet_case() == kIp4Packet;
}
inline bool Packet::has_ip4_packet() const {
  return _internal_has_ip4_packet();
}
inline void Packet::set_has_ip4_packet() {
  _oneof_case_[0] = kIp4Packet;
}
inline void Packet::clear_ip4_packet() {
  if (_internal_has_ip4_packet()) {
    if (GetArena() == nullptr) {
      delete packet_.ip4_packet_;
    }
    clear_has_packet();
  }
}
inline ::Ip4Packet* Packet::release_ip4_packet() {
  // @@protoc_insertion_point(field_release:Packet.ip4_packet)
  if (_internal_has_ip4_packet()) {
    clear_has_packet();
      ::Ip4Packet* temp = packet_.ip4_packet_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.ip4_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Ip4Packet& Packet::_internal_ip4_packet() const {
  return _internal_has_ip4_packet()
      ? *packet_.ip4_packet_
      : reinterpret_cast< ::Ip4Packet&>(::_Ip4Packet_default_instance_);
}
inline const ::Ip4Packet& Packet::ip4_packet() const {
  // @@protoc_insertion_point(field_get:Packet.ip4_packet)
  return _internal_ip4_packet();
}
inline ::Ip4Packet* Packet::unsafe_arena_release_ip4_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.ip4_packet)
  if (_internal_has_ip4_packet()) {
    clear_has_packet();
    ::Ip4Packet* temp = packet_.ip4_packet_;
    packet_.ip4_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_ip4_packet(::Ip4Packet* ip4_packet) {
  clear_packet();
  if (ip4_packet) {
    set_has_ip4_packet();
    packet_.ip4_packet_ = ip4_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.ip4_packet)
}
inline ::Ip4Packet* Packet::_internal_mutable_ip4_packet() {
  if (!_internal_has_ip4_packet()) {
    clear_packet();
    set_has_ip4_packet();
    packet_.ip4_packet_ = CreateMaybeMessage< ::Ip4Packet >(GetArena());
  }
  return packet_.ip4_packet_;
}
inline ::Ip4Packet* Packet::mutable_ip4_packet() {
  // @@protoc_insertion_point(field_mutable:Packet.ip4_packet)
  return _internal_mutable_ip4_packet();
}

// .Ip6Packet ip6_packet = 4;
inline bool Packet::_internal_has_ip6_packet() const {
  return packet_case() == kIp6Packet;
}
inline bool Packet::has_ip6_packet() const {
  return _internal_has_ip6_packet();
}
inline void Packet::set_has_ip6_packet() {
  _oneof_case_[0] = kIp6Packet;
}
inline void Packet::clear_ip6_packet() {
  if (_internal_has_ip6_packet()) {
    if (GetArena() == nullptr) {
      delete packet_.ip6_packet_;
    }
    clear_has_packet();
  }
}
inline ::Ip6Packet* Packet::release_ip6_packet() {
  // @@protoc_insertion_point(field_release:Packet.ip6_packet)
  if (_internal_has_ip6_packet()) {
    clear_has_packet();
      ::Ip6Packet* temp = packet_.ip6_packet_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.ip6_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Ip6Packet& Packet::_internal_ip6_packet() const {
  return _internal_has_ip6_packet()
      ? *packet_.ip6_packet_
      : reinterpret_cast< ::Ip6Packet&>(::_Ip6Packet_default_instance_);
}
inline const ::Ip6Packet& Packet::ip6_packet() const {
  // @@protoc_insertion_point(field_get:Packet.ip6_packet)
  return _internal_ip6_packet();
}
inline ::Ip6Packet* Packet::unsafe_arena_release_ip6_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.ip6_packet)
  if (_internal_has_ip6_packet()) {
    clear_has_packet();
    ::Ip6Packet* temp = packet_.ip6_packet_;
    packet_.ip6_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_ip6_packet(::Ip6Packet* ip6_packet) {
  clear_packet();
  if (ip6_packet) {
    set_has_ip6_packet();
    packet_.ip6_packet_ = ip6_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.ip6_packet)
}
inline ::Ip6Packet* Packet::_internal_mutable_ip6_packet() {
  if (!_internal_has_ip6_packet()) {
    clear_packet();
    set_has_ip6_packet();
    packet_.ip6_packet_ = CreateMaybeMessage< ::Ip6Packet >(GetArena());
  }
  return packet_.ip6_packet_;
}
inline ::Ip6Packet* Packet::mutable_ip6_packet() {
  // @@protoc_insertion_point(field_mutable:Packet.ip6_packet)
  return _internal_mutable_ip6_packet();
}

// bytes raw_ip4 = 1000;
inline bool Packet::_internal_has_raw_ip4() const {
  return packet_case() == kRawIp4;
}
inline bool Packet::has_raw_ip4() const {
  return _internal_has_raw_ip4();
}
inline void Packet::set_has_raw_ip4() {
  _oneof_case_[0] = kRawIp4;
}
inline void Packet::clear_raw_ip4() {
  if (_internal_has_raw_ip4()) {
    packet_.raw_ip4_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_packet();
  }
}
inline const std::string& Packet::raw_ip4() const {
  // @@protoc_insertion_point(field_get:Packet.raw_ip4)
  return _internal_raw_ip4();
}
inline void Packet::set_raw_ip4(const std::string& value) {
  _internal_set_raw_ip4(value);
  // @@protoc_insertion_point(field_set:Packet.raw_ip4)
}
inline std::string* Packet::mutable_raw_ip4() {
  // @@protoc_insertion_point(field_mutable:Packet.raw_ip4)
  return _internal_mutable_raw_ip4();
}
inline const std::string& Packet::_internal_raw_ip4() const {
  if (_internal_has_raw_ip4()) {
    return packet_.raw_ip4_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Packet::_internal_set_raw_ip4(const std::string& value) {
  if (!_internal_has_raw_ip4()) {
    clear_packet();
    set_has_raw_ip4();
    packet_.raw_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Packet::set_raw_ip4(std::string&& value) {
  // @@protoc_insertion_point(field_set:Packet.raw_ip4)
  if (!_internal_has_raw_ip4()) {
    clear_packet();
    set_has_raw_ip4();
    packet_.raw_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Packet.raw_ip4)
}
inline void Packet::set_raw_ip4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_raw_ip4()) {
    clear_packet();
    set_has_raw_ip4();
    packet_.raw_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Packet.raw_ip4)
}
inline void Packet::set_raw_ip4(const void* value,
                             size_t size) {
  if (!_internal_has_raw_ip4()) {
    clear_packet();
    set_has_raw_ip4();
    packet_.raw_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip4_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Packet.raw_ip4)
}
inline std::string* Packet::_internal_mutable_raw_ip4() {
  if (!_internal_has_raw_ip4()) {
    clear_packet();
    set_has_raw_ip4();
    packet_.raw_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return packet_.raw_ip4_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Packet::release_raw_ip4() {
  // @@protoc_insertion_point(field_release:Packet.raw_ip4)
  if (_internal_has_raw_ip4()) {
    clear_has_packet();
    return packet_.raw_ip4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Packet::set_allocated_raw_ip4(std::string* raw_ip4) {
  if (has_packet()) {
    clear_packet();
  }
  if (raw_ip4 != nullptr) {
    set_has_raw_ip4();
    packet_.raw_ip4_.UnsafeSetDefault(raw_ip4);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(raw_ip4);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.raw_ip4)
}

// bytes raw_ip6 = 1001;
inline bool Packet::_internal_has_raw_ip6() const {
  return packet_case() == kRawIp6;
}
inline bool Packet::has_raw_ip6() const {
  return _internal_has_raw_ip6();
}
inline void Packet::set_has_raw_ip6() {
  _oneof_case_[0] = kRawIp6;
}
inline void Packet::clear_raw_ip6() {
  if (_internal_has_raw_ip6()) {
    packet_.raw_ip6_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_packet();
  }
}
inline const std::string& Packet::raw_ip6() const {
  // @@protoc_insertion_point(field_get:Packet.raw_ip6)
  return _internal_raw_ip6();
}
inline void Packet::set_raw_ip6(const std::string& value) {
  _internal_set_raw_ip6(value);
  // @@protoc_insertion_point(field_set:Packet.raw_ip6)
}
inline std::string* Packet::mutable_raw_ip6() {
  // @@protoc_insertion_point(field_mutable:Packet.raw_ip6)
  return _internal_mutable_raw_ip6();
}
inline const std::string& Packet::_internal_raw_ip6() const {
  if (_internal_has_raw_ip6()) {
    return packet_.raw_ip6_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Packet::_internal_set_raw_ip6(const std::string& value) {
  if (!_internal_has_raw_ip6()) {
    clear_packet();
    set_has_raw_ip6();
    packet_.raw_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Packet::set_raw_ip6(std::string&& value) {
  // @@protoc_insertion_point(field_set:Packet.raw_ip6)
  if (!_internal_has_raw_ip6()) {
    clear_packet();
    set_has_raw_ip6();
    packet_.raw_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Packet.raw_ip6)
}
inline void Packet::set_raw_ip6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_raw_ip6()) {
    clear_packet();
    set_has_raw_ip6();
    packet_.raw_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Packet.raw_ip6)
}
inline void Packet::set_raw_ip6(const void* value,
                             size_t size) {
  if (!_internal_has_raw_ip6()) {
    clear_packet();
    set_has_raw_ip6();
    packet_.raw_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  packet_.raw_ip6_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Packet.raw_ip6)
}
inline std::string* Packet::_internal_mutable_raw_ip6() {
  if (!_internal_has_raw_ip6()) {
    clear_packet();
    set_has_raw_ip6();
    packet_.raw_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return packet_.raw_ip6_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Packet::release_raw_ip6() {
  // @@protoc_insertion_point(field_release:Packet.raw_ip6)
  if (_internal_has_raw_ip6()) {
    clear_has_packet();
    return packet_.raw_ip6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Packet::set_allocated_raw_ip6(std::string* raw_ip6) {
  if (has_packet()) {
    clear_packet();
  }
  if (raw_ip6 != nullptr) {
    set_has_raw_ip6();
    packet_.raw_ip6_.UnsafeSetDefault(raw_ip6);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(raw_ip6);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.raw_ip6)
}

inline bool Packet::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void Packet::clear_has_packet() {
  _oneof_case_[0] = PACKET_NOT_SET;
}
inline Packet::PacketCase Packet::packet_case() const {
  return Packet::PacketCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TcpPacket

// required .IpHdr ip_hdr = 1;
inline bool TcpPacket::_internal_has_ip_hdr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ip_hdr_ != nullptr);
  return value;
}
inline bool TcpPacket::has_ip_hdr() const {
  return _internal_has_ip_hdr();
}
inline void TcpPacket::clear_ip_hdr() {
  if (ip_hdr_ != nullptr) ip_hdr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::IpHdr& TcpPacket::_internal_ip_hdr() const {
  const ::IpHdr* p = ip_hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::IpHdr&>(
      ::_IpHdr_default_instance_);
}
inline const ::IpHdr& TcpPacket::ip_hdr() const {
  // @@protoc_insertion_point(field_get:TcpPacket.ip_hdr)
  return _internal_ip_hdr();
}
inline void TcpPacket::unsafe_arena_set_allocated_ip_hdr(
    ::IpHdr* ip_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_hdr_);
  }
  ip_hdr_ = ip_hdr;
  if (ip_hdr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TcpPacket.ip_hdr)
}
inline ::IpHdr* TcpPacket::release_ip_hdr() {
  _has_bits_[0] &= ~0x00000002u;
  ::IpHdr* temp = ip_hdr_;
  ip_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IpHdr* TcpPacket::unsafe_arena_release_ip_hdr() {
  // @@protoc_insertion_point(field_release:TcpPacket.ip_hdr)
  _has_bits_[0] &= ~0x00000002u;
  ::IpHdr* temp = ip_hdr_;
  ip_hdr_ = nullptr;
  return temp;
}
inline ::IpHdr* TcpPacket::_internal_mutable_ip_hdr() {
  _has_bits_[0] |= 0x00000002u;
  if (ip_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::IpHdr>(GetArena());
    ip_hdr_ = p;
  }
  return ip_hdr_;
}
inline ::IpHdr* TcpPacket::mutable_ip_hdr() {
  // @@protoc_insertion_point(field_mutable:TcpPacket.ip_hdr)
  return _internal_mutable_ip_hdr();
}
inline void TcpPacket::set_allocated_ip_hdr(::IpHdr* ip_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip_hdr_;
  }
  if (ip_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip_hdr);
    if (message_arena != submessage_arena) {
      ip_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_hdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_hdr_ = ip_hdr;
  // @@protoc_insertion_point(field_set_allocated:TcpPacket.ip_hdr)
}

// required .TcpHdr tcp_hdr = 2;
inline bool TcpPacket::_internal_has_tcp_hdr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tcp_hdr_ != nullptr);
  return value;
}
inline bool TcpPacket::has_tcp_hdr() const {
  return _internal_has_tcp_hdr();
}
inline void TcpPacket::clear_tcp_hdr() {
  if (tcp_hdr_ != nullptr) tcp_hdr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TcpHdr& TcpPacket::_internal_tcp_hdr() const {
  const ::TcpHdr* p = tcp_hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::TcpHdr&>(
      ::_TcpHdr_default_instance_);
}
inline const ::TcpHdr& TcpPacket::tcp_hdr() const {
  // @@protoc_insertion_point(field_get:TcpPacket.tcp_hdr)
  return _internal_tcp_hdr();
}
inline void TcpPacket::unsafe_arena_set_allocated_tcp_hdr(
    ::TcpHdr* tcp_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_hdr_);
  }
  tcp_hdr_ = tcp_hdr;
  if (tcp_hdr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TcpPacket.tcp_hdr)
}
inline ::TcpHdr* TcpPacket::release_tcp_hdr() {
  _has_bits_[0] &= ~0x00000004u;
  ::TcpHdr* temp = tcp_hdr_;
  tcp_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TcpHdr* TcpPacket::unsafe_arena_release_tcp_hdr() {
  // @@protoc_insertion_point(field_release:TcpPacket.tcp_hdr)
  _has_bits_[0] &= ~0x00000004u;
  ::TcpHdr* temp = tcp_hdr_;
  tcp_hdr_ = nullptr;
  return temp;
}
inline ::TcpHdr* TcpPacket::_internal_mutable_tcp_hdr() {
  _has_bits_[0] |= 0x00000004u;
  if (tcp_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::TcpHdr>(GetArena());
    tcp_hdr_ = p;
  }
  return tcp_hdr_;
}
inline ::TcpHdr* TcpPacket::mutable_tcp_hdr() {
  // @@protoc_insertion_point(field_mutable:TcpPacket.tcp_hdr)
  return _internal_mutable_tcp_hdr();
}
inline void TcpPacket::set_allocated_tcp_hdr(::TcpHdr* tcp_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_hdr_;
  }
  if (tcp_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_hdr);
    if (message_arena != submessage_arena) {
      tcp_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_hdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tcp_hdr_ = tcp_hdr;
  // @@protoc_insertion_point(field_set_allocated:TcpPacket.tcp_hdr)
}

// optional bytes data = 3;
inline bool TcpPacket::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TcpPacket::has_data() const {
  return _internal_has_data();
}
inline void TcpPacket::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TcpPacket::data() const {
  // @@protoc_insertion_point(field_get:TcpPacket.data)
  return _internal_data();
}
inline void TcpPacket::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TcpPacket.data)
}
inline std::string* TcpPacket::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TcpPacket.data)
  return _internal_mutable_data();
}
inline const std::string& TcpPacket::_internal_data() const {
  return data_.Get();
}
inline void TcpPacket::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TcpPacket::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TcpPacket.data)
}
inline void TcpPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TcpPacket.data)
}
inline void TcpPacket::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TcpPacket.data)
}
inline std::string* TcpPacket::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TcpPacket::release_data() {
  // @@protoc_insertion_point(field_release:TcpPacket.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TcpPacket::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TcpPacket.data)
}

// -------------------------------------------------------------------

// Tcp6Packet

// required .Ip6Hdr ip6_hdr = 1;
inline bool Tcp6Packet::_internal_has_ip6_hdr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ip6_hdr_ != nullptr);
  return value;
}
inline bool Tcp6Packet::has_ip6_hdr() const {
  return _internal_has_ip6_hdr();
}
inline void Tcp6Packet::clear_ip6_hdr() {
  if (ip6_hdr_ != nullptr) ip6_hdr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Ip6Hdr& Tcp6Packet::_internal_ip6_hdr() const {
  const ::Ip6Hdr* p = ip6_hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Ip6Hdr&>(
      ::_Ip6Hdr_default_instance_);
}
inline const ::Ip6Hdr& Tcp6Packet::ip6_hdr() const {
  // @@protoc_insertion_point(field_get:Tcp6Packet.ip6_hdr)
  return _internal_ip6_hdr();
}
inline void Tcp6Packet::unsafe_arena_set_allocated_ip6_hdr(
    ::Ip6Hdr* ip6_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip6_hdr_);
  }
  ip6_hdr_ = ip6_hdr;
  if (ip6_hdr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tcp6Packet.ip6_hdr)
}
inline ::Ip6Hdr* Tcp6Packet::release_ip6_hdr() {
  _has_bits_[0] &= ~0x00000002u;
  ::Ip6Hdr* temp = ip6_hdr_;
  ip6_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Ip6Hdr* Tcp6Packet::unsafe_arena_release_ip6_hdr() {
  // @@protoc_insertion_point(field_release:Tcp6Packet.ip6_hdr)
  _has_bits_[0] &= ~0x00000002u;
  ::Ip6Hdr* temp = ip6_hdr_;
  ip6_hdr_ = nullptr;
  return temp;
}
inline ::Ip6Hdr* Tcp6Packet::_internal_mutable_ip6_hdr() {
  _has_bits_[0] |= 0x00000002u;
  if (ip6_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ip6Hdr>(GetArena());
    ip6_hdr_ = p;
  }
  return ip6_hdr_;
}
inline ::Ip6Hdr* Tcp6Packet::mutable_ip6_hdr() {
  // @@protoc_insertion_point(field_mutable:Tcp6Packet.ip6_hdr)
  return _internal_mutable_ip6_hdr();
}
inline void Tcp6Packet::set_allocated_ip6_hdr(::Ip6Hdr* ip6_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip6_hdr_;
  }
  if (ip6_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip6_hdr);
    if (message_arena != submessage_arena) {
      ip6_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip6_hdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip6_hdr_ = ip6_hdr;
  // @@protoc_insertion_point(field_set_allocated:Tcp6Packet.ip6_hdr)
}

// required .TcpHdr tcp_hdr = 2;
inline bool Tcp6Packet::_internal_has_tcp_hdr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tcp_hdr_ != nullptr);
  return value;
}
inline bool Tcp6Packet::has_tcp_hdr() const {
  return _internal_has_tcp_hdr();
}
inline void Tcp6Packet::clear_tcp_hdr() {
  if (tcp_hdr_ != nullptr) tcp_hdr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TcpHdr& Tcp6Packet::_internal_tcp_hdr() const {
  const ::TcpHdr* p = tcp_hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::TcpHdr&>(
      ::_TcpHdr_default_instance_);
}
inline const ::TcpHdr& Tcp6Packet::tcp_hdr() const {
  // @@protoc_insertion_point(field_get:Tcp6Packet.tcp_hdr)
  return _internal_tcp_hdr();
}
inline void Tcp6Packet::unsafe_arena_set_allocated_tcp_hdr(
    ::TcpHdr* tcp_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_hdr_);
  }
  tcp_hdr_ = tcp_hdr;
  if (tcp_hdr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tcp6Packet.tcp_hdr)
}
inline ::TcpHdr* Tcp6Packet::release_tcp_hdr() {
  _has_bits_[0] &= ~0x00000004u;
  ::TcpHdr* temp = tcp_hdr_;
  tcp_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TcpHdr* Tcp6Packet::unsafe_arena_release_tcp_hdr() {
  // @@protoc_insertion_point(field_release:Tcp6Packet.tcp_hdr)
  _has_bits_[0] &= ~0x00000004u;
  ::TcpHdr* temp = tcp_hdr_;
  tcp_hdr_ = nullptr;
  return temp;
}
inline ::TcpHdr* Tcp6Packet::_internal_mutable_tcp_hdr() {
  _has_bits_[0] |= 0x00000004u;
  if (tcp_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::TcpHdr>(GetArena());
    tcp_hdr_ = p;
  }
  return tcp_hdr_;
}
inline ::TcpHdr* Tcp6Packet::mutable_tcp_hdr() {
  // @@protoc_insertion_point(field_mutable:Tcp6Packet.tcp_hdr)
  return _internal_mutable_tcp_hdr();
}
inline void Tcp6Packet::set_allocated_tcp_hdr(::TcpHdr* tcp_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_hdr_;
  }
  if (tcp_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_hdr);
    if (message_arena != submessage_arena) {
      tcp_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_hdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tcp_hdr_ = tcp_hdr;
  // @@protoc_insertion_point(field_set_allocated:Tcp6Packet.tcp_hdr)
}

// optional bytes data = 3;
inline bool Tcp6Packet::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Tcp6Packet::has_data() const {
  return _internal_has_data();
}
inline void Tcp6Packet::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tcp6Packet::data() const {
  // @@protoc_insertion_point(field_get:Tcp6Packet.data)
  return _internal_data();
}
inline void Tcp6Packet::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Tcp6Packet.data)
}
inline std::string* Tcp6Packet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Tcp6Packet.data)
  return _internal_mutable_data();
}
inline const std::string& Tcp6Packet::_internal_data() const {
  return data_.Get();
}
inline void Tcp6Packet::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tcp6Packet::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tcp6Packet.data)
}
inline void Tcp6Packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Tcp6Packet.data)
}
inline void Tcp6Packet::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tcp6Packet.data)
}
inline std::string* Tcp6Packet::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tcp6Packet::release_data() {
  // @@protoc_insertion_point(field_release:Tcp6Packet.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tcp6Packet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tcp6Packet.data)
}

// -------------------------------------------------------------------

// Ip4Packet

// optional .IpHdr ip_hdr = 1;
inline bool Ip4Packet::_internal_has_ip_hdr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ip_hdr_ != nullptr);
  return value;
}
inline bool Ip4Packet::has_ip_hdr() const {
  return _internal_has_ip_hdr();
}
inline void Ip4Packet::clear_ip_hdr() {
  if (ip_hdr_ != nullptr) ip_hdr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::IpHdr& Ip4Packet::_internal_ip_hdr() const {
  const ::IpHdr* p = ip_hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::IpHdr&>(
      ::_IpHdr_default_instance_);
}
inline const ::IpHdr& Ip4Packet::ip_hdr() const {
  // @@protoc_insertion_point(field_get:Ip4Packet.ip_hdr)
  return _internal_ip_hdr();
}
inline void Ip4Packet::unsafe_arena_set_allocated_ip_hdr(
    ::IpHdr* ip_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_hdr_);
  }
  ip_hdr_ = ip_hdr;
  if (ip_hdr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ip4Packet.ip_hdr)
}
inline ::IpHdr* Ip4Packet::release_ip_hdr() {
  _has_bits_[0] &= ~0x00000002u;
  ::IpHdr* temp = ip_hdr_;
  ip_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IpHdr* Ip4Packet::unsafe_arena_release_ip_hdr() {
  // @@protoc_insertion_point(field_release:Ip4Packet.ip_hdr)
  _has_bits_[0] &= ~0x00000002u;
  ::IpHdr* temp = ip_hdr_;
  ip_hdr_ = nullptr;
  return temp;
}
inline ::IpHdr* Ip4Packet::_internal_mutable_ip_hdr() {
  _has_bits_[0] |= 0x00000002u;
  if (ip_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::IpHdr>(GetArena());
    ip_hdr_ = p;
  }
  return ip_hdr_;
}
inline ::IpHdr* Ip4Packet::mutable_ip_hdr() {
  // @@protoc_insertion_point(field_mutable:Ip4Packet.ip_hdr)
  return _internal_mutable_ip_hdr();
}
inline void Ip4Packet::set_allocated_ip_hdr(::IpHdr* ip_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip_hdr_;
  }
  if (ip_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip_hdr);
    if (message_arena != submessage_arena) {
      ip_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_hdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_hdr_ = ip_hdr;
  // @@protoc_insertion_point(field_set_allocated:Ip4Packet.ip_hdr)
}

// optional bytes data = 2;
inline bool Ip4Packet::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip4Packet::has_data() const {
  return _internal_has_data();
}
inline void Ip4Packet::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Ip4Packet::data() const {
  // @@protoc_insertion_point(field_get:Ip4Packet.data)
  return _internal_data();
}
inline void Ip4Packet::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Ip4Packet.data)
}
inline std::string* Ip4Packet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Ip4Packet.data)
  return _internal_mutable_data();
}
inline const std::string& Ip4Packet::_internal_data() const {
  return data_.Get();
}
inline void Ip4Packet::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Ip4Packet::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Ip4Packet.data)
}
inline void Ip4Packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Ip4Packet.data)
}
inline void Ip4Packet::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Ip4Packet.data)
}
inline std::string* Ip4Packet::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Ip4Packet::release_data() {
  // @@protoc_insertion_point(field_release:Ip4Packet.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ip4Packet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Ip4Packet.data)
}

// -------------------------------------------------------------------

// Ip6Packet

// optional .Ip6Hdr ip6_hdr = 1;
inline bool Ip6Packet::_internal_has_ip6_hdr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ip6_hdr_ != nullptr);
  return value;
}
inline bool Ip6Packet::has_ip6_hdr() const {
  return _internal_has_ip6_hdr();
}
inline void Ip6Packet::clear_ip6_hdr() {
  if (ip6_hdr_ != nullptr) ip6_hdr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Ip6Hdr& Ip6Packet::_internal_ip6_hdr() const {
  const ::Ip6Hdr* p = ip6_hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Ip6Hdr&>(
      ::_Ip6Hdr_default_instance_);
}
inline const ::Ip6Hdr& Ip6Packet::ip6_hdr() const {
  // @@protoc_insertion_point(field_get:Ip6Packet.ip6_hdr)
  return _internal_ip6_hdr();
}
inline void Ip6Packet::unsafe_arena_set_allocated_ip6_hdr(
    ::Ip6Hdr* ip6_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip6_hdr_);
  }
  ip6_hdr_ = ip6_hdr;
  if (ip6_hdr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ip6Packet.ip6_hdr)
}
inline ::Ip6Hdr* Ip6Packet::release_ip6_hdr() {
  _has_bits_[0] &= ~0x00000002u;
  ::Ip6Hdr* temp = ip6_hdr_;
  ip6_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Ip6Hdr* Ip6Packet::unsafe_arena_release_ip6_hdr() {
  // @@protoc_insertion_point(field_release:Ip6Packet.ip6_hdr)
  _has_bits_[0] &= ~0x00000002u;
  ::Ip6Hdr* temp = ip6_hdr_;
  ip6_hdr_ = nullptr;
  return temp;
}
inline ::Ip6Hdr* Ip6Packet::_internal_mutable_ip6_hdr() {
  _has_bits_[0] |= 0x00000002u;
  if (ip6_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ip6Hdr>(GetArena());
    ip6_hdr_ = p;
  }
  return ip6_hdr_;
}
inline ::Ip6Hdr* Ip6Packet::mutable_ip6_hdr() {
  // @@protoc_insertion_point(field_mutable:Ip6Packet.ip6_hdr)
  return _internal_mutable_ip6_hdr();
}
inline void Ip6Packet::set_allocated_ip6_hdr(::Ip6Hdr* ip6_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip6_hdr_;
  }
  if (ip6_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip6_hdr);
    if (message_arena != submessage_arena) {
      ip6_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip6_hdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip6_hdr_ = ip6_hdr;
  // @@protoc_insertion_point(field_set_allocated:Ip6Packet.ip6_hdr)
}

// optional bytes data = 2;
inline bool Ip6Packet::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip6Packet::has_data() const {
  return _internal_has_data();
}
inline void Ip6Packet::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Ip6Packet::data() const {
  // @@protoc_insertion_point(field_get:Ip6Packet.data)
  return _internal_data();
}
inline void Ip6Packet::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Ip6Packet.data)
}
inline std::string* Ip6Packet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Ip6Packet.data)
  return _internal_mutable_data();
}
inline const std::string& Ip6Packet::_internal_data() const {
  return data_.Get();
}
inline void Ip6Packet::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Ip6Packet::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Ip6Packet.data)
}
inline void Ip6Packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Ip6Packet.data)
}
inline void Ip6Packet::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Ip6Packet.data)
}
inline std::string* Ip6Packet::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Ip6Packet::release_data() {
  // @@protoc_insertion_point(field_release:Ip6Packet.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ip6Packet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Ip6Packet.data)
}

// -------------------------------------------------------------------

// Ip6Ext

// required .Protocol ip6e_nxt = 1;
inline bool Ip6Ext::_internal_has_ip6e_nxt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip6Ext::has_ip6e_nxt() const {
  return _internal_has_ip6e_nxt();
}
inline void Ip6Ext::clear_ip6e_nxt() {
  ip6e_nxt_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Protocol Ip6Ext::_internal_ip6e_nxt() const {
  return static_cast< ::Protocol >(ip6e_nxt_);
}
inline ::Protocol Ip6Ext::ip6e_nxt() const {
  // @@protoc_insertion_point(field_get:Ip6Ext.ip6e_nxt)
  return _internal_ip6e_nxt();
}
inline void Ip6Ext::_internal_set_ip6e_nxt(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ip6e_nxt_ = value;
}
inline void Ip6Ext::set_ip6e_nxt(::Protocol value) {
  _internal_set_ip6e_nxt(value);
  // @@protoc_insertion_point(field_set:Ip6Ext.ip6e_nxt)
}

// required uint32 ip6e_len = 2;
inline bool Ip6Ext::_internal_has_ip6e_len() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ip6Ext::has_ip6e_len() const {
  return _internal_has_ip6e_len();
}
inline void Ip6Ext::clear_ip6e_len() {
  ip6e_len_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Ext::_internal_ip6e_len() const {
  return ip6e_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Ext::ip6e_len() const {
  // @@protoc_insertion_point(field_get:Ip6Ext.ip6e_len)
  return _internal_ip6e_len();
}
inline void Ip6Ext::_internal_set_ip6e_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip6e_len_ = value;
}
inline void Ip6Ext::set_ip6e_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6e_len(value);
  // @@protoc_insertion_point(field_set:Ip6Ext.ip6e_len)
}

// -------------------------------------------------------------------

// Ip6RtHdr

// required .Protocol ip6r_nxt = 1;
inline bool Ip6RtHdr::_internal_has_ip6r_nxt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip6RtHdr::has_ip6r_nxt() const {
  return _internal_has_ip6r_nxt();
}
inline void Ip6RtHdr::clear_ip6r_nxt() {
  ip6r_nxt_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Protocol Ip6RtHdr::_internal_ip6r_nxt() const {
  return static_cast< ::Protocol >(ip6r_nxt_);
}
inline ::Protocol Ip6RtHdr::ip6r_nxt() const {
  // @@protoc_insertion_point(field_get:Ip6RtHdr.ip6r_nxt)
  return _internal_ip6r_nxt();
}
inline void Ip6RtHdr::_internal_set_ip6r_nxt(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ip6r_nxt_ = value;
}
inline void Ip6RtHdr::set_ip6r_nxt(::Protocol value) {
  _internal_set_ip6r_nxt(value);
  // @@protoc_insertion_point(field_set:Ip6RtHdr.ip6r_nxt)
}

// required uint32 ip6r_len = 2;
inline bool Ip6RtHdr::_internal_has_ip6r_len() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ip6RtHdr::has_ip6r_len() const {
  return _internal_has_ip6r_len();
}
inline void Ip6RtHdr::clear_ip6r_len() {
  ip6r_len_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6RtHdr::_internal_ip6r_len() const {
  return ip6r_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6RtHdr::ip6r_len() const {
  // @@protoc_insertion_point(field_get:Ip6RtHdr.ip6r_len)
  return _internal_ip6r_len();
}
inline void Ip6RtHdr::_internal_set_ip6r_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip6r_len_ = value;
}
inline void Ip6RtHdr::set_ip6r_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r_len(value);
  // @@protoc_insertion_point(field_set:Ip6RtHdr.ip6r_len)
}

// required .Ip6RtType ip6r_type = 3;
inline bool Ip6RtHdr::_internal_has_ip6r_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ip6RtHdr::has_ip6r_type() const {
  return _internal_has_ip6r_type();
}
inline void Ip6RtHdr::clear_ip6r_type() {
  ip6r_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Ip6RtType Ip6RtHdr::_internal_ip6r_type() const {
  return static_cast< ::Ip6RtType >(ip6r_type_);
}
inline ::Ip6RtType Ip6RtHdr::ip6r_type() const {
  // @@protoc_insertion_point(field_get:Ip6RtHdr.ip6r_type)
  return _internal_ip6r_type();
}
inline void Ip6RtHdr::_internal_set_ip6r_type(::Ip6RtType value) {
  assert(::Ip6RtType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ip6r_type_ = value;
}
inline void Ip6RtHdr::set_ip6r_type(::Ip6RtType value) {
  _internal_set_ip6r_type(value);
  // @@protoc_insertion_point(field_set:Ip6RtHdr.ip6r_type)
}

// required uint32 ip6r_segleft = 4;
inline bool Ip6RtHdr::_internal_has_ip6r_segleft() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ip6RtHdr::has_ip6r_segleft() const {
  return _internal_has_ip6r_segleft();
}
inline void Ip6RtHdr::clear_ip6r_segleft() {
  ip6r_segleft_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6RtHdr::_internal_ip6r_segleft() const {
  return ip6r_segleft_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6RtHdr::ip6r_segleft() const {
  // @@protoc_insertion_point(field_get:Ip6RtHdr.ip6r_segleft)
  return _internal_ip6r_segleft();
}
inline void Ip6RtHdr::_internal_set_ip6r_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ip6r_segleft_ = value;
}
inline void Ip6RtHdr::set_ip6r_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r_segleft(value);
  // @@protoc_insertion_point(field_set:Ip6RtHdr.ip6r_segleft)
}

// -------------------------------------------------------------------

// Ip6Rt0Hdr

// required .Protocol ip6r0_nxt = 1;
inline bool Ip6Rt0Hdr::_internal_has_ip6r0_nxt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip6Rt0Hdr::has_ip6r0_nxt() const {
  return _internal_has_ip6r0_nxt();
}
inline void Ip6Rt0Hdr::clear_ip6r0_nxt() {
  ip6r0_nxt_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Protocol Ip6Rt0Hdr::_internal_ip6r0_nxt() const {
  return static_cast< ::Protocol >(ip6r0_nxt_);
}
inline ::Protocol Ip6Rt0Hdr::ip6r0_nxt() const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_nxt)
  return _internal_ip6r0_nxt();
}
inline void Ip6Rt0Hdr::_internal_set_ip6r0_nxt(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ip6r0_nxt_ = value;
}
inline void Ip6Rt0Hdr::set_ip6r0_nxt(::Protocol value) {
  _internal_set_ip6r0_nxt(value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_nxt)
}

// required uint32 ip6r0_len = 2;
inline bool Ip6Rt0Hdr::_internal_has_ip6r0_len() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ip6Rt0Hdr::has_ip6r0_len() const {
  return _internal_has_ip6r0_len();
}
inline void Ip6Rt0Hdr::clear_ip6r0_len() {
  ip6r0_len_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::_internal_ip6r0_len() const {
  return ip6r0_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::ip6r0_len() const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_len)
  return _internal_ip6r0_len();
}
inline void Ip6Rt0Hdr::_internal_set_ip6r0_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip6r0_len_ = value;
}
inline void Ip6Rt0Hdr::set_ip6r0_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r0_len(value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_len)
}

// required uint32 ip6r0_type = 3;
inline bool Ip6Rt0Hdr::_internal_has_ip6r0_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ip6Rt0Hdr::has_ip6r0_type() const {
  return _internal_has_ip6r0_type();
}
inline void Ip6Rt0Hdr::clear_ip6r0_type() {
  ip6r0_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::_internal_ip6r0_type() const {
  return ip6r0_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::ip6r0_type() const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_type)
  return _internal_ip6r0_type();
}
inline void Ip6Rt0Hdr::_internal_set_ip6r0_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ip6r0_type_ = value;
}
inline void Ip6Rt0Hdr::set_ip6r0_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r0_type(value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_type)
}

// required uint32 ip6r0_segleft = 4;
inline bool Ip6Rt0Hdr::_internal_has_ip6r0_segleft() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ip6Rt0Hdr::has_ip6r0_segleft() const {
  return _internal_has_ip6r0_segleft();
}
inline void Ip6Rt0Hdr::clear_ip6r0_segleft() {
  ip6r0_segleft_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::_internal_ip6r0_segleft() const {
  return ip6r0_segleft_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::ip6r0_segleft() const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_segleft)
  return _internal_ip6r0_segleft();
}
inline void Ip6Rt0Hdr::_internal_set_ip6r0_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ip6r0_segleft_ = value;
}
inline void Ip6Rt0Hdr::set_ip6r0_segleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r0_segleft(value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_segleft)
}

// required uint32 ip6r0_reserved = 5;
inline bool Ip6Rt0Hdr::_internal_has_ip6r0_reserved() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ip6Rt0Hdr::has_ip6r0_reserved() const {
  return _internal_has_ip6r0_reserved();
}
inline void Ip6Rt0Hdr::clear_ip6r0_reserved() {
  ip6r0_reserved_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::_internal_ip6r0_reserved() const {
  return ip6r0_reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::ip6r0_reserved() const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_reserved)
  return _internal_ip6r0_reserved();
}
inline void Ip6Rt0Hdr::_internal_set_ip6r0_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ip6r0_reserved_ = value;
}
inline void Ip6Rt0Hdr::set_ip6r0_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r0_reserved(value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_reserved)
}

// required uint32 ip6r0_slmap = 6;
inline bool Ip6Rt0Hdr::_internal_has_ip6r0_slmap() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Ip6Rt0Hdr::has_ip6r0_slmap() const {
  return _internal_has_ip6r0_slmap();
}
inline void Ip6Rt0Hdr::clear_ip6r0_slmap() {
  ip6r0_slmap_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::_internal_ip6r0_slmap() const {
  return ip6r0_slmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Rt0Hdr::ip6r0_slmap() const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_slmap)
  return _internal_ip6r0_slmap();
}
inline void Ip6Rt0Hdr::_internal_set_ip6r0_slmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ip6r0_slmap_ = value;
}
inline void Ip6Rt0Hdr::set_ip6r0_slmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6r0_slmap(value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_slmap)
}

// repeated .In6Addr ip6r0_addr = 7;
inline int Ip6Rt0Hdr::_internal_ip6r0_addr_size() const {
  return ip6r0_addr_.size();
}
inline int Ip6Rt0Hdr::ip6r0_addr_size() const {
  return _internal_ip6r0_addr_size();
}
inline void Ip6Rt0Hdr::clear_ip6r0_addr() {
  ip6r0_addr_.Clear();
}
inline ::In6Addr Ip6Rt0Hdr::_internal_ip6r0_addr(int index) const {
  return static_cast< ::In6Addr >(ip6r0_addr_.Get(index));
}
inline ::In6Addr Ip6Rt0Hdr::ip6r0_addr(int index) const {
  // @@protoc_insertion_point(field_get:Ip6Rt0Hdr.ip6r0_addr)
  return _internal_ip6r0_addr(index);
}
inline void Ip6Rt0Hdr::set_ip6r0_addr(int index, ::In6Addr value) {
  assert(::In6Addr_IsValid(value));
  ip6r0_addr_.Set(index, value);
  // @@protoc_insertion_point(field_set:Ip6Rt0Hdr.ip6r0_addr)
}
inline void Ip6Rt0Hdr::_internal_add_ip6r0_addr(::In6Addr value) {
  assert(::In6Addr_IsValid(value));
  ip6r0_addr_.Add(value);
}
inline void Ip6Rt0Hdr::add_ip6r0_addr(::In6Addr value) {
  // @@protoc_insertion_point(field_add:Ip6Rt0Hdr.ip6r0_addr)
  _internal_add_ip6r0_addr(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Ip6Rt0Hdr::ip6r0_addr() const {
  // @@protoc_insertion_point(field_list:Ip6Rt0Hdr.ip6r0_addr)
  return ip6r0_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Ip6Rt0Hdr::_internal_mutable_ip6r0_addr() {
  return &ip6r0_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Ip6Rt0Hdr::mutable_ip6r0_addr() {
  // @@protoc_insertion_point(field_mutable_list:Ip6Rt0Hdr.ip6r0_addr)
  return _internal_mutable_ip6r0_addr();
}

// -------------------------------------------------------------------

// Ip6FragHdr

// required .Protocol ip6f_nxt = 1;
inline bool Ip6FragHdr::_internal_has_ip6f_nxt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip6FragHdr::has_ip6f_nxt() const {
  return _internal_has_ip6f_nxt();
}
inline void Ip6FragHdr::clear_ip6f_nxt() {
  ip6f_nxt_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Protocol Ip6FragHdr::_internal_ip6f_nxt() const {
  return static_cast< ::Protocol >(ip6f_nxt_);
}
inline ::Protocol Ip6FragHdr::ip6f_nxt() const {
  // @@protoc_insertion_point(field_get:Ip6FragHdr.ip6f_nxt)
  return _internal_ip6f_nxt();
}
inline void Ip6FragHdr::_internal_set_ip6f_nxt(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ip6f_nxt_ = value;
}
inline void Ip6FragHdr::set_ip6f_nxt(::Protocol value) {
  _internal_set_ip6f_nxt(value);
  // @@protoc_insertion_point(field_set:Ip6FragHdr.ip6f_nxt)
}

// required uint32 ip6f_reserved = 2;
inline bool Ip6FragHdr::_internal_has_ip6f_reserved() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ip6FragHdr::has_ip6f_reserved() const {
  return _internal_has_ip6f_reserved();
}
inline void Ip6FragHdr::clear_ip6f_reserved() {
  ip6f_reserved_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6FragHdr::_internal_ip6f_reserved() const {
  return ip6f_reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6FragHdr::ip6f_reserved() const {
  // @@protoc_insertion_point(field_get:Ip6FragHdr.ip6f_reserved)
  return _internal_ip6f_reserved();
}
inline void Ip6FragHdr::_internal_set_ip6f_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip6f_reserved_ = value;
}
inline void Ip6FragHdr::set_ip6f_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6f_reserved(value);
  // @@protoc_insertion_point(field_set:Ip6FragHdr.ip6f_reserved)
}

// required uint32 ip6f_offlg = 3;
inline bool Ip6FragHdr::_internal_has_ip6f_offlg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ip6FragHdr::has_ip6f_offlg() const {
  return _internal_has_ip6f_offlg();
}
inline void Ip6FragHdr::clear_ip6f_offlg() {
  ip6f_offlg_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6FragHdr::_internal_ip6f_offlg() const {
  return ip6f_offlg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6FragHdr::ip6f_offlg() const {
  // @@protoc_insertion_point(field_get:Ip6FragHdr.ip6f_offlg)
  return _internal_ip6f_offlg();
}
inline void Ip6FragHdr::_internal_set_ip6f_offlg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ip6f_offlg_ = value;
}
inline void Ip6FragHdr::set_ip6f_offlg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6f_offlg(value);
  // @@protoc_insertion_point(field_set:Ip6FragHdr.ip6f_offlg)
}

// required uint32 ip6f_ident = 4;
inline bool Ip6FragHdr::_internal_has_ip6f_ident() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ip6FragHdr::has_ip6f_ident() const {
  return _internal_has_ip6f_ident();
}
inline void Ip6FragHdr::clear_ip6f_ident() {
  ip6f_ident_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6FragHdr::_internal_ip6f_ident() const {
  return ip6f_ident_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6FragHdr::ip6f_ident() const {
  // @@protoc_insertion_point(field_get:Ip6FragHdr.ip6f_ident)
  return _internal_ip6f_ident();
}
inline void Ip6FragHdr::_internal_set_ip6f_ident(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ip6f_ident_ = value;
}
inline void Ip6FragHdr::set_ip6f_ident(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6f_ident(value);
  // @@protoc_insertion_point(field_set:Ip6FragHdr.ip6f_ident)
}

// -------------------------------------------------------------------

// Icmp6Hdr

// optional .Icmp6Type icmp6_type = 1;
inline bool Icmp6Hdr::_internal_has_icmp6_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Icmp6Hdr::has_icmp6_type() const {
  return _internal_has_icmp6_type();
}
inline void Icmp6Hdr::clear_icmp6_type() {
  icmp6_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Icmp6Type Icmp6Hdr::_internal_icmp6_type() const {
  return static_cast< ::Icmp6Type >(icmp6_type_);
}
inline ::Icmp6Type Icmp6Hdr::icmp6_type() const {
  // @@protoc_insertion_point(field_get:Icmp6Hdr.icmp6_type)
  return _internal_icmp6_type();
}
inline void Icmp6Hdr::_internal_set_icmp6_type(::Icmp6Type value) {
  assert(::Icmp6Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  icmp6_type_ = value;
}
inline void Icmp6Hdr::set_icmp6_type(::Icmp6Type value) {
  _internal_set_icmp6_type(value);
  // @@protoc_insertion_point(field_set:Icmp6Hdr.icmp6_type)
}

// optional .Icmp6Code icmp6_code = 2;
inline bool Icmp6Hdr::_internal_has_icmp6_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Icmp6Hdr::has_icmp6_code() const {
  return _internal_has_icmp6_code();
}
inline void Icmp6Hdr::clear_icmp6_code() {
  icmp6_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Icmp6Code Icmp6Hdr::_internal_icmp6_code() const {
  return static_cast< ::Icmp6Code >(icmp6_code_);
}
inline ::Icmp6Code Icmp6Hdr::icmp6_code() const {
  // @@protoc_insertion_point(field_get:Icmp6Hdr.icmp6_code)
  return _internal_icmp6_code();
}
inline void Icmp6Hdr::_internal_set_icmp6_code(::Icmp6Code value) {
  assert(::Icmp6Code_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  icmp6_code_ = value;
}
inline void Icmp6Hdr::set_icmp6_code(::Icmp6Code value) {
  _internal_set_icmp6_code(value);
  // @@protoc_insertion_point(field_set:Icmp6Hdr.icmp6_code)
}

// optional uint32 icmp6_dataun = 4;
inline bool Icmp6Hdr::_internal_has_icmp6_dataun() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Icmp6Hdr::has_icmp6_dataun() const {
  return _internal_has_icmp6_dataun();
}
inline void Icmp6Hdr::clear_icmp6_dataun() {
  icmp6_dataun_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Icmp6Hdr::_internal_icmp6_dataun() const {
  return icmp6_dataun_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Icmp6Hdr::icmp6_dataun() const {
  // @@protoc_insertion_point(field_get:Icmp6Hdr.icmp6_dataun)
  return _internal_icmp6_dataun();
}
inline void Icmp6Hdr::_internal_set_icmp6_dataun(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  icmp6_dataun_ = value;
}
inline void Icmp6Hdr::set_icmp6_dataun(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_icmp6_dataun(value);
  // @@protoc_insertion_point(field_set:Icmp6Hdr.icmp6_dataun)
}

// -------------------------------------------------------------------

// TcpHdr

// required .Port th_sport = 1;
inline bool TcpHdr::_internal_has_th_sport() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TcpHdr::has_th_sport() const {
  return _internal_has_th_sport();
}
inline void TcpHdr::clear_th_sport() {
  th_sport_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Port TcpHdr::_internal_th_sport() const {
  return static_cast< ::Port >(th_sport_);
}
inline ::Port TcpHdr::th_sport() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_sport)
  return _internal_th_sport();
}
inline void TcpHdr::_internal_set_th_sport(::Port value) {
  assert(::Port_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  th_sport_ = value;
}
inline void TcpHdr::set_th_sport(::Port value) {
  _internal_set_th_sport(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_sport)
}

// required .Port th_dport = 2;
inline bool TcpHdr::_internal_has_th_dport() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TcpHdr::has_th_dport() const {
  return _internal_has_th_dport();
}
inline void TcpHdr::clear_th_dport() {
  th_dport_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Port TcpHdr::_internal_th_dport() const {
  return static_cast< ::Port >(th_dport_);
}
inline ::Port TcpHdr::th_dport() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_dport)
  return _internal_th_dport();
}
inline void TcpHdr::_internal_set_th_dport(::Port value) {
  assert(::Port_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  th_dport_ = value;
}
inline void TcpHdr::set_th_dport(::Port value) {
  _internal_set_th_dport(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_dport)
}

// required .TcpSeq th_seq = 3;
inline bool TcpHdr::_internal_has_th_seq() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TcpHdr::has_th_seq() const {
  return _internal_has_th_seq();
}
inline void TcpHdr::clear_th_seq() {
  th_seq_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TcpSeq TcpHdr::_internal_th_seq() const {
  return static_cast< ::TcpSeq >(th_seq_);
}
inline ::TcpSeq TcpHdr::th_seq() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_seq)
  return _internal_th_seq();
}
inline void TcpHdr::_internal_set_th_seq(::TcpSeq value) {
  assert(::TcpSeq_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  th_seq_ = value;
}
inline void TcpHdr::set_th_seq(::TcpSeq value) {
  _internal_set_th_seq(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_seq)
}

// required .TcpSeq th_ack = 4;
inline bool TcpHdr::_internal_has_th_ack() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TcpHdr::has_th_ack() const {
  return _internal_has_th_ack();
}
inline void TcpHdr::clear_th_ack() {
  th_ack_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::TcpSeq TcpHdr::_internal_th_ack() const {
  return static_cast< ::TcpSeq >(th_ack_);
}
inline ::TcpSeq TcpHdr::th_ack() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_ack)
  return _internal_th_ack();
}
inline void TcpHdr::_internal_set_th_ack(::TcpSeq value) {
  assert(::TcpSeq_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  th_ack_ = value;
}
inline void TcpHdr::set_th_ack(::TcpSeq value) {
  _internal_set_th_ack(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_ack)
}

// required uint32 th_off = 5;
inline bool TcpHdr::_internal_has_th_off() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TcpHdr::has_th_off() const {
  return _internal_has_th_off();
}
inline void TcpHdr::clear_th_off() {
  th_off_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::_internal_th_off() const {
  return th_off_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::th_off() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_off)
  return _internal_th_off();
}
inline void TcpHdr::_internal_set_th_off(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  th_off_ = value;
}
inline void TcpHdr::set_th_off(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_off(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_off)
}

// repeated .TcpFlag th_flags = 6;
inline int TcpHdr::_internal_th_flags_size() const {
  return th_flags_.size();
}
inline int TcpHdr::th_flags_size() const {
  return _internal_th_flags_size();
}
inline void TcpHdr::clear_th_flags() {
  th_flags_.Clear();
}
inline ::TcpFlag TcpHdr::_internal_th_flags(int index) const {
  return static_cast< ::TcpFlag >(th_flags_.Get(index));
}
inline ::TcpFlag TcpHdr::th_flags(int index) const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_flags)
  return _internal_th_flags(index);
}
inline void TcpHdr::set_th_flags(int index, ::TcpFlag value) {
  assert(::TcpFlag_IsValid(value));
  th_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_flags)
}
inline void TcpHdr::_internal_add_th_flags(::TcpFlag value) {
  assert(::TcpFlag_IsValid(value));
  th_flags_.Add(value);
}
inline void TcpHdr::add_th_flags(::TcpFlag value) {
  // @@protoc_insertion_point(field_add:TcpHdr.th_flags)
  _internal_add_th_flags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TcpHdr::th_flags() const {
  // @@protoc_insertion_point(field_list:TcpHdr.th_flags)
  return th_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TcpHdr::_internal_mutable_th_flags() {
  return &th_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TcpHdr::mutable_th_flags() {
  // @@protoc_insertion_point(field_mutable_list:TcpHdr.th_flags)
  return _internal_mutable_th_flags();
}

// required uint32 th_win = 7;
inline bool TcpHdr::_internal_has_th_win() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TcpHdr::has_th_win() const {
  return _internal_has_th_win();
}
inline void TcpHdr::clear_th_win() {
  th_win_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::_internal_th_win() const {
  return th_win_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::th_win() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_win)
  return _internal_th_win();
}
inline void TcpHdr::_internal_set_th_win(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  th_win_ = value;
}
inline void TcpHdr::set_th_win(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_win(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_win)
}

// required uint32 th_sum = 8;
inline bool TcpHdr::_internal_has_th_sum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TcpHdr::has_th_sum() const {
  return _internal_has_th_sum();
}
inline void TcpHdr::clear_th_sum() {
  th_sum_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::_internal_th_sum() const {
  return th_sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::th_sum() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_sum)
  return _internal_th_sum();
}
inline void TcpHdr::_internal_set_th_sum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  th_sum_ = value;
}
inline void TcpHdr::set_th_sum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_sum(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_sum)
}

// required uint32 th_urp = 9;
inline bool TcpHdr::_internal_has_th_urp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TcpHdr::has_th_urp() const {
  return _internal_has_th_urp();
}
inline void TcpHdr::clear_th_urp() {
  th_urp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::_internal_th_urp() const {
  return th_urp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TcpHdr::th_urp() const {
  // @@protoc_insertion_point(field_get:TcpHdr.th_urp)
  return _internal_th_urp();
}
inline void TcpHdr::_internal_set_th_urp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  th_urp_ = value;
}
inline void TcpHdr::set_th_urp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_urp(value);
  // @@protoc_insertion_point(field_set:TcpHdr.th_urp)
}

// required bool is_pure_syn = 10;
inline bool TcpHdr::_internal_has_is_pure_syn() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TcpHdr::has_is_pure_syn() const {
  return _internal_has_is_pure_syn();
}
inline void TcpHdr::clear_is_pure_syn() {
  is_pure_syn_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TcpHdr::_internal_is_pure_syn() const {
  return is_pure_syn_;
}
inline bool TcpHdr::is_pure_syn() const {
  // @@protoc_insertion_point(field_get:TcpHdr.is_pure_syn)
  return _internal_is_pure_syn();
}
inline void TcpHdr::_internal_set_is_pure_syn(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_pure_syn_ = value;
}
inline void TcpHdr::set_is_pure_syn(bool value) {
  _internal_set_is_pure_syn(value);
  // @@protoc_insertion_point(field_set:TcpHdr.is_pure_syn)
}

// required bool is_pure_ack = 11;
inline bool TcpHdr::_internal_has_is_pure_ack() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TcpHdr::has_is_pure_ack() const {
  return _internal_has_is_pure_ack();
}
inline void TcpHdr::clear_is_pure_ack() {
  is_pure_ack_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TcpHdr::_internal_is_pure_ack() const {
  return is_pure_ack_;
}
inline bool TcpHdr::is_pure_ack() const {
  // @@protoc_insertion_point(field_get:TcpHdr.is_pure_ack)
  return _internal_is_pure_ack();
}
inline void TcpHdr::_internal_set_is_pure_ack(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_pure_ack_ = value;
}
inline void TcpHdr::set_is_pure_ack(bool value) {
  _internal_set_is_pure_ack(value);
  // @@protoc_insertion_point(field_set:TcpHdr.is_pure_ack)
}

// -------------------------------------------------------------------

// IpHdr

// required uint32 ip_hl = 1;
inline bool IpHdr::_internal_has_ip_hl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpHdr::has_ip_hl() const {
  return _internal_has_ip_hl();
}
inline void IpHdr::clear_ip_hl() {
  ip_hl_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::_internal_ip_hl() const {
  return ip_hl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::ip_hl() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_hl)
  return _internal_ip_hl();
}
inline void IpHdr::_internal_set_ip_hl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ip_hl_ = value;
}
inline void IpHdr::set_ip_hl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_hl(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_hl)
}

// required .IpVersion ip_v = 2;
inline bool IpHdr::_internal_has_ip_v() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IpHdr::has_ip_v() const {
  return _internal_has_ip_v();
}
inline void IpHdr::clear_ip_v() {
  ip_v_ = 4;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::IpVersion IpHdr::_internal_ip_v() const {
  return static_cast< ::IpVersion >(ip_v_);
}
inline ::IpVersion IpHdr::ip_v() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_v)
  return _internal_ip_v();
}
inline void IpHdr::_internal_set_ip_v(::IpVersion value) {
  assert(::IpVersion_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  ip_v_ = value;
}
inline void IpHdr::set_ip_v(::IpVersion value) {
  _internal_set_ip_v(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_v)
}

// required uint32 ip_tos = 3;
inline bool IpHdr::_internal_has_ip_tos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IpHdr::has_ip_tos() const {
  return _internal_has_ip_tos();
}
inline void IpHdr::clear_ip_tos() {
  ip_tos_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::_internal_ip_tos() const {
  return ip_tos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::ip_tos() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_tos)
  return _internal_ip_tos();
}
inline void IpHdr::_internal_set_ip_tos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_tos_ = value;
}
inline void IpHdr::set_ip_tos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_tos(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_tos)
}

// required uint32 ip_len = 4;
inline bool IpHdr::_internal_has_ip_len() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IpHdr::has_ip_len() const {
  return _internal_has_ip_len();
}
inline void IpHdr::clear_ip_len() {
  ip_len_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::_internal_ip_len() const {
  return ip_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::ip_len() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_len)
  return _internal_ip_len();
}
inline void IpHdr::_internal_set_ip_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ip_len_ = value;
}
inline void IpHdr::set_ip_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_len(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_len)
}

// required uint32 ip_id = 5;
inline bool IpHdr::_internal_has_ip_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IpHdr::has_ip_id() const {
  return _internal_has_ip_id();
}
inline void IpHdr::clear_ip_id() {
  ip_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::_internal_ip_id() const {
  return ip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::ip_id() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_id)
  return _internal_ip_id();
}
inline void IpHdr::_internal_set_ip_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ip_id_ = value;
}
inline void IpHdr::set_ip_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_id(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_id)
}

// required uint32 ip_off = 6;
inline bool IpHdr::_internal_has_ip_off() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IpHdr::has_ip_off() const {
  return _internal_has_ip_off();
}
inline void IpHdr::clear_ip_off() {
  ip_off_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::_internal_ip_off() const {
  return ip_off_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::ip_off() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_off)
  return _internal_ip_off();
}
inline void IpHdr::_internal_set_ip_off(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ip_off_ = value;
}
inline void IpHdr::set_ip_off(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_off(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_off)
}

// required uint32 ip_ttl = 7;
inline bool IpHdr::_internal_has_ip_ttl() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IpHdr::has_ip_ttl() const {
  return _internal_has_ip_ttl();
}
inline void IpHdr::clear_ip_ttl() {
  ip_ttl_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::_internal_ip_ttl() const {
  return ip_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpHdr::ip_ttl() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_ttl)
  return _internal_ip_ttl();
}
inline void IpHdr::_internal_set_ip_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ip_ttl_ = value;
}
inline void IpHdr::set_ip_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_ttl(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_ttl)
}

// required .Protocol ip_p = 8;
inline bool IpHdr::_internal_has_ip_p() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IpHdr::has_ip_p() const {
  return _internal_has_ip_p();
}
inline void IpHdr::clear_ip_p() {
  ip_p_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::Protocol IpHdr::_internal_ip_p() const {
  return static_cast< ::Protocol >(ip_p_);
}
inline ::Protocol IpHdr::ip_p() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_p)
  return _internal_ip_p();
}
inline void IpHdr::_internal_set_ip_p(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  ip_p_ = value;
}
inline void IpHdr::set_ip_p(::Protocol value) {
  _internal_set_ip_p(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_p)
}

// required .InAddr ip_src = 9;
inline bool IpHdr::_internal_has_ip_src() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IpHdr::has_ip_src() const {
  return _internal_has_ip_src();
}
inline void IpHdr::clear_ip_src() {
  ip_src_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::InAddr IpHdr::_internal_ip_src() const {
  return static_cast< ::InAddr >(ip_src_);
}
inline ::InAddr IpHdr::ip_src() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_src)
  return _internal_ip_src();
}
inline void IpHdr::_internal_set_ip_src(::InAddr value) {
  assert(::InAddr_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  ip_src_ = value;
}
inline void IpHdr::set_ip_src(::InAddr value) {
  _internal_set_ip_src(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_src)
}

// required .InAddr ip_dst = 10;
inline bool IpHdr::_internal_has_ip_dst() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IpHdr::has_ip_dst() const {
  return _internal_has_ip_dst();
}
inline void IpHdr::clear_ip_dst() {
  ip_dst_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::InAddr IpHdr::_internal_ip_dst() const {
  return static_cast< ::InAddr >(ip_dst_);
}
inline ::InAddr IpHdr::ip_dst() const {
  // @@protoc_insertion_point(field_get:IpHdr.ip_dst)
  return _internal_ip_dst();
}
inline void IpHdr::_internal_set_ip_dst(::InAddr value) {
  assert(::InAddr_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  ip_dst_ = value;
}
inline void IpHdr::set_ip_dst(::InAddr value) {
  _internal_set_ip_dst(value);
  // @@protoc_insertion_point(field_set:IpHdr.ip_dst)
}

// -------------------------------------------------------------------

// Ip6Hdr

// required .Ip6Hdrctl ip6_hdrctl = 1;
inline bool Ip6Hdr::_internal_has_ip6_hdrctl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ip6_hdrctl_ != nullptr);
  return value;
}
inline bool Ip6Hdr::has_ip6_hdrctl() const {
  return _internal_has_ip6_hdrctl();
}
inline void Ip6Hdr::clear_ip6_hdrctl() {
  if (ip6_hdrctl_ != nullptr) ip6_hdrctl_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Ip6Hdrctl& Ip6Hdr::_internal_ip6_hdrctl() const {
  const ::Ip6Hdrctl* p = ip6_hdrctl_;
  return p != nullptr ? *p : reinterpret_cast<const ::Ip6Hdrctl&>(
      ::_Ip6Hdrctl_default_instance_);
}
inline const ::Ip6Hdrctl& Ip6Hdr::ip6_hdrctl() const {
  // @@protoc_insertion_point(field_get:Ip6Hdr.ip6_hdrctl)
  return _internal_ip6_hdrctl();
}
inline void Ip6Hdr::unsafe_arena_set_allocated_ip6_hdrctl(
    ::Ip6Hdrctl* ip6_hdrctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip6_hdrctl_);
  }
  ip6_hdrctl_ = ip6_hdrctl;
  if (ip6_hdrctl) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ip6Hdr.ip6_hdrctl)
}
inline ::Ip6Hdrctl* Ip6Hdr::release_ip6_hdrctl() {
  _has_bits_[0] &= ~0x00000001u;
  ::Ip6Hdrctl* temp = ip6_hdrctl_;
  ip6_hdrctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Ip6Hdrctl* Ip6Hdr::unsafe_arena_release_ip6_hdrctl() {
  // @@protoc_insertion_point(field_release:Ip6Hdr.ip6_hdrctl)
  _has_bits_[0] &= ~0x00000001u;
  ::Ip6Hdrctl* temp = ip6_hdrctl_;
  ip6_hdrctl_ = nullptr;
  return temp;
}
inline ::Ip6Hdrctl* Ip6Hdr::_internal_mutable_ip6_hdrctl() {
  _has_bits_[0] |= 0x00000001u;
  if (ip6_hdrctl_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ip6Hdrctl>(GetArena());
    ip6_hdrctl_ = p;
  }
  return ip6_hdrctl_;
}
inline ::Ip6Hdrctl* Ip6Hdr::mutable_ip6_hdrctl() {
  // @@protoc_insertion_point(field_mutable:Ip6Hdr.ip6_hdrctl)
  return _internal_mutable_ip6_hdrctl();
}
inline void Ip6Hdr::set_allocated_ip6_hdrctl(::Ip6Hdrctl* ip6_hdrctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip6_hdrctl_;
  }
  if (ip6_hdrctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip6_hdrctl);
    if (message_arena != submessage_arena) {
      ip6_hdrctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip6_hdrctl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip6_hdrctl_ = ip6_hdrctl;
  // @@protoc_insertion_point(field_set_allocated:Ip6Hdr.ip6_hdrctl)
}

// required .In6Addr ip6_src = 2;
inline bool Ip6Hdr::_internal_has_ip6_src() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ip6Hdr::has_ip6_src() const {
  return _internal_has_ip6_src();
}
inline void Ip6Hdr::clear_ip6_src() {
  ip6_src_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::In6Addr Ip6Hdr::_internal_ip6_src() const {
  return static_cast< ::In6Addr >(ip6_src_);
}
inline ::In6Addr Ip6Hdr::ip6_src() const {
  // @@protoc_insertion_point(field_get:Ip6Hdr.ip6_src)
  return _internal_ip6_src();
}
inline void Ip6Hdr::_internal_set_ip6_src(::In6Addr value) {
  assert(::In6Addr_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ip6_src_ = value;
}
inline void Ip6Hdr::set_ip6_src(::In6Addr value) {
  _internal_set_ip6_src(value);
  // @@protoc_insertion_point(field_set:Ip6Hdr.ip6_src)
}

// required .In6Addr ip6_dst = 3;
inline bool Ip6Hdr::_internal_has_ip6_dst() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ip6Hdr::has_ip6_dst() const {
  return _internal_has_ip6_dst();
}
inline void Ip6Hdr::clear_ip6_dst() {
  ip6_dst_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::In6Addr Ip6Hdr::_internal_ip6_dst() const {
  return static_cast< ::In6Addr >(ip6_dst_);
}
inline ::In6Addr Ip6Hdr::ip6_dst() const {
  // @@protoc_insertion_point(field_get:Ip6Hdr.ip6_dst)
  return _internal_ip6_dst();
}
inline void Ip6Hdr::_internal_set_ip6_dst(::In6Addr value) {
  assert(::In6Addr_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ip6_dst_ = value;
}
inline void Ip6Hdr::set_ip6_dst(::In6Addr value) {
  _internal_set_ip6_dst(value);
  // @@protoc_insertion_point(field_set:Ip6Hdr.ip6_dst)
}

// -------------------------------------------------------------------

// Ip6Hdrctl

// required uint32 ip6_un1_flow = 1;
inline bool Ip6Hdrctl::_internal_has_ip6_un1_flow() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ip6Hdrctl::has_ip6_un1_flow() const {
  return _internal_has_ip6_un1_flow();
}
inline void Ip6Hdrctl::clear_ip6_un1_flow() {
  ip6_un1_flow_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Hdrctl::_internal_ip6_un1_flow() const {
  return ip6_un1_flow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Hdrctl::ip6_un1_flow() const {
  // @@protoc_insertion_point(field_get:Ip6Hdrctl.ip6_un1_flow)
  return _internal_ip6_un1_flow();
}
inline void Ip6Hdrctl::_internal_set_ip6_un1_flow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ip6_un1_flow_ = value;
}
inline void Ip6Hdrctl::set_ip6_un1_flow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6_un1_flow(value);
  // @@protoc_insertion_point(field_set:Ip6Hdrctl.ip6_un1_flow)
}

// required uint32 ip6_un1_plen = 2;
inline bool Ip6Hdrctl::_internal_has_ip6_un1_plen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ip6Hdrctl::has_ip6_un1_plen() const {
  return _internal_has_ip6_un1_plen();
}
inline void Ip6Hdrctl::clear_ip6_un1_plen() {
  ip6_un1_plen_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Hdrctl::_internal_ip6_un1_plen() const {
  return ip6_un1_plen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Hdrctl::ip6_un1_plen() const {
  // @@protoc_insertion_point(field_get:Ip6Hdrctl.ip6_un1_plen)
  return _internal_ip6_un1_plen();
}
inline void Ip6Hdrctl::_internal_set_ip6_un1_plen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip6_un1_plen_ = value;
}
inline void Ip6Hdrctl::set_ip6_un1_plen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6_un1_plen(value);
  // @@protoc_insertion_point(field_set:Ip6Hdrctl.ip6_un1_plen)
}

// required .Protocol ip6_un1_nxt = 3;
inline bool Ip6Hdrctl::_internal_has_ip6_un1_nxt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ip6Hdrctl::has_ip6_un1_nxt() const {
  return _internal_has_ip6_un1_nxt();
}
inline void Ip6Hdrctl::clear_ip6_un1_nxt() {
  ip6_un1_nxt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Protocol Ip6Hdrctl::_internal_ip6_un1_nxt() const {
  return static_cast< ::Protocol >(ip6_un1_nxt_);
}
inline ::Protocol Ip6Hdrctl::ip6_un1_nxt() const {
  // @@protoc_insertion_point(field_get:Ip6Hdrctl.ip6_un1_nxt)
  return _internal_ip6_un1_nxt();
}
inline void Ip6Hdrctl::_internal_set_ip6_un1_nxt(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ip6_un1_nxt_ = value;
}
inline void Ip6Hdrctl::set_ip6_un1_nxt(::Protocol value) {
  _internal_set_ip6_un1_nxt(value);
  // @@protoc_insertion_point(field_set:Ip6Hdrctl.ip6_un1_nxt)
}

// required uint32 ip6_un1_hlim = 4;
inline bool Ip6Hdrctl::_internal_has_ip6_un1_hlim() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ip6Hdrctl::has_ip6_un1_hlim() const {
  return _internal_has_ip6_un1_hlim();
}
inline void Ip6Hdrctl::clear_ip6_un1_hlim() {
  ip6_un1_hlim_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Hdrctl::_internal_ip6_un1_hlim() const {
  return ip6_un1_hlim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ip6Hdrctl::ip6_un1_hlim() const {
  // @@protoc_insertion_point(field_get:Ip6Hdrctl.ip6_un1_hlim)
  return _internal_ip6_un1_hlim();
}
inline void Ip6Hdrctl::_internal_set_ip6_un1_hlim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ip6_un1_hlim_ = value;
}
inline void Ip6Hdrctl::set_ip6_un1_hlim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip6_un1_hlim(value);
  // @@protoc_insertion_point(field_set:Ip6Hdrctl.ip6_un1_hlim)
}

// -------------------------------------------------------------------

// Key

// required bytes mbuf_data = 1;
inline bool Key::_internal_has_mbuf_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Key::has_mbuf_data() const {
  return _internal_has_mbuf_data();
}
inline void Key::clear_mbuf_data() {
  mbuf_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Key::mbuf_data() const {
  // @@protoc_insertion_point(field_get:Key.mbuf_data)
  return _internal_mbuf_data();
}
inline void Key::set_mbuf_data(const std::string& value) {
  _internal_set_mbuf_data(value);
  // @@protoc_insertion_point(field_set:Key.mbuf_data)
}
inline std::string* Key::mutable_mbuf_data() {
  // @@protoc_insertion_point(field_mutable:Key.mbuf_data)
  return _internal_mutable_mbuf_data();
}
inline const std::string& Key::_internal_mbuf_data() const {
  return mbuf_data_.Get();
}
inline void Key::_internal_set_mbuf_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mbuf_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Key::set_mbuf_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mbuf_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Key.mbuf_data)
}
inline void Key::set_mbuf_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mbuf_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Key.mbuf_data)
}
inline void Key::set_mbuf_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mbuf_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Key.mbuf_data)
}
inline std::string* Key::_internal_mutable_mbuf_data() {
  _has_bits_[0] |= 0x00000001u;
  return mbuf_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Key::release_mbuf_data() {
  // @@protoc_insertion_point(field_release:Key.mbuf_data)
  if (!_internal_has_mbuf_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mbuf_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Key::set_allocated_mbuf_data(std::string* mbuf_data) {
  if (mbuf_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mbuf_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mbuf_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Key.mbuf_data)
}

// -------------------------------------------------------------------

// Ioctl

// required .IoctlIdx ioctl_idx = 1;
inline bool Ioctl::_internal_has_ioctl_idx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ioctl::has_ioctl_idx() const {
  return _internal_has_ioctl_idx();
}
inline void Ioctl::clear_ioctl_idx() {
  ioctl_idx_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::IoctlIdx Ioctl::_internal_ioctl_idx() const {
  return static_cast< ::IoctlIdx >(ioctl_idx_);
}
inline ::IoctlIdx Ioctl::ioctl_idx() const {
  // @@protoc_insertion_point(field_get:Ioctl.ioctl_idx)
  return _internal_ioctl_idx();
}
inline void Ioctl::_internal_set_ioctl_idx(::IoctlIdx value) {
  assert(::IoctlIdx_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ioctl_idx_ = value;
}
inline void Ioctl::set_ioctl_idx(::IoctlIdx value) {
  _internal_set_ioctl_idx(value);
  // @@protoc_insertion_point(field_set:Ioctl.ioctl_idx)
}

// required .FileDescriptor fd = 2;
inline bool Ioctl::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ioctl::has_fd() const {
  return _internal_has_fd();
}
inline void Ioctl::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FileDescriptor Ioctl::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor Ioctl::fd() const {
  // @@protoc_insertion_point(field_get:Ioctl.fd)
  return _internal_fd();
}
inline void Ioctl::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  fd_ = value;
}
inline void Ioctl::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:Ioctl.fd)
}

// -------------------------------------------------------------------

// SetSocketOpt

// optional .Protocol level = 1;
inline bool SetSocketOpt::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetSocketOpt::has_level() const {
  return _internal_has_level();
}
inline void SetSocketOpt::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Protocol SetSocketOpt::_internal_level() const {
  return static_cast< ::Protocol >(level_);
}
inline ::Protocol SetSocketOpt::level() const {
  // @@protoc_insertion_point(field_get:SetSocketOpt.level)
  return _internal_level();
}
inline void SetSocketOpt::_internal_set_level(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void SetSocketOpt::set_level(::Protocol value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:SetSocketOpt.level)
}

// optional .SocketOptName name = 2;
inline bool SetSocketOpt::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetSocketOpt::has_name() const {
  return _internal_has_name();
}
inline void SetSocketOpt::clear_name() {
  name_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::SocketOptName SetSocketOpt::_internal_name() const {
  return static_cast< ::SocketOptName >(name_);
}
inline ::SocketOptName SetSocketOpt::name() const {
  // @@protoc_insertion_point(field_get:SetSocketOpt.name)
  return _internal_name();
}
inline void SetSocketOpt::_internal_set_name(::SocketOptName value) {
  assert(::SocketOptName_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  name_ = value;
}
inline void SetSocketOpt::set_name(::SocketOptName value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SetSocketOpt.name)
}

// optional bytes val = 3;
inline bool SetSocketOpt::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetSocketOpt::has_val() const {
  return _internal_has_val();
}
inline void SetSocketOpt::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetSocketOpt::val() const {
  // @@protoc_insertion_point(field_get:SetSocketOpt.val)
  return _internal_val();
}
inline void SetSocketOpt::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:SetSocketOpt.val)
}
inline std::string* SetSocketOpt::mutable_val() {
  // @@protoc_insertion_point(field_mutable:SetSocketOpt.val)
  return _internal_mutable_val();
}
inline const std::string& SetSocketOpt::_internal_val() const {
  return val_.Get();
}
inline void SetSocketOpt::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSocketOpt::set_val(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetSocketOpt.val)
}
inline void SetSocketOpt::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetSocketOpt.val)
}
inline void SetSocketOpt::set_val(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetSocketOpt.val)
}
inline std::string* SetSocketOpt::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000001u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSocketOpt::release_val() {
  // @@protoc_insertion_point(field_release:SetSocketOpt.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSocketOpt::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetSocketOpt.val)
}

// optional .FileDescriptor fd = 4;
inline bool SetSocketOpt::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetSocketOpt::has_fd() const {
  return _internal_has_fd();
}
inline void SetSocketOpt::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FileDescriptor SetSocketOpt::_internal_fd() const {
  return static_cast< ::FileDescriptor >(fd_);
}
inline ::FileDescriptor SetSocketOpt::fd() const {
  // @@protoc_insertion_point(field_get:SetSocketOpt.fd)
  return _internal_fd();
}
inline void SetSocketOpt::_internal_set_fd(::FileDescriptor value) {
  assert(::FileDescriptor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  fd_ = value;
}
inline void SetSocketOpt::set_fd(::FileDescriptor value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:SetSocketOpt.fd)
}

// -------------------------------------------------------------------

// GetSocketOpt

// optional .Protocol level = 1;
inline bool GetSocketOpt::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSocketOpt::has_level() const {
  return _internal_has_level();
}
inline void GetSocketOpt::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Protocol GetSocketOpt::_internal_level() const {
  return static_cast< ::Protocol >(level_);
}
inline ::Protocol GetSocketOpt::level() const {
  // @@protoc_insertion_point(field_get:GetSocketOpt.level)
  return _internal_level();
}
inline void GetSocketOpt::_internal_set_level(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void GetSocketOpt::set_level(::Protocol value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:GetSocketOpt.level)
}

// optional .SocketOptName name = 2;
inline bool GetSocketOpt::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetSocketOpt::has_name() const {
  return _internal_has_name();
}
inline void GetSocketOpt::clear_name() {
  name_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::SocketOptName GetSocketOpt::_internal_name() const {
  return static_cast< ::SocketOptName >(name_);
}
inline ::SocketOptName GetSocketOpt::name() const {
  // @@protoc_insertion_point(field_get:GetSocketOpt.name)
  return _internal_name();
}
inline void GetSocketOpt::_internal_set_name(::SocketOptName value) {
  assert(::SocketOptName_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  name_ = value;
}
inline void GetSocketOpt::set_name(::SocketOptName value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GetSocketOpt.name)
}

// optional int32 size = 3;
inline bool GetSocketOpt::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSocketOpt::has_size() const {
  return _internal_has_size();
}
inline void GetSocketOpt::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSocketOpt::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSocketOpt::size() const {
  // @@protoc_insertion_point(field_get:GetSocketOpt.size)
  return _internal_size();
}
inline void GetSocketOpt::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void GetSocketOpt::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:GetSocketOpt.size)
}

// optional uint32 fd = 4;
inline bool GetSocketOpt::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetSocketOpt::has_fd() const {
  return _internal_has_fd();
}
inline void GetSocketOpt::clear_fd() {
  fd_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSocketOpt::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSocketOpt::fd() const {
  // @@protoc_insertion_point(field_get:GetSocketOpt.fd)
  return _internal_fd();
}
inline void GetSocketOpt::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fd_ = value;
}
inline void GetSocketOpt::set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:GetSocketOpt.fd)
}

// -------------------------------------------------------------------

// Socket

// required .Domain domain = 1;
inline bool Socket::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Socket::has_domain() const {
  return _internal_has_domain();
}
inline void Socket::clear_domain() {
  domain_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Domain Socket::_internal_domain() const {
  return static_cast< ::Domain >(domain_);
}
inline ::Domain Socket::domain() const {
  // @@protoc_insertion_point(field_get:Socket.domain)
  return _internal_domain();
}
inline void Socket::_internal_set_domain(::Domain value) {
  assert(::Domain_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  domain_ = value;
}
inline void Socket::set_domain(::Domain value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:Socket.domain)
}

// required .SoType so_type = 2;
inline bool Socket::_internal_has_so_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Socket::has_so_type() const {
  return _internal_has_so_type();
}
inline void Socket::clear_so_type() {
  so_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::SoType Socket::_internal_so_type() const {
  return static_cast< ::SoType >(so_type_);
}
inline ::SoType Socket::so_type() const {
  // @@protoc_insertion_point(field_get:Socket.so_type)
  return _internal_so_type();
}
inline void Socket::_internal_set_so_type(::SoType value) {
  assert(::SoType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  so_type_ = value;
}
inline void Socket::set_so_type(::SoType value) {
  _internal_set_so_type(value);
  // @@protoc_insertion_point(field_set:Socket.so_type)
}

// required .Protocol protocol = 3;
inline bool Socket::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Socket::has_protocol() const {
  return _internal_has_protocol();
}
inline void Socket::clear_protocol() {
  protocol_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Protocol Socket::_internal_protocol() const {
  return static_cast< ::Protocol >(protocol_);
}
inline ::Protocol Socket::protocol() const {
  // @@protoc_insertion_point(field_get:Socket.protocol)
  return _internal_protocol();
}
inline void Socket::_internal_set_protocol(::Protocol value) {
  assert(::Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  protocol_ = value;
}
inline void Socket::set_protocol(::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:Socket.protocol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SaeAssocID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SaeAssocID>() {
  return ::SaeAssocID_descriptor();
}
template <> struct is_proto_enum< ::In6Addr> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::In6Addr>() {
  return ::In6Addr_descriptor();
}
template <> struct is_proto_enum< ::InAddr> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InAddr>() {
  return ::InAddr_descriptor();
}
template <> struct is_proto_enum< ::FlowInfo> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FlowInfo>() {
  return ::FlowInfo_descriptor();
}
template <> struct is_proto_enum< ::ScopeId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ScopeId>() {
  return ::ScopeId_descriptor();
}
template <> struct is_proto_enum< ::Port> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Port>() {
  return ::Port_descriptor();
}
template <> struct is_proto_enum< ::IfIdx> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IfIdx>() {
  return ::IfIdx_descriptor();
}
template <> struct is_proto_enum< ::ConnectXFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnectXFlag>() {
  return ::ConnectXFlag_descriptor();
}
template <> struct is_proto_enum< ::ShutdownHow> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShutdownHow>() {
  return ::ShutdownHow_descriptor();
}
template <> struct is_proto_enum< ::NecpOpenFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NecpOpenFlag>() {
  return ::NecpOpenFlag_descriptor();
}
template <> struct is_proto_enum< ::NecpClientId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NecpClientId>() {
  return ::NecpClientId_descriptor();
}
template <> struct is_proto_enum< ::NecpClientActionNumber> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NecpClientActionNumber>() {
  return ::NecpClientActionNumber_descriptor();
}
template <> struct is_proto_enum< ::NecpSessionActionNumber> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NecpSessionActionNumber>() {
  return ::NecpSessionActionNumber_descriptor();
}
template <> struct is_proto_enum< ::IfrName> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IfrName>() {
  return ::IfrName_descriptor();
}
template <> struct is_proto_enum< ::IfruFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IfruFlag>() {
  return ::IfruFlag_descriptor();
}
template <> struct is_proto_enum< ::IfraFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IfraFlag>() {
  return ::IfraFlag_descriptor();
}
template <> struct is_proto_enum< ::Ip6RtType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Ip6RtType>() {
  return ::Ip6RtType_descriptor();
}
template <> struct is_proto_enum< ::Icmp6Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Icmp6Type>() {
  return ::Icmp6Type_descriptor();
}
template <> struct is_proto_enum< ::Icmp6Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Icmp6Code>() {
  return ::Icmp6Code_descriptor();
}
template <> struct is_proto_enum< ::TcpSeq> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TcpSeq>() {
  return ::TcpSeq_descriptor();
}
template <> struct is_proto_enum< ::TcpFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TcpFlag>() {
  return ::TcpFlag_descriptor();
}
template <> struct is_proto_enum< ::IpVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IpVersion>() {
  return ::IpVersion_descriptor();
}
template <> struct is_proto_enum< ::IoctlIdx> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IoctlIdx>() {
  return ::IoctlIdx_descriptor();
}
template <> struct is_proto_enum< ::SocketOptName> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SocketOptName>() {
  return ::SocketOptName_descriptor();
}
template <> struct is_proto_enum< ::FileDescriptor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FileDescriptor>() {
  return ::FileDescriptor_descriptor();
}
template <> struct is_proto_enum< ::Domain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Domain>() {
  return ::Domain_descriptor();
}
template <> struct is_proto_enum< ::SoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SoType>() {
  return ::SoType_descriptor();
}
template <> struct is_proto_enum< ::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol>() {
  return ::Protocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_5ffuzzer_2eproto
